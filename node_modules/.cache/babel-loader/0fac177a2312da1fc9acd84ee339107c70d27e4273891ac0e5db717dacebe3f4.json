{"ast":null,"code":"import \"core-js/modules/web.dom-exception.stack.js\";\nimport { globalVariable } from \"@/global\";\nimport IndexComponent from \"./IndexComponent.vue\";\nexport default {\n  name: \"ProfileComponent\",\n  components: {\n    IndexComponent\n  },\n  data() {\n    return {\n      form: {\n        first_name: \"\",\n        category: \"\",\n        last_name: \"\",\n        fathers_name: \"\",\n        mothers_name: \"\",\n        telephone: \"\",\n        province: \"\",\n        district: \"\",\n        sector: \"\",\n        cell: \"\",\n        gender: \"\",\n        country: \"\",\n        village: \"\",\n        image: \"\"\n      },\n      uploadsUrl: `${globalVariable}/uploads/profile/`,\n      selectedCategoryType: \"\",\n      userId: \"\",\n      userEmail: \"\",\n      message: null,\n      messageType: null,\n      categoryTypes: [],\n      categories: [],\n      categoryName: \"Unknown\",\n      personalFields: [{\n        label: \"Category\",\n        model: \"category\"\n      }, {\n        label: \"First Name\",\n        model: \"first_name\"\n      }, {\n        label: \"Last Name\",\n        model: \"last_name\"\n      }, {\n        label: \"Country\",\n        model: \"country\"\n      }, {\n        label: \"Province\",\n        model: \"province\"\n      }, {\n        label: \"District\",\n        model: \"district\"\n      }, {\n        label: \"Sector\",\n        model: \"sector\"\n      }, {\n        label: \"Cell\",\n        model: \"cell\"\n      }, {\n        label: \"Village\",\n        model: \"village\"\n      }, {\n        label: \"Telephone\",\n        model: \"telephone\"\n      }, {\n        label: \"Gender\",\n        model: \"gender\"\n      }]\n    };\n  },\n  mounted() {\n    this.getUserIdFromEmail();\n    this.loadCategoryTypes();\n  },\n  methods: {\n    async getUserIdFromEmail() {\n      const token = localStorage.getItem(\"employerToken\");\n      if (!token) return;\n      try {\n        const payload = JSON.parse(atob(token.split(\".\")[1]));\n        this.userEmail = payload.email;\n        const res = await fetch(`${globalVariable}/get_user_id_by_email/${this.userEmail}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        const data = await res.json();\n        if (res.ok) {\n          this.userId = data.users_id;\n          this.fetchProfile();\n          this.fetchCategoryNameByUserId();\n        } else {\n          this.message = data.message || \"Unable to get user ID.\";\n          this.messageType = \"alert-danger\";\n        }\n      } catch (err) {\n        console.error(\"Error getting users_id:\", err);\n        this.message = \"Failed to fetch user ID.\";\n        this.messageType = \"alert-danger\";\n      }\n    },\n    async fetchProfile() {\n      try {\n        const res = await fetch(`${globalVariable}/provider/view_profile/${this.userId}`, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"employerToken\")}`\n          }\n        });\n        const data = await res.json();\n        if (res.ok) {\n          this.form = {\n            ...this.form,\n            ...data\n          };\n          if (data.image) {\n            this.form.image = data.image;\n          }\n          if (data.categories_id) {\n            await this.determineCategoryType(data.categories_id);\n          }\n        } else {\n          this.message = data.message || \"Failed to fetch profile\";\n          this.messageType = \"alert-danger\";\n        }\n      } catch (err) {\n        console.error(\"Error fetching profile:\", err);\n        this.message = \"Error loading profile.\";\n        this.messageType = \"alert-danger\";\n      }\n    },\n    async fetchCategoryNameByUserId() {\n      try {\n        const res = await fetch(`${globalVariable}/category/${this.userId}`);\n        const data = await res.json();\n        if (res.ok && data.name) {\n          this.categoryName = data.name;\n        } else {\n          this.categoryName = \"Unknown\";\n        }\n      } catch (error) {\n        console.error(\"Failed to fetch category name:\", error);\n        this.categoryName = \"Error fetching category\";\n      }\n    },\n    async determineCategoryType(categoryId) {\n      try {\n        const res = await fetch(`${globalVariable}/category-details/${categoryId}`);\n        const data = await res.json();\n        if (res.ok) {\n          this.selectedCategoryType = data.type_id;\n          await this.loadCategories();\n          this.form.categories_id = categoryId;\n        }\n      } catch (error) {\n        console.error(\"Error determining category type:\", error);\n      }\n    },\n    async loadCategoryTypes() {\n      try {\n        const res = await fetch(`${globalVariable}/category-types`);\n        const data = await res.json();\n        this.categoryTypes = data;\n      } catch (error) {\n        console.error(\"Failed to load category types:\", error);\n      }\n    },\n    async loadCategories() {\n      try {\n        const res = await fetch(`${globalVariable}/categories/${this.selectedCategoryType}`);\n        const data = await res.json();\n        this.categories = data;\n      } catch (error) {\n        console.error(\"Failed to load categories:\", error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["globalVariable","IndexComponent","name","components","data","form","first_name","category","last_name","fathers_name","mothers_name","telephone","province","district","sector","cell","gender","country","village","image","uploadsUrl","selectedCategoryType","userId","userEmail","message","messageType","categoryTypes","categories","categoryName","personalFields","label","model","mounted","getUserIdFromEmail","loadCategoryTypes","methods","token","localStorage","getItem","payload","JSON","parse","atob","split","email","res","fetch","headers","Authorization","json","ok","users_id","fetchProfile","fetchCategoryNameByUserId","err","console","error","categories_id","determineCategoryType","categoryId","type_id","loadCategories"],"sources":["/Users/gentil/Desktop/Kozi-ai-agent/src/views/jobprovider/ViewProfile.vue"],"sourcesContent":["<template>\n    <IndexComponent />\n    <div\n      class=\"page-wrapper\"\n      id=\"main-wrapper\"\n      data-layout=\"vertical\"\n      data-navbarbg=\"skin6\"\n      data-sidebartype=\"full\"\n      data-sidebar-description=\"fixed\"\n      data-header-description=\"fixed\"\n    >\n      <div class=\"body-wrapper\" style=\"margin-top: -4rem;\">\n        <h5 class=\"card-title fw-semibold mb-4\" style=\"color: #E960A6;\"><i class=\"ti ti-user\"></i> View My profile</h5>\n        <div class=\"card-body\">\n          <!-- <h5 class=\"text-center\">Logged in as:</h5>\n          <h6 class=\"text-center text-muted\">{{ userEmail }}</h6>\n          <h6 class=\"text-center text-muted\">{{ userId }}</h6> -->\n          \n        </div>\n  \n        <div class=\"mx-4\">\n          <div v-if=\"message\" :class=\"['alert', messageType]\">{{ message }}</div>\n          <div class=\"form-group row\">\n            <div class=\"col-md-6\" v-for=\"(field, index) in personalFields\" :key=\"index\">\n              <label class=\"form-label\">{{ field.label }}</label>\n              <p class=\"form-control-plaintext\">\n                \n                 {{ form[field.model] }}\n              </p>\n            </div>\n            <div class=\"col-md-6\">\n              <strong>Profile Image:</strong><br />\n              <a :href=\"uploadsUrl + form.image\" target=\"_blank\">\n                <img :src=\"uploadsUrl + form.image\" alt=\"Profile\" class=\"img-thumbnail\" width=\"250\" />\n              </a>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  import { globalVariable } from \"@/global\";\n  import IndexComponent from \"./IndexComponent.vue\";\n  \n  export default {\n    name: \"ProfileComponent\",\n    components: { IndexComponent },\n    data() {\n      return {\n        form: {\n          first_name: \"\",\n          category: \"\",\n          last_name: \"\",\n          fathers_name: \"\",\n          mothers_name: \"\",\n          telephone: \"\",\n          province: \"\",\n          district: \"\",\n          sector: \"\",\n          cell: \"\",\n          gender: \"\",\n          country: \"\",\n          village: \"\",\n          image: \"\",  \n        },\n        uploadsUrl: `${globalVariable}/uploads/profile/`,\n        selectedCategoryType: \"\",\n        userId: \"\",\n        userEmail: \"\",\n        message: null,\n        messageType: null,\n        categoryTypes: [],\n        categories: [],\n        categoryName: \"Unknown\",\n        personalFields: [\n          { label: \"Category\", model: \"category\" },\n          { label: \"First Name\", model: \"first_name\" },\n          { label: \"Last Name\", model: \"last_name\" },\n          { label: \"Country\", model: \"country\" },\n          { label: \"Province\", model: \"province\" },\n          { label: \"District\", model: \"district\" },\n          { label: \"Sector\", model: \"sector\" },\n          { label: \"Cell\", model: \"cell\" },\n          { label: \"Village\", model: \"village\" },\n          { label: \"Telephone\", model: \"telephone\" },\n          { label: \"Gender\", model: \"gender\" },\n        ],\n      };\n    },\n    mounted() {\n      this.getUserIdFromEmail();\n      this.loadCategoryTypes();\n    },\n    methods: {\n      async getUserIdFromEmail() {\n        const token = localStorage.getItem(\"employerToken\");\n        if (!token) return;\n        try {\n          const payload = JSON.parse(atob(token.split(\".\")[1]));\n          this.userEmail = payload.email;\n          const res = await fetch(`${globalVariable}/get_user_id_by_email/${this.userEmail}`, {\n            headers: { Authorization: `Bearer ${token}` },\n          });\n          const data = await res.json();\n          if (res.ok) {\n            this.userId = data.users_id;\n            this.fetchProfile();\n            this.fetchCategoryNameByUserId(); \n          } else {\n            this.message = data.message || \"Unable to get user ID.\";\n            this.messageType = \"alert-danger\";\n          }\n        } catch (err) {\n          console.error(\"Error getting users_id:\", err);\n          this.message = \"Failed to fetch user ID.\";\n          this.messageType = \"alert-danger\";\n        }\n      },\n\n      async fetchProfile() {\n        try {\n          const res = await fetch(`${globalVariable}/provider/view_profile/${this.userId}`, {\n            headers: { Authorization: `Bearer ${localStorage.getItem(\"employerToken\")}` },\n          });\n          const data = await res.json();\n          if (res.ok) {\n            this.form = { ...this.form, ...data };\n            if (data.image) {\n              this.form.image = data.image; \n            }\n            if (data.categories_id) {\n              await this.determineCategoryType(data.categories_id);\n            }\n          } else {\n            this.message = data.message || \"Failed to fetch profile\";\n            this.messageType = \"alert-danger\";\n          }\n        } catch (err) {\n          console.error(\"Error fetching profile:\", err);\n          this.message = \"Error loading profile.\";\n          this.messageType = \"alert-danger\";\n        }\n      },\n  \n      async fetchCategoryNameByUserId() {\n        try {\n          const res = await fetch(`${globalVariable}/category/${this.userId}`);\n          const data = await res.json();\n          if (res.ok && data.name) {\n            this.categoryName = data.name;\n          } else {\n            this.categoryName = \"Unknown\";\n          }\n        } catch (error) {\n          console.error(\"Failed to fetch category name:\", error);\n          this.categoryName = \"Error fetching category\";\n        }\n      },\n  \n      async determineCategoryType(categoryId) {\n        try {\n          const res = await fetch(`${globalVariable}/category-details/${categoryId}`);\n          const data = await res.json();\n          if (res.ok) {\n            this.selectedCategoryType = data.type_id;\n            await this.loadCategories();\n            this.form.categories_id = categoryId;\n          }\n        } catch (error) {\n          console.error(\"Error determining category type:\", error);\n        }\n      },\n  \n      async loadCategoryTypes() {\n        try {\n          const res = await fetch(`${globalVariable}/category-types`);\n          const data = await res.json();\n          this.categoryTypes = data;\n        } catch (error) {\n          console.error(\"Failed to load category types:\", error);\n        }\n      },\n  \n      async loadCategories() {\n        try {\n          const res = await fetch(`${globalVariable}/categories/${this.selectedCategoryType}`);\n          const data = await res.json();\n          this.categories = data;\n        } catch (error) {\n          console.error(\"Failed to load categories:\", error);\n        }\n      },\n    },\n  };\n  </script>\n  \n\n  <style scoped>\n  .container-fluid {\n    max-width: 800px;\n    margin: auto;\n    padding: 20px;\n    background-color: #ffffff;\n    border-radius: 8px;\n    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.2);\n  }\n  \n  h5 {\n    color: #333;\n    margin-bottom: 20px;\n  }\n  \n  .form-control-plaintext {\n    padding: 12px 0;\n    margin-bottom: 15px;\n    border-bottom: 1px solid #ddd;\n    color: #444;\n    font-size: 16px;\n  }\n  \n  .form-label {\n    font-weight: bold;\n    margin-bottom: 5px;\n    display: block;\n  }\n  \n  .img-thumbnail {\n    border-radius: 8px;\n    margin-top: 8px;\n  }\n  </style>\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}