{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, normalizeClass as _normalizeClass, resolveComponent as _resolveComponent, createBlock as _createBlock, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"header-left\"\n};\nconst _hoisted_2 = {\n  class: \"agent-info\"\n};\nconst _hoisted_3 = {\n  class: \"status-indicator\"\n};\nconst _hoisted_4 = {\n  key: 0,\n  class: \"current-chat-title\"\n};\nconst _hoisted_5 = [\"aria-label\"];\nconst _hoisted_6 = [\"aria-label\"];\nconst _hoisted_7 = {\n  class: \"chat-content\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Sidebar = _resolveComponent(\"Sidebar\");\n  const _component_ChatArea = _resolveComponent(\"ChatArea\");\n  const _component_ChatInput = _resolveComponent(\"ChatInput\");\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: _normalizeClass([\"chatbot-container\", {\n      'embedded-mode': $props.embedded\n    }])\n  }, [_createCommentVNode(\" Chatbot Header (hidden in embedded mode) \"), !$props.embedded ? (_openBlock(), _createElementBlock(\"div\", {\n    key: 0,\n    class: _normalizeClass([\"chatbot-header\", {\n      'minimized-sidebar': $setup.sidebarMinimized && !$setup.isMobile,\n      'full-sidebar': !$setup.sidebarMinimized && !$setup.isMobile\n    }])\n  }, [_createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_cache[6] || (_cache[6] = _createElementVNode(\"h3\", null, \"Kozi AI Agent\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_3, [_cache[4] || (_cache[4] = _createElementVNode(\"span\", {\n    class: \"status-dot online\"\n  }, null, -1 /* HOISTED */)), _cache[5] || (_cache[5] = _createElementVNode(\"span\", null, \"Online\", -1 /* HOISTED */)), $setup.currentChatTitle && $setup.currentChatTitle !== 'New Chat' ? (_openBlock(), _createElementBlock(\"span\", _hoisted_4, \" • \" + _toDisplayString($setup.currentChatTitle), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)])])]), _createCommentVNode(\" Close button for modal view \"), $props.showCloseButton ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 0,\n    class: \"close-btn\",\n    onClick: _cache[0] || (_cache[0] = $event => _ctx.$emit('close'))\n  }, _cache[7] || (_cache[7] = [_createElementVNode(\"i\", {\n    class: \"fas fa-times\"\n  }, null, -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true)], 2 /* CLASS */)) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Sidebar Overlay for Mobile \"), $setup.isMobile && $setup.sidebarVisible ? (_openBlock(), _createElementBlock(\"div\", {\n    key: 1,\n    class: \"sidebar-overlay\",\n    onClick: _cache[1] || (_cache[1] = (...args) => $setup.toggleSidebar && $setup.toggleSidebar(...args))\n  })) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Mobile toggle button \"), $setup.isMobile ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 2,\n    class: \"mobile-sidebar-toggle\",\n    onClick: _cache[2] || (_cache[2] = (...args) => $setup.toggleSidebar && $setup.toggleSidebar(...args)),\n    \"aria-label\": $setup.sidebarVisible ? 'Close history' : 'Open history'\n  }, _cache[8] || (_cache[8] = [_createElementVNode(\"i\", {\n    class: \"fas fa-bars\"\n  }, null, -1 /* HOISTED */)]), 8 /* PROPS */, _hoisted_5)) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Floating history button for small devices (more visible) \"), $setup.isMobile ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 3,\n    class: \"mobile-history-button\",\n    onClick: _cache[3] || (_cache[3] = (...args) => $setup.toggleSidebar && $setup.toggleSidebar(...args)),\n    \"aria-label\": $setup.sidebarVisible ? 'Close history' : 'Open history',\n    title: \"Open chat history\"\n  }, _cache[9] || (_cache[9] = [_createElementVNode(\"i\", {\n    class: \"fas fa-history\",\n    \"aria-hidden\": \"true\"\n  }, null, -1 /* HOISTED */)]), 8 /* PROPS */, _hoisted_6)) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Sidebar (can be controlled via showSidebar prop) \"), $setup.shouldShowSidebar ? (_openBlock(), _createBlock(_component_Sidebar, {\n    key: 4,\n    class: _normalizeClass({\n      'open': $setup.sidebarVisible && $setup.isMobile,\n      'desktop-visible': !$setup.isMobile,\n      'sidebar-embedded': $props.embedded\n    }),\n    visible: $setup.sidebarVisible,\n    isMobile: $setup.isMobile,\n    history: $setup.history,\n    currentSessionId: $setup.currentSession,\n    isMinimized: $setup.sidebarMinimized && !$setup.isMobile,\n    onNewChat: $setup.startNewChat,\n    onToggle: $setup.toggleSidebar,\n    onLoadHistory: $setup.enhancedLoadChatHistory,\n    onDeleteHistory: $setup.handleDeleteHistory,\n    onClearHistory: $setup.clearAllHistory\n  }, null, 8 /* PROPS */, [\"class\", \"visible\", \"isMobile\", \"history\", \"currentSessionId\", \"isMinimized\", \"onNewChat\", \"onToggle\", \"onLoadHistory\", \"onDeleteHistory\", \"onClearHistory\"])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Main Chat Area \"), _createElementVNode(\"div\", {\n    class: _normalizeClass([\"main-chat\", {\n      'minimized-sidebar': $setup.sidebarMinimized && !$setup.isMobile,\n      'full-sidebar': !$setup.sidebarMinimized && !$setup.isMobile,\n      'embedded-chat': $props.embedded\n    }])\n  }, [_createCommentVNode(\" Chat Content Area \"), _createElementVNode(\"div\", _hoisted_7, [_createCommentVNode(\" Chat Messages Area \"), _createVNode(_component_ChatArea, {\n    messages: $setup.messages,\n    loading: $setup.loading,\n    isNewChat: $setup.isNewChat,\n    onSuggestionClick: $setup.sendSuggestion\n  }, null, 8 /* PROPS */, [\"messages\", \"loading\", \"isNewChat\", \"onSuggestionClick\"]), _createCommentVNode(\" Chat Input \"), _createVNode(_component_ChatInput, {\n    disabled: $setup.loading,\n    onSend: $setup.sendMessage\n  }, null, 8 /* PROPS */, [\"disabled\", \"onSend\"])])], 2 /* CLASS */)], 2 /* CLASS */);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_normalizeClass","$props","embedded","_createCommentVNode","$setup","sidebarMinimized","isMobile","_createElementVNode","_hoisted_1","_hoisted_2","_hoisted_3","currentChatTitle","_hoisted_4","_toDisplayString","showCloseButton","onClick","_cache","$event","_ctx","$emit","sidebarVisible","args","toggleSidebar","_hoisted_5","title","_hoisted_6","shouldShowSidebar","_createBlock","_component_Sidebar","visible","history","currentSessionId","currentSession","isMinimized","onNewChat","startNewChat","onToggle","onLoadHistory","enhancedLoadChatHistory","onDeleteHistory","handleDeleteHistory","onClearHistory","clearAllHistory","_hoisted_7","_createVNode","_component_ChatArea","messages","loading","isNewChat","onSuggestionClick","sendSuggestion","_component_ChatInput","disabled","onSend","sendMessage"],"sources":["/Users/gentil/Desktop/Kozi-ai-agent/src/views/ChatbotComponent.vue"],"sourcesContent":["<template>\n  <div class=\"chatbot-container\" :class=\"{ 'embedded-mode': embedded }\">\n    <!-- Chatbot Header (hidden in embedded mode) -->\n    <div v-if=\"!embedded\" class=\"chatbot-header\" :class=\"{ 'minimized-sidebar': sidebarMinimized && !isMobile, 'full-sidebar': !sidebarMinimized && !isMobile }\">\n      <div class=\"header-left\">\n        <div class=\"agent-info\">\n          <h3>Kozi AI Agent</h3>\n          <div class=\"status-indicator\">\n            <span class=\"status-dot online\"></span>\n            <span>Online</span>\n            <span \n              v-if=\"currentChatTitle && currentChatTitle !== 'New Chat'\" \n              class=\"current-chat-title\"\n            >\n              • {{ currentChatTitle }}\n            </span>\n          </div>\n        </div>\n      </div>\n      \n      <!-- Close button for modal view -->\n      <button class=\"close-btn\" @click=\"$emit('close')\" v-if=\"showCloseButton\">\n        <i class=\"fas fa-times\"></i>\n      </button>\n    </div>\n\n    <!-- Sidebar Overlay for Mobile -->\n    <div \n      v-if=\"isMobile && sidebarVisible\" \n      class=\"sidebar-overlay\" \n      @click=\"toggleSidebar\"\n    ></div>\n\n    <!-- Mobile toggle button -->\n    <button \n      v-if=\"isMobile\" \n      class=\"mobile-sidebar-toggle\" \n      @click=\"toggleSidebar\"\n      :aria-label=\"sidebarVisible ? 'Close history' : 'Open history'\"\n    >\n      <i class=\"fas fa-bars\"></i>\n    </button>\n\n    <!-- Floating history button for small devices (more visible) -->\n    <button\n      v-if=\"isMobile\"\n      class=\"mobile-history-button\"\n      @click=\"toggleSidebar\"\n      :aria-label=\"sidebarVisible ? 'Close history' : 'Open history'\"\n      title=\"Open chat history\"\n    >\n      <i class=\"fas fa-history\" aria-hidden=\"true\"></i>\n    </button>\n\n    <!-- Sidebar (can be controlled via showSidebar prop) -->\n    <Sidebar \n      v-if=\"shouldShowSidebar\"\n      :class=\"{ \n        'open': sidebarVisible && isMobile, \n        'desktop-visible': !isMobile,\n        'sidebar-embedded': embedded\n      }\"\n      :visible=\"sidebarVisible\"\n      :isMobile=\"isMobile\"\n      :history=\"history\"\n      :currentSessionId=\"currentSession\"\n      :isMinimized=\"sidebarMinimized && !isMobile\"\n      @new-chat=\"startNewChat\" \n      @toggle=\"toggleSidebar\"\n      @load-history=\"enhancedLoadChatHistory\"\n      @delete-history=\"handleDeleteHistory\"\n      @clear-history=\"clearAllHistory\"\n    />\n\n    <!-- Main Chat Area -->\n    <div class=\"main-chat\" :class=\"{ 'minimized-sidebar': sidebarMinimized && !isMobile, 'full-sidebar': !sidebarMinimized && !isMobile, 'embedded-chat': embedded }\">\n      <!-- Chat Content Area -->\n      <div class=\"chat-content\">\n        <!-- Chat Messages Area -->\n        <ChatArea \n          :messages=\"messages\" \n          :loading=\"loading\"\n          :isNewChat=\"isNewChat\"\n          @suggestion-click=\"sendSuggestion\" \n        />\n        \n        <!-- Chat Input -->\n        <ChatInput \n          :disabled=\"loading\" \n          @send=\"sendMessage\" \n        />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, computed, watch, onMounted, onUnmounted } from 'vue'\nimport Sidebar from '../components/Sidebar.vue'\nimport ChatArea from '../components/ChatArea.vue'\nimport ChatInput from '../components/ChatInput.vue'\nimport { useKoziChat } from '../composables/useKoziChat'\n\nexport default {\n  name: 'ChatbotComponent',\n  components: {\n    Sidebar,\n    ChatArea,\n    ChatInput\n  },\n  props: {\n    showCloseButton: {\n      type: Boolean,\n      default: false\n    },\n    embedded: {\n      type: Boolean,\n      default: false\n    },\n    showSidebar: {\n      type: Boolean,\n      default: undefined\n    },\n    prefilledMessage: {\n      type: String,\n      default: ''\n    },\n    userType: {\n      type: String,\n      default: 'employee'\n    }\n  },\n  emits: ['close'],\n  setup(props) {\n    // Local component state for sidebar visibility\n    const sidebarVisible = ref(true)\n    \n    // Track if sidebar is minimized (desktop only) - starts minimized by default\n    const sidebarMinimized = ref(true)\n\n    // Track if we're on mobile\n    const isMobile = ref(false)\n\n    // Track if we're in a new chat\n    const isNewChat = ref(true)\n\n    // Computed: Determine if sidebar should be shown\n    // If showSidebar prop is explicitly set, use it; otherwise default based on embedded mode\n    const shouldShowSidebar = computed(() => {\n      if (props.showSidebar !== undefined) {\n        return props.showSidebar\n      }\n      // Always mount on mobile so the button can show/hide it\n      if (isMobile.value) return true\n      return !props.embedded\n    })\n\n    // Check screen size\n    const checkScreenSize = () => {\n      isMobile.value = window.innerWidth <= 768\n      // Auto-hide sidebar on mobile by default\n      if (isMobile.value) {\n        sidebarVisible.value = false\n      } else {\n        // Show sidebar by default on desktop\n        sidebarVisible.value = true\n      }\n    }\n\n    // Use our chat composable\n    const {\n      // State\n      messages,\n      history,\n      loading,\n      currentChatTitle,\n      currentSession,\n      \n      // Actions\n      startNewChat: originalStartNewChat,\n      sendMessage: originalSendMessage,\n      sendSuggestion: originalSendSuggestion,\n      loadChatHistory,\n      deleteHistoryItem,\n      clearAllHistory\n    } = useKoziChat()\n\n    // Enhanced startNewChat that sets isNewChat to true\n    const startNewChat = () => {\n      isNewChat.value = true\n      originalStartNewChat()\n      // Auto-close sidebar on mobile after starting new chat\n      if (isMobile.value) {\n        sidebarVisible.value = false\n      }\n    }\n\n    // Enhanced sendMessage that sets isNewChat to false when sending first message\n    const sendMessage = (message) => {\n      if (isNewChat.value) {\n        isNewChat.value = false\n      }\n      originalSendMessage(message)\n    }\n\n    // Enhanced sendSuggestion that sets isNewChat to false\n    const sendSuggestion = (suggestion) => {\n      if (isNewChat.value) {\n        isNewChat.value = false\n      }\n      originalSendSuggestion(suggestion)\n    }\n\n    // Enhanced loadChatHistory that sets isNewChat to false\n    const enhancedLoadChatHistory = (historyItem) => {\n      console.log('📂 Loading chat history:', historyItem)\n      isNewChat.value = false // Set to false BEFORE loading\n      loadChatHistory(historyItem)\n      // Auto-close sidebar on mobile after loading chat\n      if (isMobile.value) {\n        sidebarVisible.value = false\n      }\n    }\n\n    // Enhanced deleteHistoryItem that extracts sessionId from item\n    const handleDeleteHistory = async (item) => {\n      try {\n        console.log('🗑️ Delete button clicked, item received:', item)\n        const sessionId = item.sessionId || item.id || item\n        console.log('🗑️ Extracted sessionId:', sessionId)\n        \n        if (!sessionId) {\n          console.error('❌ No valid sessionId found in item:', item)\n          alert('Cannot delete: Invalid session ID')\n          return\n        }\n        \n        await deleteHistoryItem(sessionId)\n        console.log('✅ Delete completed successfully')\n      } catch (error) {\n        console.error('❌ Failed to delete chat session:', error)\n        alert(`Failed to delete chat: ${error.message}`)\n      }\n    }\n\n    // Sidebar toggle functionality\n    const toggleSidebar = () => {\n      if (isMobile.value) {\n        sidebarVisible.value = !sidebarVisible.value\n      } else {\n        sidebarMinimized.value = !sidebarMinimized.value\n      }\n    }\n\n    // Check initial screen size on component mount\n    onMounted(() => {\n      checkScreenSize()\n      \n      // Add resize listener\n      window.addEventListener('resize', checkScreenSize)\n      \n      // Auto-send prefilled message if provided\n      if (props.prefilledMessage && props.prefilledMessage.trim()) {\n        // Wait a bit for the chat to initialize, then send the prefilled message\n        setTimeout(() => {\n          console.log('🚀 Auto-sending prefilled message:', props.prefilledMessage)\n          sendMessage(props.prefilledMessage)\n        }, 1000)\n      }\n    })\n\n    // Cleanup resize listener\n    onUnmounted(() => {\n      window.removeEventListener('resize', checkScreenSize)\n    })\n\n    // Watch messages to ensure isNewChat is false when messages exist\n    watch(\n      () => messages.value,\n      (newMessages) => {\n        if (newMessages && newMessages.length > 0) {\n          isNewChat.value = false\n        }\n      },\n      { immediate: true, deep: true }\n    )\n\n    return {\n      // State\n      sidebarVisible,\n      sidebarMinimized,\n      isMobile,\n      isNewChat,\n      shouldShowSidebar,\n      messages,\n      history,\n      loading,\n      currentChatTitle,\n      currentSession,\n      \n      // Actions\n      startNewChat,\n      sendMessage,\n      sendSuggestion,\n      enhancedLoadChatHistory,\n      handleDeleteHistory,\n      clearAllHistory,\n      toggleSidebar\n    }\n  }\n}\n</script>\n\n<style scoped>\n.chatbot-container {\n  display: flex;\n  /* Use dynamic viewport height to avoid mobile browser UI issues */\n  height: 100dvh;\n  width: 100dvw;\n  background: #f9fafb;\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  overflow: hidden;\n  z-index: 9999;\n}\n\n/* Embedded mode - fits within dashboard */\n.chatbot-container.embedded-mode {\n  position: relative;\n  height: 100%;\n  width: 100%;\n  z-index: 1;\n  display: flex;\n  flex-direction: row; /* Changed from column to row to show sidebar + chat side by side */\n  background: #f9fafb;\n  overflow: hidden;\n  transform: none !important;\n  transition: none !important;\n}\n\n.chatbot-header {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  padding: 1rem 2rem;\n  border-bottom: 1px solid #e5e7eb;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  background: rgba(255, 255, 255, 0.95);\n  backdrop-filter: blur(10px);\n  z-index: 1000;\n  transition: left 0.3s ease;\n}\n\n:root {\n  --chat-header-height: 80px;\n}\n\n/* Header with full sidebar (desktop) */\n.chatbot-header.full-sidebar {\n  left: 280px;\n}\n\n/* Header with minimized sidebar (desktop) */\n.chatbot-header.minimized-sidebar {\n  left: 60px;\n}\n\n/* Embedded header */\n.chatbot-header.embedded-header {\n  position: relative;\n  left: 0;\n  top: 0;\n  width: 100%;\n  flex-shrink: 0;\n}\n\n.header-left {\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n}\n\n.sidebar-toggle-btn {\n  background: #f3f4f6;\n  border: none;\n  padding: 0.75rem;\n  border-radius: 0.5rem;\n  cursor: pointer;\n  color: #6b7280;\n  transition: all 0.15s;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 40px;\n  height: 40px;\n}\n\n.sidebar-toggle-btn:hover {\n  background: #ec4899;\n  color: white;\n  transform: scale(1.05);\n}\n\n.agent-info h3 {\n  font-size: 1.25rem;\n  font-weight: 700;\n  margin-bottom: 0.25rem;\n  color: #111827;\n  letter-spacing: -0.025em;\n}\n\n.status-indicator {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  font-size: 0.875rem;\n  color: #6b7280;\n  font-weight: 500;\n}\n\n.status-dot {\n  width: 8px;\n  height: 8px;\n  border-radius: 50%;\n  position: relative;\n}\n\n.status-dot.online {\n  background: #10b981;\n  box-shadow: 0 0 0 2px rgba(16, 185, 129, 0.2);\n}\n\n.status-dot.online::before {\n  content: '';\n  position: absolute;\n  top: -2px;\n  left: -2px;\n  right: -2px;\n  bottom: -2px;\n  border-radius: 50%;\n  background: #10b981;\n  animation: pulse 2s infinite;\n  opacity: 0.6;\n}\n\n@keyframes pulse {\n  0%, 100% { transform: scale(1); opacity: 0.6; }\n  50% { transform: scale(1.2); opacity: 0.3; }\n}\n\n.current-chat-title {\n  color: #6b7280;\n  font-size: 0.875rem;\n  font-weight: 500;\n  max-width: 200px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.close-btn {\n  background: #f3f4f6;\n  border: none;\n  padding: 0.75rem;\n  border-radius: 0.5rem;\n  cursor: pointer;\n  color: #6b7280;\n  transition: all 0.15s;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 40px;\n  height: 40px;\n}\n\n.close-btn:hover {\n  background: #ef4444;\n  color: white;\n  transform: scale(1.05);\n}\n\n.sidebar-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(0, 0, 0, 0.5);\n  z-index: 9999;\n  animation: fadeIn 0.2s ease-in-out;\n}\n\n@keyframes fadeIn {\n  from { opacity: 0; }\n  to { opacity: 1; }\n}\n\n.main-chat {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  background: white;\n  position: fixed;\n  top: var(--chat-header-height);\n  left: 0;\n  right: 0;\n  bottom: 0;\n  overflow: hidden;\n  transition: left 0.3s ease;\n}\n\n/* Main chat with full sidebar (desktop) */\n.main-chat.full-sidebar {\n  left: 280px;\n}\n\n/* Main chat with minimized sidebar (desktop) */\n.main-chat.minimized-sidebar {\n  left: 60px;\n}\n\n/* Embedded chat */\n.main-chat.embedded-chat {\n  position: relative;\n  top: 0;\n  left: 0 !important; /* Override any left offset */\n  right: 0;\n  bottom: 0;\n  flex: 1;\n  display: flex;\n  flex-direction: row;\n  overflow: hidden;\n  height: 100%;\n}\n\n/* Sidebar in embedded mode - use relative positioning */\n:deep(.sidebar-embedded) {\n  position: relative !important;\n  height: 100% !important;\n  max-height: 100% !important;\n  top: auto !important;\n  left: auto !important;\n  z-index: 1 !important;\n  flex-shrink: 0; /* Prevent sidebar from shrinking */\n}\n\n/* Agent sidebar removed for cleaner design */\n\n/* Chat content area (right side in embedded mode) */\n.chat-content {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  min-height: 0; /* allow ChatArea to size and scroll */\n  overflow: hidden;\n  background: white;\n}\n\n/* Removed embedded topbar - cleaner design */\n\n/* Provide a slightly narrower max width like the reference */\n.chat-content > :deep(.message-content) { max-width: 720px; }\n\n/* Mobile responsive */\n@media (max-width: 768px) {\n    :root { --chat-header-height: 70px; }\n  .mobile-sidebar-toggle {\n    position: fixed;\n    top: 16px;\n    left: 16px;\n    z-index: 10050;\n    width: 40px;\n    height: 40px;\n    border-radius: 10px;\n    border: 1px solid #eee;\n    background: #fff;\n    color: #374151;\n    box-shadow: 0 4px 12px rgba(0,0,0,.08);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n  \n  .chatbot-header {\n    padding: 1rem;\n    left: 0;\n  }\n\n  /* Ensure chat input and floating controls respect safe-area insets on modern iOS browsers */\n  :deep(.chat-input-container) {\n    padding-bottom: calc(env(safe-area-inset-bottom, 0px) + 16px) !important;\n  }\n\n  .mobile-history-button {\n    bottom: calc(90px + env(safe-area-inset-bottom, 0px));\n  }\n\n  /* Floating history button placed above the chat input on mobile */\n  .mobile-history-button {\n    position: fixed;\n    right: 16px;\n    bottom: 90px; /* placed above typical chat input area */\n    z-index: 10060;\n    width: 48px;\n    height: 48px;\n    border-radius: 50%;\n    border: none;\n    background: linear-gradient(135deg, #E960A6 0%, #F472B6 100%);\n    color: white;\n    box-shadow: 0 8px 20px rgba(233,96,166,0.18);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    cursor: pointer;\n    transition: transform 0.12s ease, box-shadow 0.12s ease;\n  }\n\n  .mobile-history-button:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 12px 28px rgba(233,96,166,0.22);\n  }\n\n  .mobile-history-button i { font-size: 18px; }\n  \n  .agent-info h3 {\n    font-size: 1.125rem;\n  }\n  \n  .main-chat { top: 70px; left: 0; right: 0; bottom: 0; height: calc(100dvh - 70px); }\n  \n  /* Embedded mode mobile - ensure full width and no sidebar issues */\n  .chatbot-container.embedded-mode {\n    flex-direction: column !important;\n    width: 100% !important;\n    max-width: 100vw !important;\n    overflow-x: hidden !important;\n  }\n  \n  /* Show chat sidebar on mobile in embedded mode (slides via Sidebar styles) */\n  .chatbot-container.embedded-mode :deep(.sidebar-embedded) {\n    display: block !important;\n    position: fixed !important;\n    top: 70px !important;\n    left: 0 !important;\n    height: calc(100dvh - 70px) !important;\n    width: 100% !important;\n    z-index: 10061 !important;\n  }\n  \n  /* Ensure main chat takes full width on mobile */\n  .main-chat.embedded-chat {\n    width: 100% !important;\n    max-width: 100vw !important;\n  }\n}\n</style>\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}