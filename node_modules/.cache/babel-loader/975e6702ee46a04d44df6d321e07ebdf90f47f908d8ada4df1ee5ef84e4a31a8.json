{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, normalizeClass as _normalizeClass, resolveComponent as _resolveComponent, createBlock as _createBlock, createTextVNode as _createTextVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"chat-messages\",\n  ref: \"chatContainer\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"welcome-screen\"\n};\nconst _hoisted_3 = {\n  class: \"welcome-content\"\n};\nconst _hoisted_4 = {\n  class: \"suggestion-cards\"\n};\nconst _hoisted_5 = [\"onClick\"];\nconst _hoisted_6 = {\n  class: \"message-avatar\"\n};\nconst _hoisted_7 = [\"src\"];\nconst _hoisted_8 = {\n  class: \"message-content\"\n};\nconst _hoisted_9 = [\"innerHTML\"];\nconst _hoisted_10 = {\n  key: 0,\n  class: \"job-cards-container\"\n};\nconst _hoisted_11 = {\n  class: \"job-cards-grid\"\n};\nconst _hoisted_12 = {\n  key: 1,\n  class: \"candidate-cards-container\"\n};\nconst _hoisted_13 = {\n  class: \"candidate-cards-grid\"\n};\nconst _hoisted_14 = {\n  key: 2,\n  class: \"typing-indicator\"\n};\nconst _hoisted_15 = {\n  class: \"message-text\"\n};\nconst _hoisted_16 = {\n  key: 0,\n  class: \"loading-indicator\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_JobCard = _resolveComponent(\"JobCard\");\n  const _component_CandidateCard = _resolveComponent(\"CandidateCard\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" Welcome Screen (show ONLY for truly new/empty chats) \"), $setup.showWelcomeScreen ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"h1\", null, _toDisplayString($setup.welcomeMessage), 1 /* TEXT */), _cache[0] || (_cache[0] = _createElementVNode(\"p\", null, \"I'm here to help you with everything related to Kozi platform\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_4, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.suggestionCards, (suggestion, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: \"suggestion-card\",\n      onClick: $event => $setup.handleSuggestionClick(suggestion.msg)\n    }, [_createElementVNode(\"i\", {\n      class: _normalizeClass(suggestion.icon)\n    }, null, 2 /* CLASS */), _createElementVNode(\"span\", null, _toDisplayString(suggestion.text), 1 /* TEXT */)], 8 /* PROPS */, _hoisted_5);\n  }), 128 /* KEYED_FRAGMENT */))])])])) : (_openBlock(), _createElementBlock(_Fragment, {\n    key: 1\n  }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($props.messages, (message, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: _normalizeClass(['message', message.sender === 'user' ? 'user-message' : 'bot-message', {\n        'streaming': message.streaming\n      }])\n    }, [_createCommentVNode(\" Bot messages: keep wrapper for avatar alignment \"), message.sender !== 'user' ? (_openBlock(), _createElementBlock(_Fragment, {\n      key: 0\n    }, [_createElementVNode(\"div\", _hoisted_6, [_createElementVNode(\"img\", {\n      src: $setup.botLogo,\n      alt: \"Kozi AI\",\n      class: \"bot-logo\"\n    }, null, 8 /* PROPS */, _hoisted_7)]), _createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"div\", {\n      class: \"formatted-content\",\n      innerHTML: message.text\n    }, null, 8 /* PROPS */, _hoisted_9), _createCommentVNode(\" Job Cards \"), message.jobs && message.jobs.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_10, [_createElementVNode(\"div\", _hoisted_11, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(message.jobs, job => {\n      return _openBlock(), _createBlock(_component_JobCard, {\n        key: job.id || job.job_id,\n        job: job\n      }, null, 8 /* PROPS */, [\"job\"]);\n    }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Candidate Cards \"), message.candidates && message.candidates.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_12, [_createElementVNode(\"div\", _hoisted_13, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(message.candidates, candidate => {\n      return _openBlock(), _createBlock(_component_CandidateCard, {\n        key: candidate.users_id || candidate.id,\n        candidate: candidate\n      }, null, 8 /* PROPS */, [\"candidate\"]);\n    }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true), message.streaming ? (_openBlock(), _createElementBlock(\"div\", _hoisted_14, [...(_cache[1] || (_cache[1] = [_createElementVNode(\"span\", {\n      class: \"typing-dot\"\n    }, null, -1 /* HOISTED */), _createElementVNode(\"span\", {\n      class: \"typing-dot\"\n    }, null, -1 /* HOISTED */), _createElementVNode(\"span\", {\n      class: \"typing-dot\"\n    }, null, -1 /* HOISTED */)]))])) : _createCommentVNode(\"v-if\", true)])], 64 /* STABLE_FRAGMENT */)) : (_openBlock(), _createElementBlock(_Fragment, {\n      key: 1\n    }, [_createCommentVNode(\" User messages: NO wrapper, direct bubble \"), _createElementVNode(\"div\", _hoisted_15, _toDisplayString(message.text), 1 /* TEXT */)], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */))], 2 /* CLASS */);\n  }), 128 /* KEYED_FRAGMENT */)), $props.loading && $props.messages.length === 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_16, _cache[2] || (_cache[2] = [_createElementVNode(\"i\", {\n    class: \"fas fa-spinner fa-spin\"\n  }, null, -1 /* HOISTED */), _createTextVNode(\" Initializing chat... \")]))) : _createCommentVNode(\"v-if\", true)], 64 /* STABLE_FRAGMENT */))], 512 /* NEED_PATCH */);\n}","map":{"version":3,"names":["class","ref","key","_createElementBlock","_hoisted_1","_createCommentVNode","$setup","showWelcomeScreen","_hoisted_2","_createElementVNode","_hoisted_3","_toDisplayString","welcomeMessage","_hoisted_4","_Fragment","_renderList","suggestionCards","suggestion","index","onClick","$event","handleSuggestionClick","msg","_normalizeClass","icon","text","_hoisted_5","$props","messages","message","sender","streaming","_hoisted_6","src","botLogo","alt","_hoisted_7","_hoisted_8","innerHTML","_hoisted_9","jobs","length","_hoisted_10","_hoisted_11","job","_createBlock","_component_JobCard","id","job_id","candidates","_hoisted_12","_hoisted_13","candidate","_component_CandidateCard","users_id","_hoisted_14","_cache","_hoisted_15","loading","_hoisted_16","_createTextVNode"],"sources":["/Users/gentil/Desktop/Kozi-ai-agent/src/components/ChatArea.vue"],"sourcesContent":["<template>\n  <div class=\"chat-messages\" ref=\"chatContainer\">\n    <!-- Welcome Screen (show ONLY for truly new/empty chats) -->\n    <div v-if=\"showWelcomeScreen\" class=\"welcome-screen\">\n      <div class=\"welcome-content\">\n        <h1>{{ welcomeMessage }}</h1>\n        <p>I'm here to help you with everything related to Kozi platform</p>\n\n        <div class=\"suggestion-cards\">\n          <div\n            v-for=\"(suggestion, index) in suggestionCards\"\n            :key=\"index\"\n            class=\"suggestion-card\"\n            @click=\"handleSuggestionClick(suggestion.msg)\"\n          >\n            <i :class=\"suggestion.icon\"></i>\n            <span>{{ suggestion.text }}</span>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <template v-else>\n      <div\n        v-for=\"(message, index) in messages\"\n        :key=\"index\"\n        :class=\"[\n          'message',\n          message.sender === 'user' ? 'user-message' : 'bot-message',\n          { 'streaming': message.streaming }\n        ]\"\n      >\n        <!-- Bot messages: keep wrapper for avatar alignment -->\n        <template v-if=\"message.sender !== 'user'\">\n          <div class=\"message-avatar\">\n            <img\n              :src=\"botLogo\"\n              alt=\"Kozi AI\"\n              class=\"bot-logo\"\n            />\n          </div>\n          <div class=\"message-content\">\n            <div\n              class=\"formatted-content\"\n              v-html=\"message.text\"\n            ></div>\n\n                 <!-- Job Cards -->\n                 <div v-if=\"message.jobs && message.jobs.length > 0\" class=\"job-cards-container\">\n                   <div class=\"job-cards-grid\">\n                     <JobCard \n                       v-for=\"job in message.jobs\" \n                       :key=\"job.id || job.job_id\" \n                       :job=\"job\"\n                     />\n                   </div>\n                 </div>\n\n                 <!-- Candidate Cards -->\n                 <div v-if=\"message.candidates && message.candidates.length > 0\" class=\"candidate-cards-container\">\n                   <div class=\"candidate-cards-grid\">\n                     <CandidateCard \n                       v-for=\"candidate in message.candidates\" \n                       :key=\"candidate.users_id || candidate.id\" \n                       :candidate=\"candidate\"\n                     />\n                   </div>\n                 </div>\n\n            <div \n              v-if=\"message.streaming\" \n              class=\"typing-indicator\"\n            >\n              <span class=\"typing-dot\"></span>\n              <span class=\"typing-dot\"></span>\n              <span class=\"typing-dot\"></span>\n            </div>\n          </div>\n        </template>\n        \n        <!-- User messages: NO wrapper, direct bubble -->\n        <div v-else class=\"message-text\">\n          {{ message.text }}\n        </div>\n      </div>\n\n      <div v-if=\"loading && messages.length === 0\" class=\"loading-indicator\">\n        <i class=\"fas fa-spinner fa-spin\"></i>\n        Initializing chat...\n      </div>\n    </template>\n  </div>\n</template>\n\n<script>\nimport { computed, ref, watch, nextTick, onMounted, onUnmounted } from 'vue'\nimport JobCard from './JobCard.vue'\nimport CandidateCard from './CandidateCard.vue'\n\nexport default {\n  name: 'ChatArea',\n  components: {\n    JobCard,\n    CandidateCard\n  },\n  props: {\n    messages: {\n      type: Array,\n      default: () => []\n    },\n    loading: {\n      type: Boolean,\n      default: false\n    },\n    isNewChat: {\n      type: Boolean,\n      default: true\n    }\n  },\n  emits: ['suggestion-click'],\n  setup(props, { emit }) {\nconst chatContainer = ref(null)\nconst isDarkMode = ref(false)\nconst updateDarkMode = () => {\n  isDarkMode.value = document.body.classList.contains('dark')\n}\n\nonMounted(() => {\n  updateDarkMode()\n  \n  const observer = new MutationObserver(updateDarkMode)\n  observer.observe(document.body, {\n    attributes: true,\n    attributeFilter: ['class']\n  })\n  \n  window._themeObserver = observer\n})\n\nonUnmounted(() => {\n  if (window._themeObserver) {\n    window._themeObserver.disconnect()\n    delete window._themeObserver\n  }\n})\n\nconst botLogo = computed(() => {\n  return '/logo.png'\n})\n\nwatch(\n  () => props.messages,\n  async () => {\n    await nextTick()\n    if (chatContainer.value) {\n      chatContainer.value.scrollTop = chatContainer.value.scrollHeight\n    }\n  },\n  { deep: true }\n)\n\nconst showWelcomeScreen = computed(() => {\n  console.log('🔍 Welcome screen check:', {\n    isNewChat: props.isNewChat,\n    messageCount: props.messages.length,\n    loading: props.loading\n  })\n  \n  return (props.isNewChat && props.messages.length === 0) || \n         (props.messages.length === 0 && !props.loading)\n})\n\n// Dynamic welcome message based on time of day\nconst welcomeMessage = computed(() => {\n  const hour = new Date().getHours()\n  \n  if (hour >= 5 && hour < 12) {\n    return 'Good Morning, Ready to dive in?'\n  } else if (hour >= 12 && hour < 17) {\n    return 'Good Afternoon, Ready to dive in?'\n  } else {\n    return 'Good Evening, Ready to dive in?'\n  }\n})\n\n// Role-aware suggestion cards\nconst suggestionCards = computed(() => {\n  // Detect user role\n  const currentPath = window.location.pathname\n  \n  // Check for admin first\n  const isAdmin = currentPath.includes('/admin/')\n  \n  if (isAdmin) {\n    // Admin-specific cards\n    return [\n      {\n        icon: 'fas fa-money-bill-wave',\n        text: 'Payment Reminders',\n        msg: 'Show me upcoming salary payments'\n      },\n      {\n        icon: 'fas fa-database',\n        text: 'Database Query',\n        msg: 'Help me query the database for job seekers and employers'\n      },\n      {\n        icon: 'fas fa-envelope',\n        text: 'Gmail Support',\n        msg: 'Show me recent emails and help me draft replies'\n      },\n      {\n        icon: 'fas fa-chart-line',\n        text: 'Platform Analytics',\n        msg: 'Show me platform insights and statistics'\n      }\n    ]\n  }\n  \n  // Check for employer\n  const isEmployer = currentPath.includes('/employer/')\n  \n  if (isEmployer) {\n    // Employer-specific cards\n    return [\n      {\n        icon: 'fas fa-briefcase',\n        text: 'add a Job',\n        msg: 'How do I post a new job listing?'\n      },\n      {\n        icon: 'fas fa-search',\n        text: 'Find Candidates',\n        msg: 'How do I search for qualified candidates?'\n      },\n      {\n        icon: 'fas fa-file-alt',\n        text: 'Hiring Process',\n        msg: 'Help me with the hiring and interview process'\n      },\n      {\n        icon: 'fas fa-building',\n        text: 'Company Profile',\n        msg: 'How do I manage my company profile?'\n      }\n    ]\n  }\n  \n  // Default: Job seeker cards (employee)\n  return [\n    {\n      icon: 'fas fa-user',\n      text: 'Complete Profile',\n      msg: 'How do I complete my profile?'\n    },\n    {\n      icon: 'fas fa-file-alt',\n      text: 'CV Writing Help',\n      msg: 'Help me write a professional CV'\n    },\n    {\n      icon: 'fas fa-briefcase',\n      text: 'Find Jobs',\n      msg: 'Show me available jobs'\n    }\n  ]\n})\n\nconst handleSuggestionClick = (message) => {\n  emit('suggestion-click', message)\n}\n\n    return {\n      chatContainer,\n      isDarkMode,\n      botLogo,\n      showWelcomeScreen,\n      welcomeMessage,\n      suggestionCards,\n      handleSuggestionClick\n    }\n  }\n}\n</script>\n\n<style scoped>\n.chat-messages {\n  /* Make ChatArea fill available space and scroll correctly */\n  flex: 1;\n  min-height: 0;\n  height: 100%;\n  overflow-y: auto;\n  padding: 1.25rem 1.25rem 6.5rem; /* bottom padding to avoid input overlap */\n  background: #ffffff;\n}\n\n/* Welcome screen */\n.welcome-screen {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n}\n.welcome-content {\n  max-width: 840px;\n  text-align: center;\n}\n.welcome-content h1 {\n  font-size: 2rem;\n  font-weight: 800;\n  color: #2a2a2a;\n  margin-bottom: 0.5rem;\n}\n.welcome-content p {\n  color: #6b7280;\n  margin-bottom: 1.5rem;\n}\n.suggestion-cards {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 0.75rem;\n  flex-wrap: wrap;\n}\n.suggestion-card {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  padding: 0.65rem 1rem;\n  border: 1px solid #e5e7eb;\n  border-radius: 24px;\n  cursor: pointer;\n  transition: all .15s ease-in-out;\n  background: #fff;\n  font-size: 0.9rem;\n  white-space: nowrap;\n}\n.suggestion-card:hover { \n  border-color: #EA60A6; \n  box-shadow: 0 4px 14px rgba(234,96,166,.15);\n  transform: translateY(-1px);\n}\n.suggestion-card i { \n  color: #EA60A6;\n  font-size: 0.95rem;\n}\n\n/* Messages */\n.message {\n  display: flex;\n  gap: 0.6rem;\n  margin: 0.9rem 0;\n  align-items: center; /* vertically center avatar with bubble */\n}\n.message.user-message { flex-direction: row-reverse; }\n.message-avatar {\n  width: 44px;\n  height: 44px;\n  border-radius: 50%;\n  background: #f3f4f6;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #6b7280;\n  flex-shrink: 0;\n  box-shadow: 0 4px 12px rgba(0,0,0,.06);\n}\n.bot-logo { width: 28px; height: 28px; }\n\n.message-content { max-width: 760px; }\n.bot-message .message-content { margin-right: auto; }\n.user-message .message-content { margin-left: auto; }\n\n/* Avatar spacing relative to bubble side */\n.bot-message .message-avatar { margin-right: 14px; margin-left: 0; }\n.user-message .message-avatar { margin-left: 14px; margin-right: 0; }\n\n.message-text,\n.formatted-content {\n  padding: 0.65rem 0.9rem;\n  border-radius: 18px;\n  line-height: 1.55;\n  font-size: 0.98rem;\n}\n.user-message .message-text {\n  background: linear-gradient(135deg, #E41E79 0%, #C0126E 100%) !important;\n  color: #ffffff !important;\n  border: 0 !important;\n  border-radius: 26px !important;\n  box-shadow: 0 2px 8px rgba(226, 46, 122, 0.15) !important;\n  padding: 0.4rem 0.6rem !important;\n  margin-left: auto !important;\n  margin-right: 0 !important;\n  max-width: 760px !important;\n}\n.bot-message .formatted-content { \n  background: transparent;\n  border: none;\n  box-shadow: none;\n  padding: 0.3rem 0 0.3rem 0;\n}\n\n/* Align bubbles nearer to center like ref UI */\n.bot-message { justify-content: flex-start; }\n.user-message { justify-content: flex-end; }\n\n/* Typing */\n.typing-indicator { display: flex; gap: 4px; margin-top: 6px; }\n.typing-dot {\n  width: 6px; height: 6px; border-radius: 50%; background: #9ca3af;\n  animation: blink 1.2s infinite ease-in-out;\n}\n.typing-dot:nth-child(2){ animation-delay: .2s }\n.typing-dot:nth-child(3){ animation-delay: .4s }\n@keyframes blink { 0%,80%,100%{opacity:.2} 40%{opacity:1} }\n\n/* Large formatted blocks */\n.formatted-content .section-header { font-weight: 700; margin: .6rem 0 .2rem; }\n.formatted-content .bullet-item { margin: .25rem 0; }\n.formatted-content .numbered-item { margin: .25rem 0; }\n.formatted-content .large-font { font-size: 1rem; }\n\n/* Dark support */\nbody.dark .chat-messages { background: #0f1115; }\nbody.dark .welcome-content h1 { color: #fff; }\nbody.dark .welcome-content p { color: #a1a1aa; }\nbody.dark .suggestion-card { border-color: #2a2a2a; background: #111318; }\nbody.dark .message-text, body.dark .formatted-content { color: #e5e7eb }\nbody.dark .bot-message .formatted-content { \n  background: transparent;\n  border: none;\n  box-shadow: none;\n  padding: 0.3rem 0 0.3rem 0;\n}\nbody.dark .user-message .message-text { background: linear-gradient(135deg, #c73e8a 0%, #a93272 100%); border-color: transparent; }\n\n/* Job Cards */\n.job-cards-container {\n  margin-top: 1rem;\n}\n\n.job-cards-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n  gap: 1rem;\n  margin-top: 0.75rem;\n}\n\n/* Candidate Cards */\n.candidate-cards-container {\n  margin-top: 1rem;\n}\n\n.candidate-cards-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));\n  gap: 1rem;\n  margin-top: 0.75rem;\n}\n\n/* Mobile responsiveness */\n@media (max-width: 768px) {\n  .chat-messages { \n    padding: 0.75rem 0.75rem 6rem;\n    width: 100%;\n    max-width: 100vw;\n    overflow-x: hidden;\n  }\n  \n  /* Welcome screen adjustments for mobile */\n  .welcome-content h1 {\n    font-size: 1.25rem;\n    font-weight: 700;\n  }\n  \n  .welcome-content p {\n    display: none; /* Hide subtitle on mobile */\n  }\n  \n  .suggestion-cards {\n    gap: 0.5rem;\n  }\n  \n  .suggestion-card {\n    padding: 0.55rem 0.85rem;\n    font-size: 0.85rem;\n    border-radius: 20px;\n  }\n  \n  .suggestion-card i {\n    font-size: 0.85rem;\n  }\n  \n  .message-content { max-width: 100%; }\n  .message-avatar { width: 36px; height: 36px; }\n  .bot-message .message-avatar { margin-right: 10px; }\n  .user-message .message-avatar { margin-left: 10px; }\n  .message-text, .formatted-content { padding: 0.6rem 0.8rem; border-radius: 18px; }\n  .user-message .message-text { \n    padding: 0.35rem 0.55rem !important;\n    margin-left: auto !important;\n    margin-right: 0 !important;\n    max-width: 100% !important;\n  }\n  \n  /* Mobile-specific bot message optimization - hide avatar for maximum width */\n  .bot-message .message-avatar { \n    display: none !important;\n  }\n  \n  .bot-message .message-content { \n    flex: 1;\n    width: 100%;\n    margin-left: 0;\n  }\n  \n  .bot-message .formatted-content { \n    padding: 0.55rem 0.8rem !important;\n    width: 100%;\n    max-width: 100%;\n  }\n  \n  .bot-message {\n    display: flex;\n    width: 100%;\n  }\n  \n  /* Mobile job cards */\n  .job-cards-grid {\n    grid-template-columns: 1fr;\n    gap: 0.75rem;\n  }\n}\n\n</style>"],"mappings":";;EACOA,KAAK,EAAC,eAAe;EAACC,GAAG,EAAC;;;EADjCC,GAAA;EAGkCF,KAAK,EAAC;;;EAC7BA,KAAK,EAAC;AAAiB;;EAIrBA,KAAK,EAAC;AAAkB;mBARrC;;EAkCeA,KAAK,EAAC;AAAgB;mBAlCrC;;EAyCeA,KAAK,EAAC;AAAiB;mBAzCtC;;EAAAE,GAAA;EAgDqEF,KAAK,EAAC;;;EACnDA,KAAK,EAAC;AAAgB;;EAjD9CE,GAAA;EA2DiFF,KAAK,EAAC;;;EAC/DA,KAAK,EAAC;AAAsB;;EA5DpDE,GAAA;EAuEcF,KAAK,EAAC;;;EAUAA,KAAK,EAAC;AAAc;;EAjFxCE,GAAA;EAsFmDF,KAAK,EAAC;;;;;uBArFvDG,mBAAA,CA0FM,OA1FNC,UA0FM,GAzFJC,mBAAA,0DAA6D,EAClDC,MAAA,CAAAC,iBAAiB,I,cAA5BJ,mBAAA,CAiBM,OAjBNK,UAiBM,GAhBJC,mBAAA,CAeM,OAfNC,UAeM,GAdJD,mBAAA,CAA6B,YAAAE,gBAAA,CAAtBL,MAAA,CAAAM,cAAc,kB,0BACrBH,mBAAA,CAAoE,WAAjE,+DAA6D,sBAEhEA,mBAAA,CAUM,OAVNI,UAUM,I,kBATJV,mBAAA,CAQMW,SAAA,QAjBhBC,WAAA,CAU0CT,MAAA,CAAAU,eAAe,EAVzD,CAUoBC,UAAU,EAAEC,KAAK;yBAD3Bf,mBAAA,CAQM;MANHD,GAAG,EAAEgB,KAAK;MACXlB,KAAK,EAAC,iBAAiB;MACtBmB,OAAK,EAAAC,MAAA,IAAEd,MAAA,CAAAe,qBAAqB,CAACJ,UAAU,CAACK,GAAG;QAE5Cb,mBAAA,CAAgC;MAA5BT,KAAK,EAfrBuB,eAAA,CAeuBN,UAAU,CAACO,IAAI;6BAC1Bf,mBAAA,CAAkC,cAAAE,gBAAA,CAAzBM,UAAU,CAACQ,IAAI,iB,iBAhBpCC,UAAA;yDAsBIvB,mBAAA,CAoEWW,SAAA;IA1FfZ,GAAA;EAAA,K,kBAuBMC,mBAAA,CA6DMW,SAAA,QApFZC,WAAA,CAwBmCY,MAAA,CAAAC,QAAQ,EAxB3C,CAwBgBC,OAAO,EAAEX,KAAK;yBADxBf,mBAAA,CA6DM;MA3DHD,GAAG,EAAEgB,KAAK;MACVlB,KAAK,EA1BduB,eAAA,E,WA0BiDM,OAAO,CAACC,MAAM,8C;qBAAuED,OAAO,CAACE;MAAS,E;QAM/I1B,mBAAA,qDAAwD,EACxCwB,OAAO,CAACC,MAAM,e,cAA9B3B,mBAAA,CA6CWW,SAAA;MA9EnBZ,GAAA;IAAA,IAkCUO,mBAAA,CAMM,OANNuB,UAMM,GALJvB,mBAAA,CAIE;MAHCwB,GAAG,EAAE3B,MAAA,CAAA4B,OAAO;MACbC,GAAG,EAAC,SAAS;MACbnC,KAAK,EAAC;4BAtCpBoC,UAAA,E,GAyCU3B,mBAAA,CAoCM,OApCN4B,UAoCM,GAnCJ5B,mBAAA,CAGO;MAFLT,KAAK,EAAC,mBAAmB;MACzBsC,SAAqB,EAAbT,OAAO,CAACJ;4BA5C9Bc,UAAA,GA+CiBlC,mBAAA,eAAkB,EACPwB,OAAO,CAACW,IAAI,IAAIX,OAAO,CAACW,IAAI,CAACC,MAAM,Q,cAA9CtC,mBAAA,CAQM,OARNuC,WAQM,GAPJjC,mBAAA,CAMM,OANNkC,WAMM,I,kBALJxC,mBAAA,CAIEW,SAAA,QAtDvBC,WAAA,CAmDqCc,OAAO,CAACW,IAAI,EAAnBI,GAAG;2BADZC,YAAA,CAIEC,kBAAA;QAFC5C,GAAG,EAAE0C,GAAG,CAACG,EAAE,IAAIH,GAAG,CAACI,MAAM;QACzBJ,GAAG,EAAEA;;0CArD7BvC,mBAAA,gBA0DiBA,mBAAA,qBAAwB,EACbwB,OAAO,CAACoB,UAAU,IAAIpB,OAAO,CAACoB,UAAU,CAACR,MAAM,Q,cAA1DtC,mBAAA,CAQM,OARN+C,WAQM,GAPJzC,mBAAA,CAMM,OANN0C,WAMM,I,kBALJhD,mBAAA,CAIEW,SAAA,QAjEvBC,WAAA,CA8D2Cc,OAAO,CAACoB,UAAU,EAA/BG,SAAS;2BADlBP,YAAA,CAIEQ,wBAAA;QAFCnD,GAAG,EAAEkD,SAAS,CAACE,QAAQ,IAAIF,SAAS,CAACL,EAAE;QACvCK,SAAS,EAAEA;;0CAhEnC/C,mBAAA,gBAsEoBwB,OAAO,CAACE,SAAS,I,cADzB5B,mBAAA,CAOM,OAPNoD,WAOM,OAAAC,MAAA,QAAAA,MAAA,OAHJ/C,mBAAA,CAAgC;MAA1BT,KAAK,EAAC;IAAY,4BACxBS,mBAAA,CAAgC;MAA1BT,KAAK,EAAC;IAAY,4BACxBS,mBAAA,CAAgC;MAA1BT,KAAK,EAAC;IAAY,2B,QA3EtCK,mBAAA,e,gDAiFQF,mBAAA,CAEMW,SAAA;MAnFdZ,GAAA;IAAA,IAgFQG,mBAAA,8CAAiD,EACjDI,mBAAA,CAEM,OAFNgD,WAEM,EAAA9C,gBAAA,CADDkB,OAAO,CAACJ,IAAI,iB;kCAIRE,MAAA,CAAA+B,OAAO,IAAI/B,MAAA,CAAAC,QAAQ,CAACa,MAAM,U,cAArCtC,mBAAA,CAGM,OAHNwD,WAGM,EAAAH,MAAA,QAAAA,MAAA,OAFJ/C,mBAAA,CAAsC;IAAnCT,KAAK,EAAC;EAAwB,4BAvFzC4D,gBAAA,CAuF8C,wBAExC,E,MAzFNvD,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}