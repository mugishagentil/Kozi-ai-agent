{"ast":null,"code":"import { ref, computed, watch, onMounted, onUnmounted } from 'vue';\nimport Sidebar from '../components/Sidebar.vue';\nimport ChatArea from '../components/ChatArea.vue';\nimport ChatInput from '../components/ChatInput.vue';\nimport { useKoziChat } from '../composables/useKoziChat';\nexport default {\n  name: 'ChatbotComponent',\n  components: {\n    Sidebar,\n    ChatArea,\n    ChatInput\n  },\n  props: {\n    showCloseButton: {\n      type: Boolean,\n      default: false\n    },\n    embedded: {\n      type: Boolean,\n      default: false\n    },\n    showSidebar: {\n      type: Boolean,\n      default: undefined\n    },\n    prefilledMessage: {\n      type: String,\n      default: ''\n    },\n    userType: {\n      type: String,\n      default: 'employee'\n    }\n  },\n  emits: ['close'],\n  setup(props) {\n    // Local component state for sidebar visibility\n    const sidebarVisible = ref(true);\n\n    // Track if sidebar is minimized (desktop only) - starts minimized by default\n    const sidebarMinimized = ref(true);\n\n    // Track if we're on mobile\n    const isMobile = ref(false);\n\n    // Track if we're in a new chat\n    const isNewChat = ref(true);\n\n    // Computed: Determine if sidebar should be shown\n    // If showSidebar prop is explicitly set, use it; otherwise default based on embedded mode\n    const shouldShowSidebar = computed(() => {\n      if (props.showSidebar !== undefined) {\n        return props.showSidebar;\n      }\n      // Always mount on mobile so the button can show/hide it\n      if (isMobile.value) return true;\n      return !props.embedded;\n    });\n\n    // Check screen size\n    const checkScreenSize = () => {\n      isMobile.value = window.innerWidth <= 768;\n      // Auto-hide sidebar on mobile by default\n      if (isMobile.value) {\n        sidebarVisible.value = false;\n      } else {\n        // Show sidebar by default on desktop\n        sidebarVisible.value = true;\n      }\n    };\n\n    // Use our chat composable\n    const {\n      // State\n      messages,\n      history,\n      loading,\n      currentChatTitle,\n      currentSession,\n      // Actions\n      startNewChat: originalStartNewChat,\n      sendMessage: originalSendMessage,\n      sendSuggestion: originalSendSuggestion,\n      loadChatHistory,\n      deleteHistoryItem,\n      clearAllHistory\n    } = useKoziChat();\n\n    // Enhanced startNewChat that sets isNewChat to true\n    const startNewChat = () => {\n      isNewChat.value = true;\n      originalStartNewChat();\n      // Auto-close sidebar on mobile after starting new chat\n      if (isMobile.value) {\n        sidebarVisible.value = false;\n      }\n    };\n\n    // Enhanced sendMessage that sets isNewChat to false when sending first message\n    const sendMessage = message => {\n      if (isNewChat.value) {\n        isNewChat.value = false;\n      }\n      originalSendMessage(message);\n    };\n\n    // Enhanced sendSuggestion that sets isNewChat to false\n    const sendSuggestion = suggestion => {\n      if (isNewChat.value) {\n        isNewChat.value = false;\n      }\n      originalSendSuggestion(suggestion);\n    };\n\n    // Enhanced loadChatHistory that sets isNewChat to false\n    const enhancedLoadChatHistory = historyItem => {\n      console.log('📂 Loading chat history:', historyItem);\n      isNewChat.value = false; // Set to false BEFORE loading\n      loadChatHistory(historyItem);\n      // Auto-close sidebar on mobile after loading chat\n      if (isMobile.value) {\n        sidebarVisible.value = false;\n      }\n    };\n\n    // Enhanced deleteHistoryItem that extracts sessionId from item\n    const handleDeleteHistory = async item => {\n      try {\n        console.log('🗑️ Delete button clicked, item received:', item);\n        const sessionId = item.sessionId || item.id || item;\n        console.log('🗑️ Extracted sessionId:', sessionId);\n        if (!sessionId) {\n          console.error('❌ No valid sessionId found in item:', item);\n          alert('Cannot delete: Invalid session ID');\n          return;\n        }\n        await deleteHistoryItem(sessionId);\n        console.log('✅ Delete completed successfully');\n      } catch (error) {\n        console.error('❌ Failed to delete chat session:', error);\n        alert(`Failed to delete chat: ${error.message}`);\n      }\n    };\n\n    // Sidebar toggle functionality\n    const toggleSidebar = () => {\n      if (isMobile.value) {\n        sidebarVisible.value = !sidebarVisible.value;\n      } else {\n        sidebarMinimized.value = !sidebarMinimized.value;\n      }\n    };\n\n    // Check initial screen size on component mount\n    onMounted(() => {\n      checkScreenSize();\n\n      // Add resize listener\n      window.addEventListener('resize', checkScreenSize);\n\n      // Auto-send prefilled message if provided\n      if (props.prefilledMessage && props.prefilledMessage.trim()) {\n        // Wait a bit for the chat to initialize, then send the prefilled message\n        setTimeout(() => {\n          console.log('🚀 Auto-sending prefilled message:', props.prefilledMessage);\n          sendMessage(props.prefilledMessage);\n        }, 1000);\n      }\n    });\n\n    // Cleanup resize listener\n    onUnmounted(() => {\n      window.removeEventListener('resize', checkScreenSize);\n    });\n\n    // Watch messages to ensure isNewChat is false when messages exist\n    watch(() => messages.value, newMessages => {\n      if (newMessages && newMessages.length > 0) {\n        isNewChat.value = false;\n      }\n    }, {\n      immediate: true,\n      deep: true\n    });\n    return {\n      // State\n      sidebarVisible,\n      sidebarMinimized,\n      isMobile,\n      isNewChat,\n      shouldShowSidebar,\n      messages,\n      history,\n      loading,\n      currentChatTitle,\n      currentSession,\n      // Actions\n      startNewChat,\n      sendMessage,\n      sendSuggestion,\n      enhancedLoadChatHistory,\n      handleDeleteHistory,\n      clearAllHistory,\n      toggleSidebar\n    };\n  }\n};","map":{"version":3,"names":["ref","computed","watch","onMounted","onUnmounted","Sidebar","ChatArea","ChatInput","useKoziChat","name","components","props","showCloseButton","type","Boolean","default","embedded","showSidebar","undefined","prefilledMessage","String","userType","emits","setup","sidebarVisible","sidebarMinimized","isMobile","isNewChat","shouldShowSidebar","value","checkScreenSize","window","innerWidth","messages","history","loading","currentChatTitle","currentSession","startNewChat","originalStartNewChat","sendMessage","originalSendMessage","sendSuggestion","originalSendSuggestion","loadChatHistory","deleteHistoryItem","clearAllHistory","message","suggestion","enhancedLoadChatHistory","historyItem","console","log","handleDeleteHistory","item","sessionId","id","error","alert","toggleSidebar","addEventListener","trim","setTimeout","removeEventListener","newMessages","length","immediate","deep"],"sources":["/Users/gentil/Desktop/Kozi-ai-agent/src/views/ChatbotComponent.vue"],"sourcesContent":["<template>\n  <div class=\"chatbot-container\" :class=\"{ 'embedded-mode': embedded }\">\n    <!-- Chatbot Header (hidden in embedded mode) -->\n    <div v-if=\"!embedded\" class=\"chatbot-header\" :class=\"{ 'minimized-sidebar': sidebarMinimized && !isMobile, 'full-sidebar': !sidebarMinimized && !isMobile }\">\n      <div class=\"header-left\">\n        <div class=\"agent-info\">\n          <h3>Kozi AI Agent</h3>\n          <div class=\"status-indicator\">\n            <span class=\"status-dot online\"></span>\n            <span>Online</span>\n            <span \n              v-if=\"currentChatTitle && currentChatTitle !== 'New Chat'\" \n              class=\"current-chat-title\"\n            >\n              • {{ currentChatTitle }}\n            </span>\n          </div>\n        </div>\n      </div>\n      \n      <!-- Close button for modal view -->\n      <button class=\"close-btn\" @click=\"$emit('close')\" v-if=\"showCloseButton\">\n        <i class=\"fas fa-times\"></i>\n      </button>\n    </div>\n\n    <!-- Sidebar Overlay for Mobile -->\n    <div \n      v-if=\"isMobile && sidebarVisible\" \n      class=\"sidebar-overlay\" \n      @click=\"toggleSidebar\"\n    ></div>\n\n    <!-- Mobile toggle button -->\n    <button \n      v-if=\"isMobile\" \n      class=\"mobile-sidebar-toggle\" \n      @click=\"toggleSidebar\"\n      :aria-label=\"sidebarVisible ? 'Close history' : 'Open history'\"\n    >\n      <i class=\"fas fa-bars\"></i>\n    </button>\n\n    <!-- Floating history button for small devices (more visible) -->\n    <button\n      v-if=\"isMobile\"\n      class=\"mobile-history-button\"\n      @click=\"toggleSidebar\"\n      :aria-label=\"sidebarVisible ? 'Close history' : 'Open history'\"\n      title=\"Open chat history\"\n    >\n      <i class=\"fas fa-history\" aria-hidden=\"true\"></i>\n    </button>\n\n    <!-- Sidebar (can be controlled via showSidebar prop) -->\n    <Sidebar \n      v-if=\"shouldShowSidebar\"\n      :class=\"{ \n        'open': sidebarVisible && isMobile, \n        'desktop-visible': !isMobile,\n        'sidebar-embedded': embedded\n      }\"\n      :visible=\"sidebarVisible\"\n      :isMobile=\"isMobile\"\n      :history=\"history\"\n      :currentSessionId=\"currentSession\"\n      :isMinimized=\"sidebarMinimized && !isMobile\"\n      @new-chat=\"startNewChat\" \n      @toggle=\"toggleSidebar\"\n      @load-history=\"enhancedLoadChatHistory\"\n      @delete-history=\"handleDeleteHistory\"\n      @clear-history=\"clearAllHistory\"\n    />\n\n    <!-- Main Chat Area -->\n    <div class=\"main-chat\" :class=\"{ 'minimized-sidebar': sidebarMinimized && !isMobile, 'full-sidebar': !sidebarMinimized && !isMobile, 'embedded-chat': embedded }\">\n      <!-- Chat Content Area -->\n      <div class=\"chat-content\">\n        <!-- Chat Messages Area -->\n        <ChatArea \n          :messages=\"messages\" \n          :loading=\"loading\"\n          :isNewChat=\"isNewChat\"\n          @suggestion-click=\"sendSuggestion\" \n        />\n        \n        <!-- Chat Input -->\n        <ChatInput \n          :disabled=\"loading\" \n          @send=\"sendMessage\" \n        />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, computed, watch, onMounted, onUnmounted } from 'vue'\nimport Sidebar from '../components/Sidebar.vue'\nimport ChatArea from '../components/ChatArea.vue'\nimport ChatInput from '../components/ChatInput.vue'\nimport { useKoziChat } from '../composables/useKoziChat'\n\nexport default {\n  name: 'ChatbotComponent',\n  components: {\n    Sidebar,\n    ChatArea,\n    ChatInput\n  },\n  props: {\n    showCloseButton: {\n      type: Boolean,\n      default: false\n    },\n    embedded: {\n      type: Boolean,\n      default: false\n    },\n    showSidebar: {\n      type: Boolean,\n      default: undefined\n    },\n    prefilledMessage: {\n      type: String,\n      default: ''\n    },\n    userType: {\n      type: String,\n      default: 'employee'\n    }\n  },\n  emits: ['close'],\n  setup(props) {\n    // Local component state for sidebar visibility\n    const sidebarVisible = ref(true)\n    \n    // Track if sidebar is minimized (desktop only) - starts minimized by default\n    const sidebarMinimized = ref(true)\n\n    // Track if we're on mobile\n    const isMobile = ref(false)\n\n    // Track if we're in a new chat\n    const isNewChat = ref(true)\n\n    // Computed: Determine if sidebar should be shown\n    // If showSidebar prop is explicitly set, use it; otherwise default based on embedded mode\n    const shouldShowSidebar = computed(() => {\n      if (props.showSidebar !== undefined) {\n        return props.showSidebar\n      }\n      // Always mount on mobile so the button can show/hide it\n      if (isMobile.value) return true\n      return !props.embedded\n    })\n\n    // Check screen size\n    const checkScreenSize = () => {\n      isMobile.value = window.innerWidth <= 768\n      // Auto-hide sidebar on mobile by default\n      if (isMobile.value) {\n        sidebarVisible.value = false\n      } else {\n        // Show sidebar by default on desktop\n        sidebarVisible.value = true\n      }\n    }\n\n    // Use our chat composable\n    const {\n      // State\n      messages,\n      history,\n      loading,\n      currentChatTitle,\n      currentSession,\n      \n      // Actions\n      startNewChat: originalStartNewChat,\n      sendMessage: originalSendMessage,\n      sendSuggestion: originalSendSuggestion,\n      loadChatHistory,\n      deleteHistoryItem,\n      clearAllHistory\n    } = useKoziChat()\n\n    // Enhanced startNewChat that sets isNewChat to true\n    const startNewChat = () => {\n      isNewChat.value = true\n      originalStartNewChat()\n      // Auto-close sidebar on mobile after starting new chat\n      if (isMobile.value) {\n        sidebarVisible.value = false\n      }\n    }\n\n    // Enhanced sendMessage that sets isNewChat to false when sending first message\n    const sendMessage = (message) => {\n      if (isNewChat.value) {\n        isNewChat.value = false\n      }\n      originalSendMessage(message)\n    }\n\n    // Enhanced sendSuggestion that sets isNewChat to false\n    const sendSuggestion = (suggestion) => {\n      if (isNewChat.value) {\n        isNewChat.value = false\n      }\n      originalSendSuggestion(suggestion)\n    }\n\n    // Enhanced loadChatHistory that sets isNewChat to false\n    const enhancedLoadChatHistory = (historyItem) => {\n      console.log('📂 Loading chat history:', historyItem)\n      isNewChat.value = false // Set to false BEFORE loading\n      loadChatHistory(historyItem)\n      // Auto-close sidebar on mobile after loading chat\n      if (isMobile.value) {\n        sidebarVisible.value = false\n      }\n    }\n\n    // Enhanced deleteHistoryItem that extracts sessionId from item\n    const handleDeleteHistory = async (item) => {\n      try {\n        console.log('🗑️ Delete button clicked, item received:', item)\n        const sessionId = item.sessionId || item.id || item\n        console.log('🗑️ Extracted sessionId:', sessionId)\n        \n        if (!sessionId) {\n          console.error('❌ No valid sessionId found in item:', item)\n          alert('Cannot delete: Invalid session ID')\n          return\n        }\n        \n        await deleteHistoryItem(sessionId)\n        console.log('✅ Delete completed successfully')\n      } catch (error) {\n        console.error('❌ Failed to delete chat session:', error)\n        alert(`Failed to delete chat: ${error.message}`)\n      }\n    }\n\n    // Sidebar toggle functionality\n    const toggleSidebar = () => {\n      if (isMobile.value) {\n        sidebarVisible.value = !sidebarVisible.value\n      } else {\n        sidebarMinimized.value = !sidebarMinimized.value\n      }\n    }\n\n    // Check initial screen size on component mount\n    onMounted(() => {\n      checkScreenSize()\n      \n      // Add resize listener\n      window.addEventListener('resize', checkScreenSize)\n      \n      // Auto-send prefilled message if provided\n      if (props.prefilledMessage && props.prefilledMessage.trim()) {\n        // Wait a bit for the chat to initialize, then send the prefilled message\n        setTimeout(() => {\n          console.log('🚀 Auto-sending prefilled message:', props.prefilledMessage)\n          sendMessage(props.prefilledMessage)\n        }, 1000)\n      }\n    })\n\n    // Cleanup resize listener\n    onUnmounted(() => {\n      window.removeEventListener('resize', checkScreenSize)\n    })\n\n    // Watch messages to ensure isNewChat is false when messages exist\n    watch(\n      () => messages.value,\n      (newMessages) => {\n        if (newMessages && newMessages.length > 0) {\n          isNewChat.value = false\n        }\n      },\n      { immediate: true, deep: true }\n    )\n\n    return {\n      // State\n      sidebarVisible,\n      sidebarMinimized,\n      isMobile,\n      isNewChat,\n      shouldShowSidebar,\n      messages,\n      history,\n      loading,\n      currentChatTitle,\n      currentSession,\n      \n      // Actions\n      startNewChat,\n      sendMessage,\n      sendSuggestion,\n      enhancedLoadChatHistory,\n      handleDeleteHistory,\n      clearAllHistory,\n      toggleSidebar\n    }\n  }\n}\n</script>\n\n<style scoped>\n.chatbot-container {\n  display: flex;\n  /* Use dynamic viewport height to avoid mobile browser UI issues */\n  height: 100dvh;\n  width: 100dvw;\n  background: #f9fafb;\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  overflow: hidden;\n  z-index: 9999;\n}\n\n/* Embedded mode - fits within dashboard */\n.chatbot-container.embedded-mode {\n  position: relative;\n  height: 100%;\n  width: 100%;\n  z-index: 1;\n  display: flex;\n  flex-direction: row; /* Changed from column to row to show sidebar + chat side by side */\n  background: #f9fafb;\n  overflow: hidden;\n  transform: none !important;\n  transition: none !important;\n}\n\n.chatbot-header {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  padding: 1rem 2rem;\n  border-bottom: 1px solid #e5e7eb;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  background: rgba(255, 255, 255, 0.95);\n  backdrop-filter: blur(10px);\n  z-index: 1000;\n  transition: left 0.3s ease;\n}\n\n:root {\n  --chat-header-height: 80px;\n}\n\n/* Header with full sidebar (desktop) */\n.chatbot-header.full-sidebar {\n  left: 280px;\n}\n\n/* Header with minimized sidebar (desktop) */\n.chatbot-header.minimized-sidebar {\n  left: 60px;\n}\n\n/* Embedded header */\n.chatbot-header.embedded-header {\n  position: relative;\n  left: 0;\n  top: 0;\n  width: 100%;\n  flex-shrink: 0;\n}\n\n.header-left {\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n}\n\n.sidebar-toggle-btn {\n  background: #f3f4f6;\n  border: none;\n  padding: 0.75rem;\n  border-radius: 0.5rem;\n  cursor: pointer;\n  color: #6b7280;\n  transition: all 0.15s;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 40px;\n  height: 40px;\n}\n\n.sidebar-toggle-btn:hover {\n  background: #ec4899;\n  color: white;\n  transform: scale(1.05);\n}\n\n.agent-info h3 {\n  font-size: 1.25rem;\n  font-weight: 700;\n  margin-bottom: 0.25rem;\n  color: #111827;\n  letter-spacing: -0.025em;\n}\n\n.status-indicator {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  font-size: 0.875rem;\n  color: #6b7280;\n  font-weight: 500;\n}\n\n.status-dot {\n  width: 8px;\n  height: 8px;\n  border-radius: 50%;\n  position: relative;\n}\n\n.status-dot.online {\n  background: #10b981;\n  box-shadow: 0 0 0 2px rgba(16, 185, 129, 0.2);\n}\n\n.status-dot.online::before {\n  content: '';\n  position: absolute;\n  top: -2px;\n  left: -2px;\n  right: -2px;\n  bottom: -2px;\n  border-radius: 50%;\n  background: #10b981;\n  animation: pulse 2s infinite;\n  opacity: 0.6;\n}\n\n@keyframes pulse {\n  0%, 100% { transform: scale(1); opacity: 0.6; }\n  50% { transform: scale(1.2); opacity: 0.3; }\n}\n\n.current-chat-title {\n  color: #6b7280;\n  font-size: 0.875rem;\n  font-weight: 500;\n  max-width: 200px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.close-btn {\n  background: #f3f4f6;\n  border: none;\n  padding: 0.75rem;\n  border-radius: 0.5rem;\n  cursor: pointer;\n  color: #6b7280;\n  transition: all 0.15s;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 40px;\n  height: 40px;\n}\n\n.close-btn:hover {\n  background: #ef4444;\n  color: white;\n  transform: scale(1.05);\n}\n\n.sidebar-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(0, 0, 0, 0.5);\n  z-index: 9999;\n  animation: fadeIn 0.2s ease-in-out;\n}\n\n@keyframes fadeIn {\n  from { opacity: 0; }\n  to { opacity: 1; }\n}\n\n.main-chat {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  background: white;\n  position: fixed;\n  top: var(--chat-header-height);\n  left: 0;\n  right: 0;\n  bottom: 0;\n  overflow: hidden;\n  transition: left 0.3s ease;\n}\n\n/* Main chat with full sidebar (desktop) */\n.main-chat.full-sidebar {\n  left: 280px;\n}\n\n/* Main chat with minimized sidebar (desktop) */\n.main-chat.minimized-sidebar {\n  left: 60px;\n}\n\n/* Embedded chat */\n.main-chat.embedded-chat {\n  position: relative;\n  top: 0;\n  left: 0 !important; /* Override any left offset */\n  right: 0;\n  bottom: 0;\n  flex: 1;\n  display: flex;\n  flex-direction: row;\n  overflow: hidden;\n  height: 100%;\n}\n\n/* Sidebar in embedded mode - use relative positioning */\n:deep(.sidebar-embedded) {\n  position: relative !important;\n  height: 100% !important;\n  max-height: 100% !important;\n  top: auto !important;\n  left: auto !important;\n  z-index: 1 !important;\n  flex-shrink: 0; /* Prevent sidebar from shrinking */\n}\n\n/* Agent sidebar removed for cleaner design */\n\n/* Chat content area (right side in embedded mode) */\n.chat-content {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  min-height: 0; /* allow ChatArea to size and scroll */\n  overflow: hidden;\n  background: white;\n}\n\n/* Removed embedded topbar - cleaner design */\n\n/* Provide a slightly narrower max width like the reference */\n.chat-content > :deep(.message-content) { max-width: 720px; }\n\n/* Mobile responsive */\n@media (max-width: 768px) {\n    :root { --chat-header-height: 70px; }\n  .mobile-sidebar-toggle {\n    position: fixed;\n    top: 16px;\n    left: 16px;\n    z-index: 10050;\n    width: 40px;\n    height: 40px;\n    border-radius: 10px;\n    border: 1px solid #eee;\n    background: #fff;\n    color: #374151;\n    box-shadow: 0 4px 12px rgba(0,0,0,.08);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n  \n  .chatbot-header {\n    padding: 1rem;\n    left: 0;\n  }\n\n  /* Ensure chat input and floating controls respect safe-area insets on modern iOS browsers */\n  :deep(.chat-input-container) {\n    padding-bottom: calc(env(safe-area-inset-bottom, 0px) + 16px) !important;\n  }\n\n  .mobile-history-button {\n    bottom: calc(90px + env(safe-area-inset-bottom, 0px));\n  }\n\n  /* Floating history button placed above the chat input on mobile */\n  .mobile-history-button {\n    position: fixed;\n    right: 16px;\n    bottom: 90px; /* placed above typical chat input area */\n    z-index: 10060;\n    width: 48px;\n    height: 48px;\n    border-radius: 50%;\n    border: none;\n    background: linear-gradient(135deg, #E960A6 0%, #F472B6 100%);\n    color: white;\n    box-shadow: 0 8px 20px rgba(233,96,166,0.18);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    cursor: pointer;\n    transition: transform 0.12s ease, box-shadow 0.12s ease;\n  }\n\n  .mobile-history-button:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 12px 28px rgba(233,96,166,0.22);\n  }\n\n  .mobile-history-button i { font-size: 18px; }\n  \n  .agent-info h3 {\n    font-size: 1.125rem;\n  }\n  \n  .main-chat { top: 70px; left: 0; right: 0; bottom: 0; height: calc(100dvh - 70px); }\n  \n  /* Embedded mode mobile - ensure full width and no sidebar issues */\n  .chatbot-container.embedded-mode {\n    flex-direction: column !important;\n    width: 100% !important;\n    max-width: 100vw !important;\n    overflow-x: hidden !important;\n  }\n  \n  /* Show chat sidebar on mobile in embedded mode (slides via Sidebar styles) */\n  .chatbot-container.embedded-mode :deep(.sidebar-embedded) {\n    display: block !important;\n    position: fixed !important;\n    top: 70px !important;\n    left: 0 !important;\n    height: calc(100dvh - 70px) !important;\n    width: 100% !important;\n    z-index: 10061 !important;\n  }\n  \n  /* Ensure main chat takes full width on mobile */\n  .main-chat.embedded-chat {\n    width: 100% !important;\n    max-width: 100vw !important;\n  }\n}\n</style>\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}