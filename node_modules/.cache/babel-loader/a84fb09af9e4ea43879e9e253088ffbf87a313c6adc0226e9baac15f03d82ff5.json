{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\nimport IndexComponent from \"./IndexComponent.vue\";\nimport { globalVariable } from \"@/global\";\nexport default {\n  name: \"MainWrapper\",\n  components: {\n    IndexComponent\n  },\n  data() {\n    return {\n      uploadsUrl: globalVariable + \"/uploads/logo/\",\n      defaultImage: require(\"@/assets/img/logo.png\"),\n      form: {\n        job_id: null,\n        job_title: \"\",\n        company: \"\",\n        deadline_date: \"\",\n        job_description: \"\",\n        requirements: \"\",\n        responsability: \"\",\n        salary_min: \"\",\n        salary_max: \"\",\n        conclusion: \"\",\n        logo: \"\",\n        location: \"\",\n        category_id: \"\"\n      },\n      jobs: [],\n      categories: [],\n      categoryNames: {},\n      // Remove this unused variable: selectedCategoryId: null,\n      isSubmitting: false,\n      status: {\n        success: false,\n        message: \"\"\n      },\n      userEmail: \"\",\n      userId: \"\",\n      jobStatus: null,\n      minDeadlineDate: \"\"\n    };\n  },\n  mounted() {\n    const token = localStorage.getItem(\"employerToken\");\n    if (token) {\n      try {\n        const payload = JSON.parse(atob(token.split(\".\")[1]));\n        this.userEmail = payload.email;\n      } catch (e) {\n        console.error(\"Invalid token format\", e);\n      }\n    }\n    this.setMinDeadlineDate();\n    this.fetchCategories();\n    if (this.userEmail) {\n      this.getUserIdFromEmail();\n    }\n  },\n  methods: {\n    onLogoError(event) {\n      event.target.src = this.defaultImage;\n    },\n    onCategoryChange() {\n      console.log(\"Category changed to:\", this.form.category_id);\n      console.log(\"Category type:\", typeof this.form.category_id);\n    },\n    handleFileUpload(event) {\n      this.form.logo = event.target.files[0];\n    },\n    setMinDeadlineDate() {\n      const tomorrow = new Date();\n      tomorrow.setDate(tomorrow.getDate() + 1);\n      this.minDeadlineDate = tomorrow.toISOString().split(\"T\")[0];\n    },\n    async submitForm() {\n      this.isSubmitting = true;\n      this.status.message = \"\";\n      try {\n        // Debug: Check form values before submission\n        console.log(\"Form data before submit:\", this.form);\n        console.log(\"Category ID value:\", this.form.category_id);\n        console.log(\"Category ID type:\", typeof this.form.category_id);\n\n        // Validate required fields\n        if (!this.form.category_id || this.form.category_id === \"\") {\n          this.status = {\n            success: false,\n            message: \"Please select a category.\"\n          };\n          this.isSubmitting = false;\n          return;\n        }\n        const formData = new FormData();\n        formData.append(\"job_title\", this.form.job_title);\n        formData.append(\"company\", this.form.company);\n        formData.append(\"location\", this.form.location);\n        formData.append(\"job_description\", this.form.job_description);\n        formData.append(\"requirements\", this.form.requirements);\n        formData.append(\"responsability\", this.form.responsability);\n        formData.append(\"salary_min\", this.form.salary_max);\n        formData.append(\"salary_max\", this.form.salary_max);\n        formData.append(\"conclusion\", this.form.conclusion);\n        formData.append(\"deadline_date\", this.form.deadline_date);\n        formData.append(\"users_id\", this.userId);\n\n        // Ensure category_id is a string/number, not undefined\n        const categoryId = this.form.category_id;\n        if (categoryId !== undefined && categoryId !== null && categoryId !== \"\") {\n          formData.append(\"category_id\", categoryId);\n          console.log(\"Category ID being sent:\", categoryId);\n        } else {\n          console.error(\"Category ID is undefined or empty:\", categoryId);\n          this.status = {\n            success: false,\n            message: \"Category ID is missing.\"\n          };\n          this.isSubmitting = false;\n          return;\n        }\n        if (this.form.logo && typeof this.form.logo !== \"string\") {\n          formData.append(\"logo\", this.form.logo);\n        }\n\n        // Debug: Log all FormData entries\n        console.log(\"FormData entries:\");\n        for (let [key, value] of formData.entries()) {\n          console.log(key + \": \" + value);\n        }\n        const token = localStorage.getItem(\"employerToken\");\n        const url = this.form.job_id ? `${globalVariable}/admin/update_job/${this.form.job_id}` : `${globalVariable}/admin/add_jobs`;\n        const method = this.form.job_id ? \"PUT\" : \"POST\";\n        const response = await fetch(url, {\n          method,\n          headers: {\n            Authorization: `Bearer ${token}`\n          },\n          body: formData\n        });\n        if (response.ok) {\n          const result = await response.json();\n          this.status = {\n            success: true,\n            message: result.message || (this.form.job_id ? \"Job updated!\" : \"Job added!\")\n          };\n          this.form = {\n            job_id: null,\n            job_title: \"\",\n            company: \"\",\n            deadline_date: this.minDeadlineDate,\n            job_description: \"\",\n            requirements: \"\",\n            responsability: \"\",\n            salary_min: \"\",\n            salary_max: \"\",\n            conclusion: \"\",\n            logo: \"\",\n            location: \"\",\n            category_id: \"\" // Reset category_id\n          };\n          this.fetchJobsByUser();\n        } else {\n          const error = await response.text();\n          this.status = {\n            success: false,\n            message: \"Failed: \" + error\n          };\n        }\n      } catch (err) {\n        console.error(\"Error:\", err);\n        this.status = {\n          success: false,\n          message: \"Unexpected error occurred.\"\n        };\n      } finally {\n        this.isSubmitting = false;\n      }\n    },\n    async fetchCategoryNameByUserId() {\n      try {\n        const res = await fetch(`${globalVariable}/category/${this.userId}`);\n        const data = await res.json();\n        if (res.ok && data.name) {\n          return data.name;\n        } else {\n          return \"Unknown\";\n        }\n      } catch (error) {\n        console.error(\"Failed to fetch category name:\", error);\n        return \"Error fetching category\";\n      }\n    },\n    getCategoryName(categoryId) {\n      return this.categoryNames[categoryId] || \"Unknown\";\n    },\n    async fetchJobsByUser() {\n      try {\n        const token = localStorage.getItem(\"employerToken\");\n        if (!this.userId) return;\n        const res = await fetch(`${globalVariable}/provider/jobs/${this.userId}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        if (!res.ok) throw new Error(\"Failed to fetch jobs\");\n        const data = await res.json();\n        this.jobs = data;\n      } catch (err) {\n        console.error(\"Error fetching jobs for user:\", err);\n      }\n    },\n    async fetchUserStatus() {\n      const token = localStorage.getItem(\"employerToken\");\n      if (!this.userId || !token) return;\n      try {\n        const res = await fetch(`${globalVariable}/provider/status/${this.userId}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        const data = await res.json();\n        if (res.ok) {\n          this.jobStatus = data.status;\n        } else {\n          console.error(\"Error fetching job status:\", data.message);\n        }\n      } catch (error) {\n        console.error(\"Network error while fetching job status:\", error);\n      }\n    },\n    async fetchCategories() {\n      try {\n        const token = localStorage.getItem(\"employerToken\");\n        const response = await fetch(`${globalVariable}/name_and_id`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        const data = await response.json();\n        if (response.ok) {\n          this.categories = data;\n\n          // Debug: Log the categories to see the structure\n          console.log(\"Categories fetched:\", data);\n          console.log(\"First category structure:\", data[0]);\n          data.forEach(category => {\n            this.categoryNames[category.id] = category.name;\n          });\n        } else {\n          console.error(\"Failed to load categories:\", data.message);\n        }\n      } catch (error) {\n        console.error(\"Error fetching categories:\", error);\n      }\n    },\n    editJob(job) {\n      const deadlineDate = job.deadline_date ? new Date(job.deadline_date).toISOString().split(\"T\")[0] : \"\";\n      this.form = {\n        job_id: job.job_id,\n        job_title: job.job_title,\n        company: job.company,\n        deadline_date: deadlineDate,\n        job_description: job.job_description,\n        requirements: job.requirements,\n        responsability: job.responsability,\n        salary_min: job.salary_min,\n        salary_max: job.salary_max,\n        conclusion: job.conclusion,\n        logo: job.logo,\n        location: job.location,\n        category_id: job.category_id\n      };\n      window.scrollTo({\n        top: 0,\n        behavior: \"smooth\"\n      });\n    },\n    async getUserIdFromEmail() {\n      const token = localStorage.getItem(\"employerToken\");\n      if (!token || !this.userEmail) return;\n      try {\n        const res = await fetch(`${globalVariable}/get_user_id_by_email/${this.userEmail}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        const data = await res.json();\n        if (res.ok) {\n          this.userId = data.users_id;\n          this.fetchJobsByUser();\n          this.fetchUserStatus();\n        } else {\n          this.status = {\n            success: false,\n            message: data.message || \"Unable to get user ID.\"\n          };\n        }\n      } catch (err) {\n        console.error(\"Error getting users_id:\", err);\n        this.status = {\n          success: false,\n          message: \"Failed to fetch user ID.\"\n        };\n      }\n    },\n    getStatusLabel(status) {\n      if (status === 0) {\n        return {\n          text: \"Pending\",\n          colorClass: \"text-danger\"\n        };\n      } else if (status === 1) {\n        return {\n          text: \"Approved\",\n          colorClass: \"text-success\"\n        };\n      } else {\n        return {\n          text: \"Unknown\",\n          colorClass: \"text-muted\"\n        };\n      }\n    }\n  }\n};","map":{"version":3,"names":["IndexComponent","globalVariable","name","components","data","uploadsUrl","defaultImage","require","form","job_id","job_title","company","deadline_date","job_description","requirements","responsability","salary_min","salary_max","conclusion","logo","location","category_id","jobs","categories","categoryNames","isSubmitting","status","success","message","userEmail","userId","jobStatus","minDeadlineDate","mounted","token","localStorage","getItem","payload","JSON","parse","atob","split","email","e","console","error","setMinDeadlineDate","fetchCategories","getUserIdFromEmail","methods","onLogoError","event","target","src","onCategoryChange","log","handleFileUpload","files","tomorrow","Date","setDate","getDate","toISOString","submitForm","formData","FormData","append","categoryId","undefined","key","value","entries","url","method","response","fetch","headers","Authorization","body","ok","result","json","fetchJobsByUser","text","err","fetchCategoryNameByUserId","res","getCategoryName","Error","fetchUserStatus","forEach","category","id","editJob","job","deadlineDate","window","scrollTo","top","behavior","users_id","getStatusLabel","colorClass"],"sources":["/Users/gentil/Desktop/Kozi-ai-agent/src/views/jobprovider/AddJobs.vue"],"sourcesContent":["<template>\n  <IndexComponent />\n  <div\n    class=\"page-wrapper\"\n    id=\"main-wrapper\"\n    data-layout=\"vertical\"\n    data-navbarbg=\"skin6\"\n    data-sidebartype=\"full\"\n    data-sidebar-description=\"fixed\"\n    data-header-description=\"fixed\"\n    style=\"position: absolute; top: 0; left: 0; right: 0; bottom: 0; z-index: 1;\"\n  >\n    <div class=\"body-wrapper\" style=\"margin-top: 70px; margin-left: 270px; background: white; min-height: calc(100vh - 70px); padding: 20px; overflow-y: auto; max-height: calc(100vh - 70px);\">\n      <!-- <div v-if=\"userEmail\" class=\"card-body\">\n        <h5 class=\"text-center\">Logged in as:</h5>\n        <h6 class=\"text-center text-muted\">{{ userEmail }}</h6>\n        <p><strong>users_id:</strong> {{ userId }}</p>\n        <h6 class=\"text-center text-muted\">\n          Status:\n          <span :class=\"[getStatusLabel(jobStatus).colorClass, 'fw-bold']\">\n            {{ getStatusLabel(jobStatus).text }}\n          </span>\n        </h6>\n      </div> -->\n\n      <div v-if=\"jobStatus === 0\" class=\"alert alert-warning text-center mx-4\">\n        Your account is pending approval. You cannot add or edit jobs until approved.\n      </div>\n\n      <h5 class=\"card-title fw-semibold mb-4\" style=\"color: #E960A6;\">\n        <i class=\"ti ti-settings\"></i> Add Jobs\n      </h5>\n\n      <form class=\"mx-4\" @submit.prevent=\"submitForm\">\n        <div\n          v-if=\"status.message\"\n          :class=\"['alert mt-3', status.success ? 'alert-success' : 'alert-danger']\"\n        >\n          {{ status.message }}\n        </div>\n\n        <div class=\"form-group row\">\n          <div class=\"col-md-6\">\n            <label class=\"form-label\">Job Title</label>\n            <input type=\"text\" v-model=\"form.job_title\" class=\"form-control\" :disabled=\"jobStatus === 0\" required />\n          </div>\n          <div class=\"col-md-6\">\n            <label class=\"form-label\">Company Name / Your name</label>\n            <input type=\"text\" v-model=\"form.company\" class=\"form-control\" :disabled=\"jobStatus === 0\" required />\n          </div>\n        </div>\n\n        <div class=\"form-group row\">\n          <div class=\"col-md-6\">\n          <label class=\"form-label\">Working Mode</label>\n          <select v-model=\"form.location\" class=\"form-control\" :disabled=\"jobStatus === 0\" required>\n          <option value=\"\" disabled>Choose mode</option>\n          <option value=\"Remote\">Remote</option>\n          <option value=\"Full Time\">Full Time</option>\n          </select>\n          </div>\n          <div class=\"col-md-6\">\n            <label class=\"form-label\">Deadline Date</label>\n            <input type=\"date\" v-model=\"form.deadline_date\" class=\"form-control\" :disabled=\"jobStatus === 0\" :min=\"minDeadlineDate\" required />\n          </div>\n        </div>\n\n        <div class=\"form-group row\">\n          \n          <div class=\"col-md-6\">\n  <label class=\"form-label\">Category</label>\n  <select \n    v-model=\"form.category_id\" \n    class=\"form-control\" \n    style=\"height: 48px; padding-top: 8px; padding-bottom: 8px;\" \n    :disabled=\"jobStatus === 0\" \n    required\n    @change=\"onCategoryChange\"\n  >\n    <option disabled value=\"\">Select Category</option>\n    <option \n      v-for=\"cat in categories\" \n      :key=\"cat.id\" \n      :value=\"cat.id\"\n    >\n      {{ cat.name }}\n    </option>\n  </select>\n  <!-- Debug display -->\n  <!-- <small class=\"text-muted\">Selected ID: {{ form.category_id }}</small> -->\n</div>\n\n          <div class=\"col-md-6\">\n            <label class=\"form-label\">logo If applicable</label>\n            <div v-if=\"form.logo && typeof form.logo === 'string'\" class=\"mb-2\">\n              <img :src=\"uploadsUrl + form.logo\" alt=\"Current Logo\" class=\"custom-job-logo\" width=\"150\" />\n            </div>\n            <input type=\"file\" @change=\"handleFileUpload\" class=\"form-control\"  :disabled=\"jobStatus === 0\" />\n            <small class=\"form-text text-muted\">Maximum file size: 1MB</small>\n          </div>\n        </div>\n\n        <div class=\"form-group row\">\n          <div class=\"col-md-12\">\n            <label class=\"form-label\">Job Description</label>\n            <textarea\n              v-model=\"form.job_description\"\n              class=\"form-control\"\n              style=\"height: 100px;\"\n              :disabled=\"jobStatus === 0\"\n              required\n            ></textarea>\n          </div>\n        </div>\n        <div class=\"form-group row\">\n          <div class=\"col-md-12\">\n            <label class=\"form-label\">Requirements</label>\n            <textarea\n              v-model=\"form.requirements\"\n              class=\"form-control\"\n              style=\"height: 100px;\"\n              :disabled=\"jobStatus === 0\"\n              required\n            ></textarea>\n          </div>\n        </div>\n        <div class=\"form-group row\">\n          <div class=\"col-md-12\">\n            <label class=\"form-label\">Responsability</label>\n            <textarea\n              v-model=\"form.responsability\"\n              class=\"form-control\"\n              style=\"height: 100px;\"\n              :disabled=\"jobStatus === 0\"\n              required\n            ></textarea>\n          </div>\n        </div>\n\n        <div class=\"form-group row\">\n          <div class=\"col-md-6\">\n            <label class=\"form-label\">Salary Min</label>\n            <input type=\"number\" v-model=\"form.salary_min\" class=\"form-control\" :disabled=\"jobStatus === 0\" required />\n          </div>\n          <div class=\"col-md-6\">\n            <label class=\"form-label\">salary Max</label>\n            <input type=\"number\" v-model=\"form.salary_max\" class=\"form-control\" :disabled=\"jobStatus === 0\" required />\n          </div>\n        </div>\n        <div class=\"form-group row\">\n          <div class=\"col-md-12\">\n            <label class=\"form-label\">conclusion </label>\n            <textarea\n              v-model=\"form.conclusion\"\n              class=\"form-control\"\n              style=\"height: 100px;\"\n              :disabled=\"jobStatus === 0\"\n              required\n            ></textarea>\n          </div>\n        </div>\n\n\n        <button type=\"submit\" class=\"btn btn-primary mt-3\" :disabled=\"isSubmitting || jobStatus === 0\">\n          <span\n            v-if=\"isSubmitting\"\n            class=\"spinner-border spinner-border-sm me-2\"\n            role=\"status\"\n            aria-hidden=\"true\"\n          ></span>\n          {{ isSubmitting ? \"Submitting...\" : form.job_id ? \"Update Job\" : \"Submit Job\" }}\n        </button>\n      </form>\n\n      <hr class=\"my-4\" />\n      <h5 class=\"fw-semibold mb-3\">Your Jobs</h5>\n\n      <div v-if=\"jobs.length === 0\" class=\"text-muted\">No jobs available yet.</div>\n\n      <div class=\"table-responsive\">\n        <table class=\"table table-bordered\">\n          <thead class=\"table-light\">\n            <tr>\n              <th>Id</th>\n              <th>Title</th>\n              <th>Company</th>\n              <th>Description</th>\n              <th>Requirements</th>\n              <th>Responsability</th>\n              <th>salary-min</th>\n              <th>salary-max</th>\n              <th>Working mode</th>\n              <th>Category</th>\n              <th>Deadline</th>\n              <th>Conclusion</th>\n              <th>Logo</th>\n              <th>Status</th>\n              \n              <th>Action</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr v-for=\"(job, index) in jobs\" :key=\"job.job_id\">\n              <td>{{ index + 1 }}</td>\n              <td>{{ job.job_title }}</td>\n              <td>{{ job.job_description }}</td>\n              <td>{{ job.requirements }}</td>\n              <td>{{ job.responsability }}</td>\n              <td>{{ job.company }}</td>\n              \n              <td>{{ job.salary_max }}</td>\n              <td>{{ job.salary_min }}</td>\n              <td>{{ job.location }}</td>\n              <td>{{ getCategoryName(job.category_id) }}</td>\n              \n               <td>{{ job.deadline_date ? job.deadline_date.substring(0, 10) : \"\" }}</td>\n               <td>{{ job.conclusion }}</td>\n              <td>\n                <img\n    :src=\"uploadsUrl + job.logo\"\n    @error=\"onLogoError($event)\"\n    alt=\"Logo\"\n    class=\"custom-job-logo\"\n    width=\"100\"\n    height=\"50\"\n  />\n\n              </td>\n\n              <td>\n                <span :class=\"[getStatusLabel(job.status).colorClass, 'fw-bold']\">\n                  {{ getStatusLabel(job.status).text }}\n                </span>\n              </td>\n              \n              <td>\n                <button class=\"btn btn-primary mt-3\" @click=\"editJob(job)\" :disabled=\"jobStatus === 0\">Edit</button>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport IndexComponent from \"./IndexComponent.vue\";\nimport { globalVariable } from \"@/global\";\n\nexport default {\n  name: \"MainWrapper\",\n  components: { IndexComponent },\n  data() {\n  return {\n    uploadsUrl: globalVariable + \"/uploads/logo/\",\n    defaultImage: require(\"@/assets/img/logo.png\"),\n    form: {\n      job_id: null,\n      job_title: \"\",\n      company: \"\",\n      deadline_date: \"\",\n      job_description: \"\",\n      requirements: \"\",\n      responsability: \"\",\n      salary_min: \"\",\n      salary_max: \"\",\n      conclusion: \"\",\n      logo: \"\",\n      location: \"\",\n      category_id: \"\",\n    },\n    jobs: [],\n    categories: [],\n    categoryNames: {},\n    // Remove this unused variable: selectedCategoryId: null,\n    isSubmitting: false,\n    status: {\n      success: false,\n      message: \"\",\n    },\n    userEmail: \"\",\n    userId: \"\",\n    jobStatus: null,\n    minDeadlineDate: \"\",\n  };\n},\n\n  mounted() {\n    const token = localStorage.getItem(\"employerToken\");\n    if (token) {\n      try {\n        const payload = JSON.parse(atob(token.split(\".\")[1]));\n        this.userEmail = payload.email;\n      } catch (e) {\n        console.error(\"Invalid token format\", e);\n      }\n    }\n    this.setMinDeadlineDate();\n    this.fetchCategories();\n    if (this.userEmail) {\n      this.getUserIdFromEmail();\n    }\n  },\n  methods: {\n\n    onLogoError(event) {\n    event.target.src = this.defaultImage;\n  },\n\n    onCategoryChange() {\n  console.log(\"Category changed to:\", this.form.category_id);\n  console.log(\"Category type:\", typeof this.form.category_id);\n},\n    handleFileUpload(event) {\n      this.form.logo = event.target.files[0];\n    },\n    setMinDeadlineDate() {\n      const tomorrow = new Date();\n      tomorrow.setDate(tomorrow.getDate() + 1);\n      this.minDeadlineDate = tomorrow.toISOString().split(\"T\")[0];\n    },\n\nasync submitForm() {\n  this.isSubmitting = true;\n  this.status.message = \"\";\n\n  try {\n    // Debug: Check form values before submission\n    console.log(\"Form data before submit:\", this.form);\n    console.log(\"Category ID value:\", this.form.category_id);\n    console.log(\"Category ID type:\", typeof this.form.category_id);\n    \n    // Validate required fields\n    if (!this.form.category_id || this.form.category_id === \"\") {\n      this.status = {\n        success: false,\n        message: \"Please select a category.\",\n      };\n      this.isSubmitting = false;\n      return;\n    }\n\n    const formData = new FormData();\n  \n\n    formData.append(\"job_title\", this.form.job_title);\n    formData.append(\"company\", this.form.company);\n    formData.append(\"location\", this.form.location);\n    formData.append(\"job_description\", this.form.job_description);\n    formData.append(\"requirements\", this.form.requirements);\n    formData.append(\"responsability\", this.form.responsability);\n    formData.append(\"salary_min\", this.form.salary_max);\n    formData.append(\"salary_max\", this.form.salary_max);\n    formData.append(\"conclusion\", this.form.conclusion);\n    formData.append(\"deadline_date\", this.form.deadline_date);\n    formData.append(\"users_id\", this.userId);\n    \n    // Ensure category_id is a string/number, not undefined\n    const categoryId = this.form.category_id;\n    if (categoryId !== undefined && categoryId !== null && categoryId !== \"\") {\n      formData.append(\"category_id\", categoryId);\n      console.log(\"Category ID being sent:\", categoryId);\n    } else {\n      console.error(\"Category ID is undefined or empty:\", categoryId);\n      this.status = {\n        success: false,\n        message: \"Category ID is missing.\",\n      };\n      this.isSubmitting = false;\n      return;\n    }\n    \n    if (this.form.logo && typeof this.form.logo !== \"string\") {\n      formData.append(\"logo\", this.form.logo);\n    }\n\n    // Debug: Log all FormData entries\n    console.log(\"FormData entries:\");\n    for (let [key, value] of formData.entries()) {\n      console.log(key + \": \" + value);\n    }\n\n    const token = localStorage.getItem(\"employerToken\");\n\n    const url = this.form.job_id\n      ? `${globalVariable}/admin/update_job/${this.form.job_id}`\n      : `${globalVariable}/admin/add_jobs`;\n    const method = this.form.job_id ? \"PUT\" : \"POST\";\n\n    const response = await fetch(url, {\n      method,\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n      body: formData,\n    });\n\n    if (response.ok) {\n      const result = await response.json();\n      this.status = {\n        success: true,\n        message: result.message || (this.form.job_id ? \"Job updated!\" : \"Job added!\"),\n      };\n\n      this.form = {\n        job_id: null,\n        job_title: \"\",\n        company: \"\",\n        deadline_date: this.minDeadlineDate,\n        job_description: \"\",\n        requirements: \"\",\n        responsability: \"\",\n        salary_min: \"\",\n        salary_max: \"\",\n        conclusion: \"\",\n        logo: \"\",\n        location: \"\",\n        category_id: \"\", // Reset category_id\n      };\n\n      this.fetchJobsByUser();\n    } else {\n      const error = await response.text();\n      this.status = {\n        success: false,\n        message: \"Failed: \" + error,\n      };\n    }\n  } catch (err) {\n    console.error(\"Error:\", err);\n    this.status = {\n      success: false,\n      message: \"Unexpected error occurred.\",\n    };\n  } finally {\n    this.isSubmitting = false;\n  }\n},\n\n\n    async fetchCategoryNameByUserId() {\n      try {\n        const res = await fetch(`${globalVariable}/category/${this.userId}`);\n        const data = await res.json();\n        if (res.ok && data.name) {\n          return data.name;\n        } else {\n          return \"Unknown\";\n        }\n      } catch (error) {\n        console.error(\"Failed to fetch category name:\", error);\n        return \"Error fetching category\";\n      }\n    },\n    getCategoryName(categoryId) {\n      return this.categoryNames[categoryId] || \"Unknown\";\n    },\n    async fetchJobsByUser() {\n      try {\n        const token = localStorage.getItem(\"employerToken\");\n        if (!this.userId) return;\n\n        const res = await fetch(`${globalVariable}/provider/jobs/${this.userId}`, {\n          headers: { Authorization: `Bearer ${token}` },\n        });\n\n        if (!res.ok) throw new Error(\"Failed to fetch jobs\");\n\n        const data = await res.json();\n        this.jobs = data;\n      } catch (err) {\n        console.error(\"Error fetching jobs for user:\", err);\n      }\n    },\n    async fetchUserStatus() {\n      const token = localStorage.getItem(\"employerToken\");\n      if (!this.userId || !token) return;\n\n      try {\n        const res = await fetch(`${globalVariable}/provider/status/${this.userId}`, {\n          headers: { Authorization: `Bearer ${token}` },\n        });\n\n        const data = await res.json();\n\n        if (res.ok) {\n          this.jobStatus = data.status;\n        } else {\n          console.error(\"Error fetching job status:\", data.message);\n        }\n      } catch (error) {\n        console.error(\"Network error while fetching job status:\", error);\n      }\n    },\n   async fetchCategories() {\n  try {\n    const token = localStorage.getItem(\"employerToken\");\n    const response = await fetch(`${globalVariable}/name_and_id`, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    const data = await response.json();\n    if (response.ok) {\n      this.categories = data;\n      \n      // Debug: Log the categories to see the structure\n      console.log(\"Categories fetched:\", data);\n      console.log(\"First category structure:\", data[0]);\n      \n      data.forEach(category => {\n        this.categoryNames[category.id] = category.name;\n      });\n    } else {\n      console.error(\"Failed to load categories:\", data.message);\n    }\n  } catch (error) {\n    console.error(\"Error fetching categories:\", error);\n  }\n},\n    editJob(job) {\n      const deadlineDate = job.deadline_date\n        ? new Date(job.deadline_date).toISOString().split(\"T\")[0]\n        : \"\";\n\n      this.form = {\n        job_id: job.job_id,\n        job_title: job.job_title,\n        company: job.company,\n        deadline_date: deadlineDate,\n        job_description: job.job_description,\n        requirements: job.requirements,\n        responsability: job.responsability,\n        salary_min: job.salary_min,\n        salary_max: job.salary_max,\n        conclusion: job.conclusion,\n        logo: job.logo,\n        location: job.location,\n        category_id: job.category_id,\n      };\n      window.scrollTo({ top: 0, behavior: \"smooth\" });\n    },\n    async getUserIdFromEmail() {\n      const token = localStorage.getItem(\"employerToken\");\n      if (!token || !this.userEmail) return;\n\n      try {\n        const res = await fetch(`${globalVariable}/get_user_id_by_email/${this.userEmail}`, {\n          headers: { Authorization: `Bearer ${token}` },\n        });\n        const data = await res.json();\n\n        if (res.ok) {\n          this.userId = data.users_id;\n          this.fetchJobsByUser();\n          this.fetchUserStatus();\n        } else {\n          this.status = {\n            success: false,\n            message: data.message || \"Unable to get user ID.\",\n          };\n        }\n      } catch (err) {\n        console.error(\"Error getting users_id:\", err);\n        this.status = {\n          success: false,\n          message: \"Failed to fetch user ID.\",\n        };\n      }\n    },\n    getStatusLabel(status) {\n      if (status === 0) {\n        return { text: \"Pending\", colorClass: \"text-danger\" };\n      } else if (status === 1) {\n        return { text: \"Approved\", colorClass: \"text-success\" };\n      } else {\n        return { text: \"Unknown\", colorClass: \"text-muted\" };\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.modal-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n}\n\n/* Modal content styling */\n.modal-content {\n  background-color: white;\n  padding: 20px;\n  border-radius: 8px;\n  text-align: center;\n  width: 300px;\n}\n\n.container-fluid {\n  max-width: 800px;\n  margin: auto;\n  padding: 20px;\n  background-color: #ffffff;\n  border-radius: 8px;\n  box-shadow: 0 8px 30px rgba(0, 0, 0, 0.2);\n}\n\nh5 {\n  color: #333;\n  margin-bottom: 20px;\n}\n\n.custom-select {\n  width: 100%;\n  padding: 15px;\n  height: 50px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  box-sizing: border-box;\n  transition: border-color 0.3s, box-shadow 0.3s;\n  font-size: 16px;\n}\n\n.form-control {\n  width: 100%;\n  padding: 15px;\n  height: 50px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  box-sizing: border-box;\n  transition: border-color 0.3s, box-shadow 0.3s;\n  font-size: 16px;\n}\n\n.form-control:focus {\n  border-color: #E960A6;\n  box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);\n  outline: none;\n}\n\n.form-label {\n  font-weight: bold;\n  margin-bottom: 5px;\n  display: block;\n}\n\n.btn-primary {\n  background-color: #E960A6;\n  color: white;\n}\n\n.btn-primary:hover {\n  background-color: #E960A6;\n  color: teal;\n}\n\n.form-group {\n  margin-bottom: 15px;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}