{"ast":null,"code":"import \"core-js/modules/web.dom-exception.stack.js\";\nimport IndexComponent from \"./IndexComponent.vue\";\nimport { globalVariable } from \"@/global\";\nexport default {\n  components: {\n    IndexComponent\n  },\n  data() {\n    return {\n      form: {\n        name: \"\",\n        telephone: \"\",\n        subject: \"\",\n        email: \"\",\n        priority: \"quick-support\",\n        message: \"\"\n      },\n      loading: false,\n      responseMessage: \"\",\n      messageType: \"\",\n      // 'success' or 'danger'\n      userEmail: \"\",\n      userId: null,\n      providerDetails: null\n    };\n  },\n  async mounted() {\n    const token = localStorage.getItem(\"employerToken\");\n    if (token) {\n      try {\n        const payload = JSON.parse(atob(token.split(\".\")[1]));\n        this.userEmail = payload.email;\n        this.form.email = this.userEmail; // Pre-fill email from token\n      } catch (e) {\n        console.error(\"Invalid token format\", e);\n      }\n    }\n    if (this.userEmail) {\n      await this.getUserIdFromEmail();\n    }\n  },\n  methods: {\n    async submitForm() {\n      this.loading = true;\n      this.responseMessage = \"\";\n      this.messageType = \"\";\n      try {\n        const response = await fetch(`${globalVariable}/support/send-email`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(this.form)\n        });\n        const data = await response.json();\n        this.responseMessage = data.message || \"Message sent successfully!\";\n        this.messageType = \"success\";\n\n        // Clear form but keep user details\n        this.form = {\n          name: this.form.name,\n          // Keep name\n          telephone: this.form.telephone,\n          // Keep telephone\n          email: this.form.email,\n          // Keep email\n          priority: \"quick-support\",\n          subject: \"\",\n          message: \"\" // Only clear message\n        };\n      } catch (err) {\n        console.error(\"Full error:\", err);\n        this.responseMessage = \"Error sending message: \" + err.message;\n        this.messageType = \"danger\";\n      } finally {\n        this.loading = false;\n      }\n    },\n    async getUserIdFromEmail() {\n      const token = localStorage.getItem(\"employerToken\");\n      if (!token) return;\n      try {\n        const payload = JSON.parse(atob(token.split(\".\")[1]));\n        this.userEmail = payload.email;\n        const res = await fetch(`${globalVariable}/get_user_id_by_email/${this.userEmail}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        const data = await res.json();\n        if (res.ok) {\n          this.userId = data.users_id;\n          await this.fetchProviderDetails();\n        }\n      } catch (err) {\n        console.error(\"Error getting user ID:\", err);\n      }\n    },\n    async fetchProviderDetails() {\n      const token = localStorage.getItem(\"employerToken\");\n      if (!token || !this.userId) return;\n      try {\n        const res = await fetch(`${globalVariable}/provider/job_provider_id/${this.userId}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        const data = await res.json();\n        if (res.ok) {\n          this.providerDetails = data;\n\n          // Auto-populate form fields with provider details\n          this.form.name = `${data.provider_first_name} ${data.provider_last_name}`;\n          // Email is already set from token\n          // You'll need to add telephone field to your API response if you want to auto-populate it\n          // For now, telephone will remain empty unless you modify the API endpoint\n        }\n      } catch (error) {\n        console.error(\"Error fetching provider details:\", error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["IndexComponent","globalVariable","components","data","form","name","telephone","subject","email","priority","message","loading","responseMessage","messageType","userEmail","userId","providerDetails","mounted","token","localStorage","getItem","payload","JSON","parse","atob","split","e","console","error","getUserIdFromEmail","methods","submitForm","response","fetch","method","headers","body","stringify","json","err","res","Authorization","ok","users_id","fetchProviderDetails","provider_first_name","provider_last_name"],"sources":["/Users/gentil/Desktop/Kozi-ai-agent/src/views/jobprovider/RequestSupport.vue"],"sourcesContent":["<template>\n  <IndexComponent />\n  <div\n    class=\"page-wrapper\"\n    id=\"main-wrapper\"\n    data-layout=\"vertical\"\n    data-navbarbg=\"skin6\"\n    data-sidebartype=\"full\"\n    data-sidebar-description=\"fixed\"\n    data-header-description=\"fixed\"\n    style=\"position: absolute; top: 0; left: 0; right: 0; bottom: 0; z-index: 1;\">\n    <div class=\"body-wrapper\" style=\"margin-top: 70px; margin-left: 270px; background: white; min-height: calc(100vh - 70px); padding: 20px; overflow-y: auto; max-height: calc(100vh - 70px);\">\n      <!-- <h5 class=\"text-center\">Logged in as:</h5>\n      <h6 class=\"text-center text-muted\">{{ userEmail }}</h6>\n      <p><strong>users_id:</strong> {{ userId }}</p> -->\n      <h5 class=\"card-title fw-semibold mb-4\" style=\"color: #E960A6;\"><i class=\"ti ti-message-chatbot\"></i>  Request support</h5>\n      <div class=\"mx-4\">\n        <div class=\"form-group row\" style=\"display: none;\">\n          <div class=\"col-md-6\">\n            <label class=\"form-label\">Names</label>\n            <input type=\"text\" v-model=\"form.name\" class=\"form-control\" />\n          </div>\n          <div class=\"col-md-6\">\n            <label class=\"form-label\">Telephone</label>\n            <input type=\"text\" v-model=\"form.telephone\" class=\"form-control\" />\n          </div>\n        </div>\n\n        <div class=\"form-group row\">\n          <div class=\"col-md-6\" style=\"display: none;\">\n            <label class=\"form-label\">Email</label>\n            <input type=\"text\" v-model=\"form.email\" class=\"form-control\" />\n          </div>\n          <div class=\"col-md-6\">\n            <label class=\"form-label\">Priority</label>\n            <select v-model=\"form.priority\" style=\"height: 48px; padding-top: 8px; padding-bottom: 8px;\" class=\"form-control\">\n              <option value=\"quick-support\">Quick support</option>\n              <option value=\"normal support\">Normal support</option>\n            </select>\n          </div>\n          <div class=\"col-md-6\">\n            <label class=\"form-label\">Subject</label>\n            <input type=\"text\" v-model=\"form.subject\" class=\"form-control\" />\n          </div>\n        </div>\n\n        <div class=\"form-group row\">\n          <div class=\"col-md-12\">\n            <label class=\"form-label\">Message</label>\n            <textarea\n              v-model=\"form.message\"\n              style=\"height: 150px;\"\n              class=\"form-control\"\n            ></textarea>\n          </div>\n        </div>\n\n        <!-- Success/Error message -->\n        <div\n          v-if=\"responseMessage\"\n          :class=\"['alert mt-3', messageType === 'success' ? 'alert-success' : 'alert-danger']\"\n          role=\"alert\"\n        >\n          {{ responseMessage }}\n        </div>\n\n        <!-- Submit Button -->\n        <button\n          @click=\"submitForm\"\n          class=\"btn btn-primary mt-3\"\n          :disabled=\"loading\"\n          style=\"background-color:#E960A6;\"\n        >\n          <span v-if=\"loading\" class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\n          <span v-if=\"!loading\">Submit</span>\n          <span v-else class=\"ms-2\">Sending...</span>\n        </button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport IndexComponent from \"./IndexComponent.vue\";\nimport { globalVariable } from \"@/global\";\n\nexport default {\n  components: {\n    IndexComponent,\n  },\n  data() {\n    return {\n      form: {\n        name: \"\",\n        telephone: \"\",\n        subject: \"\",\n        email: \"\",\n        priority: \"quick-support\",\n        message: \"\",\n      },\n      loading: false,\n      responseMessage: \"\",\n      messageType: \"\", // 'success' or 'danger'\n      userEmail: \"\",\n      userId: null,\n      providerDetails: null,\n    };\n  },\n  async mounted() {\n    const token = localStorage.getItem(\"employerToken\");\n    if (token) {\n      try {\n        const payload = JSON.parse(atob(token.split(\".\")[1]));\n        this.userEmail = payload.email;\n        this.form.email = this.userEmail; // Pre-fill email from token\n      } catch (e) {\n        console.error(\"Invalid token format\", e);\n      }\n    }\n    \n    if (this.userEmail) {\n      await this.getUserIdFromEmail();\n    }\n  },\n  methods: {\n    async submitForm() {\n      this.loading = true;\n      this.responseMessage = \"\";\n      this.messageType = \"\";\n      try {\n        const response = await fetch(`${globalVariable}/support/send-email`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(this.form),\n        });\n\n        const data = await response.json();\n        this.responseMessage = data.message || \"Message sent successfully!\";\n        this.messageType = \"success\";\n\n        // Clear form but keep user details\n        this.form = {\n          name: this.form.name, // Keep name\n          telephone: this.form.telephone, // Keep telephone\n          email: this.form.email, // Keep email\n          priority: \"quick-support\",\n          subject: \"\",\n          message: \"\", // Only clear message\n        };\n      } catch (err) {\n        console.error(\"Full error:\", err);\n        this.responseMessage = \"Error sending message: \" + err.message;\n        this.messageType = \"danger\";\n      } finally {\n        this.loading = false;\n      }\n    },\n\n    async getUserIdFromEmail() {\n      const token = localStorage.getItem(\"employerToken\");\n      if (!token) return;\n      \n      try {\n        const payload = JSON.parse(atob(token.split(\".\")[1]));\n        this.userEmail = payload.email;\n        \n        const res = await fetch(`${globalVariable}/get_user_id_by_email/${this.userEmail}`, {\n          headers: { Authorization: `Bearer ${token}` }\n        });\n        \n        const data = await res.json();\n        if (res.ok) {\n          this.userId = data.users_id;\n          await this.fetchProviderDetails();\n        }\n      } catch (err) {\n        console.error(\"Error getting user ID:\", err);\n      }\n    },\n\n    async fetchProviderDetails() {\n      const token = localStorage.getItem(\"employerToken\");\n      if (!token || !this.userId) return;\n\n      try {\n        const res = await fetch(`${globalVariable}/provider/job_provider_id/${this.userId}`, {\n          headers: { Authorization: `Bearer ${token}` }\n        });\n        \n        const data = await res.json();\n        if (res.ok) {\n          this.providerDetails = data;\n          \n          // Auto-populate form fields with provider details\n          this.form.name = `${data.provider_first_name} ${data.provider_last_name}`;\n          // Email is already set from token\n          // You'll need to add telephone field to your API response if you want to auto-populate it\n          // For now, telephone will remain empty unless you modify the API endpoint\n        }\n      } catch (error) {\n        console.error(\"Error fetching provider details:\", error);\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.modal-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n}\n\n.modal-content {\n  background-color: white;\n  padding: 20px;\n  border-radius: 8px;\n  text-align: center;\n  width: 300px;\n}\n\n.container-fluid {\n  max-width: 800px;\n  margin: auto;\n  padding: 20px;\n  background-color: #ffffff;\n  border-radius: 8px;\n  box-shadow: 0 8px 30px rgba(0, 0, 0, 0.2);\n}\n\nh5 {\n  color: #333;\n  margin-bottom: 20px;\n}\n\n.custom-select,\n.form-control {\n  width: 100%;\n  padding: 15px;\n  height: 50px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  box-sizing: border-box;\n  transition: border-color 0.3s, box-shadow 0.3s;\n  font-size: 16px;\n}\n\n.form-control:focus {\n  border-color: #E960A6;\n  box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);\n  outline: none;\n}\n\n.form-label {\n  font-weight: bold;\n  margin-bottom: 5px;\n  display: block;\n}\n\n.btn-primary {\n  background-color: #E960A6;\n  color: white;\n}\n\n.btn-primary:hover {\n  background-color: #E960A6;\n  color: teal;\n}\n\n.form-group {\n  margin-bottom: 15px;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}