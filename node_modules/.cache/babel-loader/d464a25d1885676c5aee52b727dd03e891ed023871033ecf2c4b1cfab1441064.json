{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\nimport { globalVariable } from \"@/global\";\nimport IndexComponent from \"./IndexComponent.vue\";\nimport { getProvinces, getDistrictsByProvince, getSectorsByDistrict, getCellsBySector, getVillagesByCell } from 'rwanda-geo-structure';\nexport default {\n  name: \"ProfileComponent\",\n  components: {\n    IndexComponent\n  },\n  data() {\n    return {\n      form: {\n        first_name: \"\",\n        last_name: \"\",\n        fathers_name: \"\",\n        mothers_name: \"\",\n        telephone: \"\",\n        email: \"\",\n        province: \"\",\n        district: \"\",\n        sector: \"\",\n        cell: \"\",\n        village: \"\",\n        bio: \"\",\n        date_of_birth: \"\",\n        disability: \"\",\n        created_at: \"\",\n        cv: null,\n        id: null,\n        image: null,\n        categories_id: \"\",\n        id_url: null,\n        userIdurl: null,\n        users_id: null,\n        cv_url: null,\n        image_url: null,\n        salary: \"\",\n        gender: \"\"\n      },\n      selectedCategoryType: \"\",\n      userId: \"\",\n      userEmail: \"\",\n      message: null,\n      messageType: null,\n      categoryTypes: [],\n      categories: [],\n      // Location data\n      provinces: [],\n      districts: [],\n      sectors: [],\n      cells: [],\n      villages: [],\n      personalFields: [{\n        label: \"First Name\",\n        model: \"first_name\",\n        type: \"text\"\n      }, {\n        label: \"Last Name\",\n        model: \"last_name\",\n        type: \"text\"\n      }, {\n        label: \"Father's Name\",\n        model: \"fathers_name\",\n        type: \"text\"\n      }, {\n        label: \"Mother's Name\",\n        model: \"mothers_name\",\n        type: \"text\"\n      }, {\n        label: \"Telephone\",\n        model: \"telephone\",\n        type: \"text\"\n      }, {\n        label: \"Email\",\n        model: \"email\",\n        type: \"text\"\n      }, {\n        label: \"Date of Birth\",\n        model: \"date_of_birth\",\n        type: \"date\"\n      }]\n    };\n  },\n  mounted() {\n    this.loadProvinces();\n    this.getUserIdFromEmail();\n    this.loadCategoryTypes();\n    this.userIdurl = this.$route.params.id;\n  },\n  methods: {\n    // Location methods\n    loadProvinces() {\n      try {\n        this.provinces = getProvinces();\n      } catch (error) {\n        console.error(\"Error loading provinces:\", error);\n        this.message = \"Failed to load provinces.\";\n        this.messageType = \"alert-warning\";\n      }\n    },\n    loadDistricts() {\n      try {\n        if (this.form.province) {\n          this.districts = getDistrictsByProvince(this.form.province);\n          // Don't clear other fields when user is updating existing data\n          // Only clear when manually changing province\n          if (!this.isInitialLoad) {\n            this.sectors = [];\n            this.cells = [];\n            this.villages = [];\n            this.form.district = \"\";\n            this.form.sector = \"\";\n            this.form.cell = \"\";\n            this.form.village = \"\";\n          }\n        }\n      } catch (error) {\n        console.error(\"Error loading districts:\", error);\n        this.message = \"Failed to load districts.\";\n        this.messageType = \"alert-warning\";\n      }\n    },\n    loadSectors() {\n      try {\n        if (this.form.province && this.form.district) {\n          this.sectors = getSectorsByDistrict(this.form.province, this.form.district);\n          if (!this.isInitialLoad) {\n            this.cells = [];\n            this.villages = [];\n            this.form.sector = \"\";\n            this.form.cell = \"\";\n            this.form.village = \"\";\n          }\n        }\n      } catch (error) {\n        console.error(\"Error loading sectors:\", error);\n        this.message = \"Failed to load sectors.\";\n        this.messageType = \"alert-warning\";\n      }\n    },\n    loadCells() {\n      try {\n        if (this.form.province && this.form.district && this.form.sector) {\n          this.cells = getCellsBySector(this.form.province, this.form.district, this.form.sector);\n          if (!this.isInitialLoad) {\n            this.villages = [];\n            this.form.cell = \"\";\n            this.form.village = \"\";\n          }\n        }\n      } catch (error) {\n        console.error(\"Error loading cells:\", error);\n        this.message = \"Failed to load cells.\";\n        this.messageType = \"alert-warning\";\n      }\n    },\n    loadVillages() {\n      try {\n        if (this.form.province && this.form.district && this.form.sector && this.form.cell) {\n          this.villages = getVillagesByCell(this.form.province, this.form.district, this.form.sector, this.form.cell);\n          if (!this.isInitialLoad) {\n            this.form.village = \"\";\n          }\n        }\n      } catch (error) {\n        console.error(\"Error loading villages:\", error);\n        this.message = \"Failed to load villages.\";\n        this.messageType = \"alert-warning\";\n      }\n    },\n    // Load location hierarchy when fetching existing profile\n    async loadLocationHierarchy() {\n      this.isInitialLoad = true;\n      if (this.form.province) {\n        this.districts = getDistrictsByProvince(this.form.province);\n        if (this.form.district) {\n          this.sectors = getSectorsByDistrict(this.form.province, this.form.district);\n          if (this.form.sector) {\n            this.cells = getCellsBySector(this.form.province, this.form.district, this.form.sector);\n            if (this.form.cell) {\n              this.villages = getVillagesByCell(this.form.province, this.form.district, this.form.sector, this.form.cell);\n            }\n          }\n        }\n      }\n      this.isInitialLoad = false;\n    },\n    async getUserIdFromEmail() {\n      const token = localStorage.getItem(\"adminToken\");\n      if (!token) return;\n      try {\n        const payload = JSON.parse(atob(token.split(\".\")[1]));\n        this.userEmail = payload.email;\n        const res = await fetch(`${globalVariable}/get_user_id_by_email/${this.userEmail}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        const data = await res.json();\n        if (res.ok) {\n          this.userId = data.users_id;\n          this.fetchProfile();\n        } else {\n          this.message = data.message || \"Unable to get user ID.\";\n          this.messageType = \"alert-danger\";\n        }\n      } catch (err) {\n        console.error(\"Error getting users_id:\", err);\n        this.message = \"Failed to fetch user ID.\";\n        this.messageType = \"alert-danger\";\n      }\n    },\n    async fetchProfile() {\n      try {\n        const res = await fetch(`${globalVariable}/seeker/view_profile/${this.userIdurl}`, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"adminToken\")}`\n          }\n        });\n        const data = await res.json();\n        if (res.ok) {\n          // Fix date_of_birth format for input[type=date]\n          this.form.date_of_birth = data.date_of_birth ? data.date_of_birth.split(\"T\")[0] : \"\";\n\n          // Handle salary directly\n          this.form.salary = data.salary || \"\";\n\n          // Handle gender explicitly\n          this.form.gender = data.gender || \"\";\n\n          // Handle disability explicitly\n          this.form.disability = data.disability || \"\";\n\n          // Map other fields except the ones we've already handled\n          Object.keys(this.form).forEach(key => {\n            if (![\"date_of_birth\", \"salary\", \"gender\", \"disability\"].includes(key)) {\n              this.form[key] = data[key] || this.form[key];\n            }\n          });\n\n          // Handle file URLs\n          this.form.id_url = data.id ? `${globalVariable}/uploads/profile/${data.id}` : null;\n          this.form.cv_url = data.cv ? `${globalVariable}/uploads/profile/${data.cv}` : null;\n          this.form.image_url = data.image ? `${globalVariable}/uploads/profile/${data.image}` : null;\n\n          // Load location hierarchy after setting form data\n          await this.loadLocationHierarchy();\n\n          // Load current category information using the new endpoint\n          await this.loadCurrentCategoryInfo();\n        } else {\n          this.message = data.message || \"Failed to fetch profile\";\n          this.messageType = \"alert-danger\";\n        }\n      } catch (err) {\n        console.error(\"Error fetching profile:\", err);\n        this.message = \"Error loading profile.\";\n        this.messageType = \"alert-danger\";\n      }\n    },\n    async loadCurrentCategoryInfo() {\n      try {\n        // Use the new endpoint to get current category info\n        const res = await fetch(`${globalVariable}/categoryandtype/${this.userIdurl}`);\n        const data = await res.json();\n        if (res.ok) {\n          // Set the current category_type first using category_types_id\n          this.selectedCategoryType = data.category_types_id;\n\n          // Load categories for this category type\n          await this.loadCategories();\n\n          // Then set the current category_id after categories are loaded\n          this.form.categories_id = data.category_id;\n        } else {\n          console.error(\"Failed to load current category info:\", data.message);\n        }\n      } catch (error) {\n        console.error(\"Error loading current category info:\", error);\n      }\n    },\n    async loadCategoryTypes() {\n      try {\n        const res = await fetch(`${globalVariable}/category-types`);\n        const data = await res.json();\n        this.categoryTypes = data;\n      } catch (error) {\n        console.error(\"Failed to load category types:\", error);\n      }\n    },\n    async loadCategories() {\n      if (!this.selectedCategoryType) return;\n      try {\n        const res = await fetch(`${globalVariable}/categories/${this.selectedCategoryType}`);\n        const data = await res.json();\n        this.categories = data;\n\n        // Don't reset categories_id when loading categories for existing data\n        // Only reset when user manually changes category type\n      } catch (error) {\n        console.error(\"Failed to load categories:\", error);\n      }\n    },\n    // Handle category type change (when user manually changes it)\n    async onCategoryTypeChange() {\n      await this.loadCategories();\n      // Reset category selection when user changes category type\n      this.form.categories_id = \"\";\n    },\n    handleFileChange(field, event) {\n      this.form[field] = event.target.files[0];\n    },\n    async handleSubmit() {\n      const formData = new FormData();\n      for (const key of [\"first_name\", \"last_name\", \"gender\", \"fathers_name\", \"mothers_name\", \"telephone\", \"province\", \"district\", \"sector\", \"cell\", \"village\", \"bio\", \"salary\", \"date_of_birth\", \"disability\", \"categories_id\"]) {\n        formData.append(key, this.form[key]);\n      }\n      if (this.form.image) formData.append(\"image\", this.form.image);\n      if (this.form.id) formData.append(\"id\", this.form.id);\n      if (this.form.cv) formData.append(\"cv\", this.form.cv);\n\n      // Always set is_editable = 0 on update\n      formData.append(\"is_editable\", 0);\n      try {\n        const res = await fetch(`${globalVariable}/seeker/update_profile/${this.userIdurl}`, {\n          method: \"PUT\",\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"adminToken\")}`\n          },\n          body: formData\n        });\n        const data = await res.json();\n        if (res.ok) {\n          this.message = \"Profile updated successfully.\";\n          this.messageType = \"alert-success\";\n          await this.fetchProfile(); // refresh profile info after update\n        } else {\n          this.message = data.message || \"Failed to update profile.\";\n          this.messageType = \"alert-danger\";\n        }\n      } catch (error) {\n        console.error(\"Error updating profile:\", error);\n        this.message = \"An error occurred during update.\";\n        this.messageType = \"alert-danger\";\n      }\n    }\n  }\n};","map":{"version":3,"names":["globalVariable","IndexComponent","getProvinces","getDistrictsByProvince","getSectorsByDistrict","getCellsBySector","getVillagesByCell","name","components","data","form","first_name","last_name","fathers_name","mothers_name","telephone","email","province","district","sector","cell","village","bio","date_of_birth","disability","created_at","cv","id","image","categories_id","id_url","userIdurl","users_id","cv_url","image_url","salary","gender","selectedCategoryType","userId","userEmail","message","messageType","categoryTypes","categories","provinces","districts","sectors","cells","villages","personalFields","label","model","type","mounted","loadProvinces","getUserIdFromEmail","loadCategoryTypes","$route","params","methods","error","console","loadDistricts","isInitialLoad","loadSectors","loadCells","loadVillages","loadLocationHierarchy","token","localStorage","getItem","payload","JSON","parse","atob","split","res","fetch","headers","Authorization","json","ok","fetchProfile","err","Object","keys","forEach","key","includes","loadCurrentCategoryInfo","category_types_id","loadCategories","category_id","onCategoryTypeChange","handleFileChange","field","event","target","files","handleSubmit","formData","FormData","append","method","body"],"sources":["/Users/gentil/Desktop/Kozi-ai-agent/src/views/admin/EditSeekersComponent.vue"],"sourcesContent":["<template>\n  <IndexComponent />\n  <div\n    class=\"page-wrapper\"\n    id=\"main-wrapper\"\n    data-layout=\"vertical\"\n    data-navbarbg=\"skin6\"\n    data-sidebartype=\"full\"\n    data-sidebar-description=\"fixed\"\n    data-header-description=\"fixed\"\n    style=\"position: absolute; top: 0; left: 0; right: 0; bottom: 0; z-index: 1;\"\n  >\n    <div class=\"card-body\" style=\"margin-top: 70px; margin-left: 270px; background: white; min-height: calc(100vh - 70px); padding: 20px; overflow-y: auto; max-height: calc(100vh - 70px);\">\n      <!-- <h5 class=\"text-center\">Logged in as:</h5>\n      <h6 class=\"text-center text-muted\">{{ userEmail }}</h6>\n      <h6 class=\"text-center text-muted\">{{ userId}}</h6>\n      <h6 class=\"text-center text-muted\">{{  userIdurl}}</h6> -->\n    </div>\n\n    <div class=\"body-wrapper\">\n      <h5 class=\"card-title fw-semibold mb-4\" style=\"color: #E960A6;\">\n        <i class=\"ti ti-user-plus\"></i>\n        Update Job seeker's profile\n      </h5>\n\n      <form @submit.prevent=\"handleSubmit\" class=\"mx-4\">\n        \n\n        <div class=\"form-group row\">\n          <div class=\"col-md-6\" v-for=\"(field, index) in personalFields\" :key=\"index\">\n            <label :for=\"field.model\" class=\"form-label\">{{ field.label }}</label>\n            <input :type=\"field.type\" v-model=\"form[field.model]\" class=\"form-control\" :id=\"field.model\" required />\n          </div>\n\n          <div class=\"col-md-6\">\n            <label class=\"form-label\">Gender</label>\n            <select v-model=\"form.gender\" class=\"form-control\" style=\"height: 48px; padding-top: 8px; padding-bottom: 8px;\" required>\n              <option>Male</option>\n              <option>Female</option>\n              <option>Other</option>\n            </select>\n          </div>\n\n          <!-- Location Selectors -->\n          <div class=\"col-md-6\">\n            <label class=\"form-label\">Province</label>\n            <select \n              v-model=\"form.province\" \n              @change=\"loadDistricts\" \n              class=\"form-control\" \n              style=\"height: 48px; padding-top: 8px; padding-bottom: 8px;\" \n              required\n            >\n              <option disabled value=\"\">Select Province</option>\n              <option v-for=\"province in provinces\" :key=\"province\" :value=\"province\">\n                {{ province }}\n              </option>\n            </select>\n          </div>\n\n          <div class=\"col-md-6\">\n            <label class=\"form-label\">District</label>\n            <select \n              v-model=\"form.district\" \n              @change=\"loadSectors\" \n              :disabled=\"!form.province\"\n              class=\"form-control\" \n              style=\"height: 48px; padding-top: 8px; padding-bottom: 8px;\" \n              required\n            >\n              <option disabled value=\"\">Select District</option>\n              <option v-for=\"district in districts\" :key=\"district\" :value=\"district\">\n                {{ district }}\n              </option>\n            </select>\n          </div>\n\n          <div class=\"col-md-6\">\n            <label class=\"form-label\">Sector</label>\n            <select \n              v-model=\"form.sector\" \n              @change=\"loadCells\" \n              :disabled=\"!form.district\"\n              class=\"form-control\" \n              style=\"height: 48px; padding-top: 8px; padding-bottom: 8px;\" \n              required\n            >\n              <option disabled value=\"\">Select Sector</option>\n              <option v-for=\"sector in sectors\" :key=\"sector\" :value=\"sector\">\n                {{ sector }}\n              </option>\n            </select>\n          </div>\n\n          <div class=\"col-md-6\">\n            <label class=\"form-label\">Cell</label>\n            <select \n              v-model=\"form.cell\" \n              @change=\"loadVillages\" \n              :disabled=\"!form.sector\"\n              class=\"form-control\" \n              style=\"height: 48px; padding-top: 8px; padding-bottom: 8px;\" \n              required\n            >\n              <option disabled value=\"\">Select Cell</option>\n              <option v-for=\"cell in cells\" :key=\"cell\" :value=\"cell\">\n                {{ cell }}\n              </option>\n            </select>\n          </div>\n\n          <div class=\"col-md-6\">\n            <label class=\"form-label\">Village</label>\n            <select \n              v-model=\"form.village\" \n              :disabled=\"!form.cell\"\n              class=\"form-control\" \n              style=\"height: 48px; padding-top: 8px; padding-bottom: 8px;\" \n              required\n            >\n              <option disabled value=\"\">Select Village</option>\n              <option v-for=\"village in villages\" :key=\"village\" :value=\"village\">\n                {{ village }}\n              </option>\n            </select>\n          </div>\n\n          <div class=\"col-md-6\">\n            <label class=\"form-label\">Disability</label>\n            <select v-model=\"form.disability\" class=\"form-control\" style=\"height: 48px; padding-top: 8px; padding-bottom: 8px;\" required>\n              <option>None</option>\n              <option>Visual Impairment</option>\n              <option>Hearing Impairment</option>\n              <option>Physical Disability</option>\n              <option>Intellectual Disability</option>\n              <option>Mental Health Condition</option>\n              <option>Learning Disability</option>\n              <option>Speech and Language Disorder</option>\n              <option>Autism Spectrum Disorder</option>\n              <option>Chronic Illness (e.g. epilepsy, diabetes)</option>\n              <option>Neurological Disorder (e.g. cerebral palsy)</option>\n              <option>Albinism</option>\n              <option>Multiple Disabilities</option>\n              <option>Other</option>\n            </select>\n          </div>\n\n          <div class=\"col-md-6\">\n            <label class=\"form-label\">Expected Salary</label>\n            <select v-model=\"form.salary\" class=\"form-control\" style=\"height: 48px; padding-top: 8px; padding-bottom: 8px;\" required>\n              <option disabled value=\"\">Select Salary</option>\n              <option>35,000 Frw - 50,000 Frw</option>\n              <option>51,000 Frw - 80,000 Frw</option>\n              <option>81,000 Frw - 100,000 Frw</option>\n              <option>101,000 Frw - 150,000 Frw</option>\n              <option>150,001+ Frw</option>\n            </select>\n          </div>\n\n          <!-- Category selection -->\n          <div class=\"col-md-6\">\n            <label class=\"form-label\">Category Type</label>\n            <select v-model=\"selectedCategoryType\" @change=\"onCategoryTypeChange\" class=\"form-control\" style=\"height: 48px; padding-top: 8px; padding-bottom: 8px;\" required>\n              <option disabled value=\"\">Select Category Type</option>\n              <option v-for=\"type in categoryTypes\" :key=\"type.id\" :value=\"type.id\">{{ type.name }}</option>\n            </select>\n          </div>\n\n          <div class=\"col-md-6\">\n            <label class=\"form-label\">Category</label>\n            <select v-model=\"form.categories_id\" class=\"form-control\" style=\"height: 48px; padding-top: 8px; padding-bottom: 8px;\" required>\n              <option disabled value=\"\">Select Category</option>\n              <option v-for=\"cat in categories\" :key=\"cat.id\" :value=\"cat.id\">{{ cat.name }}</option>\n            </select>\n          </div>\n\n          <!-- File Uploads -->\n          <div class=\"col-md-6\">\n            <label class=\"form-label\">Upload ID Card</label>\n            <input type=\"file\" @change=\"handleFileChange('id', $event)\" class=\"form-control\" />\n            <small class=\"form-text text-muted\">Maximum file size: 1MB</small>\n            <div v-if=\"form.id_url\" class=\"mt-2\">\n              <a :href=\"form.id_url\" target=\"_blank\" class=\"btn btn-primary btn-sm\">View Current ID</a>\n            </div>\n          </div>\n\n          <div class=\"col-md-6 mt-2\">\n            <label class=\"form-label\">Upload Profile Image</label>\n            <input type=\"file\" @change=\"handleFileChange('image', $event)\" class=\"form-control\" />\n            <small class=\"form-text text-muted\">Maximum file size: 1MB</small>\n            <div v-if=\"form.image_url\" class=\"mt-2\">\n              <a :href=\"form.image_url\" target=\"_blank\" class=\"btn btn-primary btn-sm\">View Current Profile</a>\n            </div>\n          </div>\n\n          <div class=\"col-md-6 mt-2\">\n            <label class=\"form-label\">Upload CV(Optional)</label>\n            <input type=\"file\" @change=\"handleFileChange('cv', $event)\" class=\"form-control\" />\n            <small class=\"form-text text-muted\">Maximum file size: 1MB</small>\n            <div v-if=\"form.cv_url\" class=\"mt-2\">\n              <a :href=\"form.cv_url\" target=\"_blank\" class=\"btn btn-primary btn-sm\">View Current CV</a>\n            </div>\n          </div>\n\n          <div class=\"col-md-12 mt-2\">\n            <label class=\"form-label\">Skills and capabilities</label>\n            <textarea v-model=\"form.bio\" class=\"form-control\" required style=\"height: 100px;\"></textarea>\n          </div>\n        </div>\n        <div v-if=\"message\" :class=\"['alert', messageType]\">{{ message }}</div>\n\n        <button type=\"submit\" class=\"btn btn-primary mb-3\">Update Profile</button>\n      </form>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { globalVariable } from \"@/global\";\nimport IndexComponent from \"./IndexComponent.vue\";\nimport {\n  getProvinces,\n  getDistrictsByProvince,\n  getSectorsByDistrict,\n  getCellsBySector,\n  getVillagesByCell\n} from 'rwanda-geo-structure';\n\nexport default {\n  name: \"ProfileComponent\",\n  components: { IndexComponent },\n  data() {\n    return {\n      form: {\n        first_name: \"\",\n        last_name: \"\",\n        fathers_name: \"\",\n        mothers_name: \"\",\n        telephone: \"\",\n        email: \"\",\n        province: \"\",\n        district: \"\",\n        sector: \"\",\n        cell: \"\",\n        village: \"\",\n        bio: \"\",\n        date_of_birth: \"\",\n        disability: \"\",\n        created_at: \"\",\n        cv: null,\n        id: null,\n        image: null,\n        categories_id: \"\",\n        id_url: null,\n        userIdurl: null,\n        users_id: null,\n        cv_url: null,\n        image_url: null,\n        salary: \"\",\n        gender: \"\",\n      },\n      selectedCategoryType: \"\",\n      userId: \"\",\n      userEmail: \"\",\n      message: null,\n      messageType: null,\n      categoryTypes: [],\n      categories: [],\n      \n      // Location data\n      provinces: [],\n      districts: [],\n      sectors: [],\n      cells: [],\n      villages: [],\n      \n      personalFields: [\n        { label: \"First Name\", model: \"first_name\", type: \"text\" },\n        { label: \"Last Name\", model: \"last_name\", type: \"text\" },\n        { label: \"Father's Name\", model: \"fathers_name\", type: \"text\" },\n        { label: \"Mother's Name\", model: \"mothers_name\", type: \"text\" },\n        { label: \"Telephone\", model: \"telephone\", type: \"text\" },\n        { label: \"Email\", model: \"email\", type: \"text\" },\n        { label: \"Date of Birth\", model: \"date_of_birth\", type: \"date\" },\n      ],\n    };\n  },\n  mounted() {\n    this.loadProvinces();\n    this.getUserIdFromEmail();\n    this.loadCategoryTypes();\n    this.userIdurl = this.$route.params.id;\n  },\n  methods: {\n    // Location methods\n    loadProvinces() {\n      try {\n        this.provinces = getProvinces();\n      } catch (error) {\n        console.error(\"Error loading provinces:\", error);\n        this.message = \"Failed to load provinces.\";\n        this.messageType = \"alert-warning\";\n      }\n    },\n\n    loadDistricts() {\n      try {\n        if (this.form.province) {\n          this.districts = getDistrictsByProvince(this.form.province);\n          // Don't clear other fields when user is updating existing data\n          // Only clear when manually changing province\n          if (!this.isInitialLoad) {\n            this.sectors = [];\n            this.cells = [];\n            this.villages = [];\n            this.form.district = \"\";\n            this.form.sector = \"\";\n            this.form.cell = \"\";\n            this.form.village = \"\";\n          }\n        }\n      } catch (error) {\n        console.error(\"Error loading districts:\", error);\n        this.message = \"Failed to load districts.\";\n        this.messageType = \"alert-warning\";\n      }\n    },\n\n    loadSectors() {\n      try {\n        if (this.form.province && this.form.district) {\n          this.sectors = getSectorsByDistrict(this.form.province, this.form.district);\n          if (!this.isInitialLoad) {\n            this.cells = [];\n            this.villages = [];\n            this.form.sector = \"\";\n            this.form.cell = \"\";\n            this.form.village = \"\";\n          }\n        }\n      } catch (error) {\n        console.error(\"Error loading sectors:\", error);\n        this.message = \"Failed to load sectors.\";\n        this.messageType = \"alert-warning\";\n      }\n    },\n\n    loadCells() {\n      try {\n        if (this.form.province && this.form.district && this.form.sector) {\n          this.cells = getCellsBySector(this.form.province, this.form.district, this.form.sector);\n          if (!this.isInitialLoad) {\n            this.villages = [];\n            this.form.cell = \"\";\n            this.form.village = \"\";\n          }\n        }\n      } catch (error) {\n        console.error(\"Error loading cells:\", error);\n        this.message = \"Failed to load cells.\";\n        this.messageType = \"alert-warning\";\n      }\n    },\n\n    loadVillages() {\n      try {\n        if (this.form.province && this.form.district && this.form.sector && this.form.cell) {\n          this.villages = getVillagesByCell(this.form.province, this.form.district, this.form.sector, this.form.cell);\n          if (!this.isInitialLoad) {\n            this.form.village = \"\";\n          }\n        }\n      } catch (error) {\n        console.error(\"Error loading villages:\", error);\n        this.message = \"Failed to load villages.\";\n        this.messageType = \"alert-warning\";\n      }\n    },\n\n    // Load location hierarchy when fetching existing profile\n    async loadLocationHierarchy() {\n      this.isInitialLoad = true;\n      \n      if (this.form.province) {\n        this.districts = getDistrictsByProvince(this.form.province);\n        \n        if (this.form.district) {\n          this.sectors = getSectorsByDistrict(this.form.province, this.form.district);\n          \n          if (this.form.sector) {\n            this.cells = getCellsBySector(this.form.province, this.form.district, this.form.sector);\n            \n            if (this.form.cell) {\n              this.villages = getVillagesByCell(this.form.province, this.form.district, this.form.sector, this.form.cell);\n            }\n          }\n        }\n      }\n      \n      this.isInitialLoad = false;\n    },\n\n    async getUserIdFromEmail() {\n      const token = localStorage.getItem(\"adminToken\");\n      if (!token) return;\n      try {\n        const payload = JSON.parse(atob(token.split(\".\")[1]));\n        this.userEmail = payload.email;\n        const res = await fetch(`${globalVariable}/get_user_id_by_email/${this.userEmail}`, {\n          headers: { Authorization: `Bearer ${token}` },\n        });\n        const data = await res.json();\n        if (res.ok) {\n          this.userId = data.users_id;\n          this.fetchProfile();\n        } else {\n          this.message = data.message || \"Unable to get user ID.\";\n          this.messageType = \"alert-danger\";\n        }\n      } catch (err) {\n        console.error(\"Error getting users_id:\", err);\n        this.message = \"Failed to fetch user ID.\";\n        this.messageType = \"alert-danger\";\n      }\n    },\n\n    async fetchProfile() {\n      try {\n        const res = await fetch(`${globalVariable}/seeker/view_profile/${this.userIdurl}`, {\n          headers: { Authorization: `Bearer ${localStorage.getItem(\"adminToken\")}` },\n        });\n        const data = await res.json();\n        if (res.ok) {\n          // Fix date_of_birth format for input[type=date]\n          this.form.date_of_birth = data.date_of_birth ? data.date_of_birth.split(\"T\")[0] : \"\";\n\n          // Handle salary directly\n          this.form.salary = data.salary || \"\";\n\n          // Handle gender explicitly\n          this.form.gender = data.gender || \"\";\n\n          // Handle disability explicitly\n          this.form.disability = data.disability || \"\";\n\n          // Map other fields except the ones we've already handled\n          Object.keys(this.form).forEach(key => {\n            if (![\"date_of_birth\", \"salary\", \"gender\", \"disability\"].includes(key)) {\n              this.form[key] = data[key] || this.form[key];\n            }\n          });\n\n          // Handle file URLs\n          this.form.id_url = data.id ? `${globalVariable}/uploads/profile/${data.id}` : null;\n          this.form.cv_url = data.cv ? `${globalVariable}/uploads/profile/${data.cv}` : null;\n          this.form.image_url = data.image ? `${globalVariable}/uploads/profile/${data.image}` : null;\n\n          // Load location hierarchy after setting form data\n          await this.loadLocationHierarchy();\n\n          // Load current category information using the new endpoint\n          await this.loadCurrentCategoryInfo();\n        } else {\n          this.message = data.message || \"Failed to fetch profile\";\n          this.messageType = \"alert-danger\";\n        }\n      } catch (err) {\n        console.error(\"Error fetching profile:\", err);\n        this.message = \"Error loading profile.\";\n        this.messageType = \"alert-danger\";\n      }\n    },\n\n    async loadCurrentCategoryInfo() {\n      try {\n        // Use the new endpoint to get current category info\n        const res = await fetch(`${globalVariable}/categoryandtype/${this.userIdurl}`);\n        const data = await res.json();\n        if (res.ok) {\n          // Set the current category_type first using category_types_id\n          this.selectedCategoryType = data.category_types_id;\n          \n          // Load categories for this category type\n          await this.loadCategories();\n          \n          // Then set the current category_id after categories are loaded\n          this.form.categories_id = data.category_id;\n        } else {\n          console.error(\"Failed to load current category info:\", data.message);\n        }\n      } catch (error) {\n        console.error(\"Error loading current category info:\", error);\n      }\n    },\n\n    async loadCategoryTypes() {\n      try {\n        const res = await fetch(`${globalVariable}/category-types`);\n        const data = await res.json();\n        this.categoryTypes = data;\n      } catch (error) {\n        console.error(\"Failed to load category types:\", error);\n      }\n    },\n\n    async loadCategories() {\n      if (!this.selectedCategoryType) return;\n      \n      try {\n        const res = await fetch(`${globalVariable}/categories/${this.selectedCategoryType}`);\n        const data = await res.json();\n        this.categories = data;\n        \n        // Don't reset categories_id when loading categories for existing data\n        // Only reset when user manually changes category type\n      } catch (error) {\n        console.error(\"Failed to load categories:\", error);\n      }\n    },\n\n    // Handle category type change (when user manually changes it)\n    async onCategoryTypeChange() {\n      await this.loadCategories();\n      // Reset category selection when user changes category type\n      this.form.categories_id = \"\";\n    },\n\n    handleFileChange(field, event) {\n      this.form[field] = event.target.files[0];\n    },\n\n    async handleSubmit() {\n      const formData = new FormData();\n      for (const key of [\n        \"first_name\", \"last_name\", \"gender\", \"fathers_name\", \"mothers_name\", \"telephone\",\n        \"province\", \"district\", \"sector\", \"cell\", \"village\", \"bio\", \"salary\",\n        \"date_of_birth\", \"disability\", \"categories_id\"\n      ]) {\n        formData.append(key, this.form[key]);\n      }\n\n      if (this.form.image) formData.append(\"image\", this.form.image);\n      if (this.form.id) formData.append(\"id\", this.form.id);\n      if (this.form.cv) formData.append(\"cv\", this.form.cv);\n\n      // Always set is_editable = 0 on update\n      formData.append(\"is_editable\", 0);\n\n      try {\n        const res = await fetch(`${globalVariable}/seeker/update_profile/${this.userIdurl}`, {\n          method: \"PUT\",\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"adminToken\")}`,\n          },\n          body: formData,\n        });\n        const data = await res.json();\n        if (res.ok) {\n          this.message = \"Profile updated successfully.\";\n          this.messageType = \"alert-success\";\n          await this.fetchProfile(); // refresh profile info after update\n        } else {\n          this.message = data.message || \"Failed to update profile.\";\n          this.messageType = \"alert-danger\";\n        }\n      } catch (error) {\n        console.error(\"Error updating profile:\", error);\n        this.message = \"An error occurred during update.\";\n        this.messageType = \"alert-danger\";\n      }\n    },\n  },\n};\n</script>\n\n\n\n\n    <style scoped>\n    .modal-overlay {\n       position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background: rgba(0, 0, 0, 0.5);\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        z-index: 1000;\n      }\n      \n      /* Modal content styling */\n      .modal-content {\n        background-color: white;\n        padding: 20px;\n        border-radius: 8px;\n        text-align: center;\n        width: 300px;\n      }\n    \n      .container-fluid {\n        max-width: 800px;\n        margin: auto;\n        padding: 20px;\n        background-color: #ffffff;\n        border-radius: 8px;\n        box-shadow: 0 8px 30px rgba(0, 0, 0, 0.2);\n      }\n      \n      h5 {\n        color: #333;\n        margin-bottom: 20px;\n      }\n      .custom-select {\n        width: 100%;\n        padding: 15px;\n        height: 50px;\n        border: 1px solid #ccc;\n        border-radius: 5px;\n        box-sizing: border-box;\n        transition: border-color 0.3s, box-shadow 0.3s;\n        font-size: 16px;\n  \n      }\n      .form-control {\n        width: 100%;\n        padding: 15px;\n        height: 50px;\n        border: 1px solid #ccc;\n        border-radius: 5px;\n        box-sizing: border-box;\n        transition: border-color 0.3s, box-shadow 0.3s;\n        font-size: 16px;\n      }\n      \n      .form-control:focus {\n        border-color: #E960A6;\n        box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);\n        outline: none;\n      }\n      \n      .form-label {\n        font-weight: bold;\n        margin-bottom: 5px;\n        display: block;\n      }\n      \n      .btn-primary {\n        background-color: #E960A6;\n        color: white;\n      \n      }\n      \n      .btn-primary:hover {\n        background-color: #E960A6;\n        color: teal;\n      }\n      \n      .form-group {\n        margin-bottom: 15px;\n      }\n      \n      </style>\n      \n\n\n      "],"mappings":";;;AA0NA,SAASA,cAAa,QAAS,UAAU;AACzC,OAAOC,cAAa,MAAO,sBAAsB;AACjD,SACEC,YAAY,EACZC,sBAAsB,EACtBC,oBAAoB,EACpBC,gBAAgB,EAChBC,iBAAgB,QACX,sBAAsB;AAE7B,eAAe;EACbC,IAAI,EAAE,kBAAkB;EACxBC,UAAU,EAAE;IAAEP;EAAe,CAAC;EAC9BQ,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,IAAI,EAAE;QACJC,UAAU,EAAE,EAAE;QACdC,SAAS,EAAE,EAAE;QACbC,YAAY,EAAE,EAAE;QAChBC,YAAY,EAAE,EAAE;QAChBC,SAAS,EAAE,EAAE;QACbC,KAAK,EAAE,EAAE;QACTC,QAAQ,EAAE,EAAE;QACZC,QAAQ,EAAE,EAAE;QACZC,MAAM,EAAE,EAAE;QACVC,IAAI,EAAE,EAAE;QACRC,OAAO,EAAE,EAAE;QACXC,GAAG,EAAE,EAAE;QACPC,aAAa,EAAE,EAAE;QACjBC,UAAU,EAAE,EAAE;QACdC,UAAU,EAAE,EAAE;QACdC,EAAE,EAAE,IAAI;QACRC,EAAE,EAAE,IAAI;QACRC,KAAK,EAAE,IAAI;QACXC,aAAa,EAAE,EAAE;QACjBC,MAAM,EAAE,IAAI;QACZC,SAAS,EAAE,IAAI;QACfC,QAAQ,EAAE,IAAI;QACdC,MAAM,EAAE,IAAI;QACZC,SAAS,EAAE,IAAI;QACfC,MAAM,EAAE,EAAE;QACVC,MAAM,EAAE;MACV,CAAC;MACDC,oBAAoB,EAAE,EAAE;MACxBC,MAAM,EAAE,EAAE;MACVC,SAAS,EAAE,EAAE;MACbC,OAAO,EAAE,IAAI;MACbC,WAAW,EAAE,IAAI;MACjBC,aAAa,EAAE,EAAE;MACjBC,UAAU,EAAE,EAAE;MAEd;MACAC,SAAS,EAAE,EAAE;MACbC,SAAS,EAAE,EAAE;MACbC,OAAO,EAAE,EAAE;MACXC,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE,EAAE;MAEZC,cAAc,EAAE,CACd;QAAEC,KAAK,EAAE,YAAY;QAAEC,KAAK,EAAE,YAAY;QAAEC,IAAI,EAAE;MAAO,CAAC,EAC1D;QAAEF,KAAK,EAAE,WAAW;QAAEC,KAAK,EAAE,WAAW;QAAEC,IAAI,EAAE;MAAO,CAAC,EACxD;QAAEF,KAAK,EAAE,eAAe;QAAEC,KAAK,EAAE,cAAc;QAAEC,IAAI,EAAE;MAAO,CAAC,EAC/D;QAAEF,KAAK,EAAE,eAAe;QAAEC,KAAK,EAAE,cAAc;QAAEC,IAAI,EAAE;MAAO,CAAC,EAC/D;QAAEF,KAAK,EAAE,WAAW;QAAEC,KAAK,EAAE,WAAW;QAAEC,IAAI,EAAE;MAAO,CAAC,EACxD;QAAEF,KAAK,EAAE,OAAO;QAAEC,KAAK,EAAE,OAAO;QAAEC,IAAI,EAAE;MAAO,CAAC,EAChD;QAAEF,KAAK,EAAE,eAAe;QAAEC,KAAK,EAAE,eAAe;QAAEC,IAAI,EAAE;MAAO,CAAC;IAEpE,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,aAAa,CAAC,CAAC;IACpB,IAAI,CAACC,kBAAkB,CAAC,CAAC;IACzB,IAAI,CAACC,iBAAiB,CAAC,CAAC;IACxB,IAAI,CAACzB,SAAQ,GAAI,IAAI,CAAC0B,MAAM,CAACC,MAAM,CAAC/B,EAAE;EACxC,CAAC;EACDgC,OAAO,EAAE;IACP;IACAL,aAAaA,CAAA,EAAG;MACd,IAAI;QACF,IAAI,CAACV,SAAQ,GAAI1C,YAAY,CAAC,CAAC;MACjC,EAAE,OAAO0D,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;QAChD,IAAI,CAACpB,OAAM,GAAI,2BAA2B;QAC1C,IAAI,CAACC,WAAU,GAAI,eAAe;MACpC;IACF,CAAC;IAEDqB,aAAaA,CAAA,EAAG;MACd,IAAI;QACF,IAAI,IAAI,CAACpD,IAAI,CAACO,QAAQ,EAAE;UACtB,IAAI,CAAC4B,SAAQ,GAAI1C,sBAAsB,CAAC,IAAI,CAACO,IAAI,CAACO,QAAQ,CAAC;UAC3D;UACA;UACA,IAAI,CAAC,IAAI,CAAC8C,aAAa,EAAE;YACvB,IAAI,CAACjB,OAAM,GAAI,EAAE;YACjB,IAAI,CAACC,KAAI,GAAI,EAAE;YACf,IAAI,CAACC,QAAO,GAAI,EAAE;YAClB,IAAI,CAACtC,IAAI,CAACQ,QAAO,GAAI,EAAE;YACvB,IAAI,CAACR,IAAI,CAACS,MAAK,GAAI,EAAE;YACrB,IAAI,CAACT,IAAI,CAACU,IAAG,GAAI,EAAE;YACnB,IAAI,CAACV,IAAI,CAACW,OAAM,GAAI,EAAE;UACxB;QACF;MACF,EAAE,OAAOuC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;QAChD,IAAI,CAACpB,OAAM,GAAI,2BAA2B;QAC1C,IAAI,CAACC,WAAU,GAAI,eAAe;MACpC;IACF,CAAC;IAEDuB,WAAWA,CAAA,EAAG;MACZ,IAAI;QACF,IAAI,IAAI,CAACtD,IAAI,CAACO,QAAO,IAAK,IAAI,CAACP,IAAI,CAACQ,QAAQ,EAAE;UAC5C,IAAI,CAAC4B,OAAM,GAAI1C,oBAAoB,CAAC,IAAI,CAACM,IAAI,CAACO,QAAQ,EAAE,IAAI,CAACP,IAAI,CAACQ,QAAQ,CAAC;UAC3E,IAAI,CAAC,IAAI,CAAC6C,aAAa,EAAE;YACvB,IAAI,CAAChB,KAAI,GAAI,EAAE;YACf,IAAI,CAACC,QAAO,GAAI,EAAE;YAClB,IAAI,CAACtC,IAAI,CAACS,MAAK,GAAI,EAAE;YACrB,IAAI,CAACT,IAAI,CAACU,IAAG,GAAI,EAAE;YACnB,IAAI,CAACV,IAAI,CAACW,OAAM,GAAI,EAAE;UACxB;QACF;MACF,EAAE,OAAOuC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;QAC9C,IAAI,CAACpB,OAAM,GAAI,yBAAyB;QACxC,IAAI,CAACC,WAAU,GAAI,eAAe;MACpC;IACF,CAAC;IAEDwB,SAASA,CAAA,EAAG;MACV,IAAI;QACF,IAAI,IAAI,CAACvD,IAAI,CAACO,QAAO,IAAK,IAAI,CAACP,IAAI,CAACQ,QAAO,IAAK,IAAI,CAACR,IAAI,CAACS,MAAM,EAAE;UAChE,IAAI,CAAC4B,KAAI,GAAI1C,gBAAgB,CAAC,IAAI,CAACK,IAAI,CAACO,QAAQ,EAAE,IAAI,CAACP,IAAI,CAACQ,QAAQ,EAAE,IAAI,CAACR,IAAI,CAACS,MAAM,CAAC;UACvF,IAAI,CAAC,IAAI,CAAC4C,aAAa,EAAE;YACvB,IAAI,CAACf,QAAO,GAAI,EAAE;YAClB,IAAI,CAACtC,IAAI,CAACU,IAAG,GAAI,EAAE;YACnB,IAAI,CAACV,IAAI,CAACW,OAAM,GAAI,EAAE;UACxB;QACF;MACF,EAAE,OAAOuC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;QAC5C,IAAI,CAACpB,OAAM,GAAI,uBAAuB;QACtC,IAAI,CAACC,WAAU,GAAI,eAAe;MACpC;IACF,CAAC;IAEDyB,YAAYA,CAAA,EAAG;MACb,IAAI;QACF,IAAI,IAAI,CAACxD,IAAI,CAACO,QAAO,IAAK,IAAI,CAACP,IAAI,CAACQ,QAAO,IAAK,IAAI,CAACR,IAAI,CAACS,MAAK,IAAK,IAAI,CAACT,IAAI,CAACU,IAAI,EAAE;UAClF,IAAI,CAAC4B,QAAO,GAAI1C,iBAAiB,CAAC,IAAI,CAACI,IAAI,CAACO,QAAQ,EAAE,IAAI,CAACP,IAAI,CAACQ,QAAQ,EAAE,IAAI,CAACR,IAAI,CAACS,MAAM,EAAE,IAAI,CAACT,IAAI,CAACU,IAAI,CAAC;UAC3G,IAAI,CAAC,IAAI,CAAC2C,aAAa,EAAE;YACvB,IAAI,CAACrD,IAAI,CAACW,OAAM,GAAI,EAAE;UACxB;QACF;MACF,EAAE,OAAOuC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;QAC/C,IAAI,CAACpB,OAAM,GAAI,0BAA0B;QACzC,IAAI,CAACC,WAAU,GAAI,eAAe;MACpC;IACF,CAAC;IAED;IACA,MAAM0B,qBAAqBA,CAAA,EAAG;MAC5B,IAAI,CAACJ,aAAY,GAAI,IAAI;MAEzB,IAAI,IAAI,CAACrD,IAAI,CAACO,QAAQ,EAAE;QACtB,IAAI,CAAC4B,SAAQ,GAAI1C,sBAAsB,CAAC,IAAI,CAACO,IAAI,CAACO,QAAQ,CAAC;QAE3D,IAAI,IAAI,CAACP,IAAI,CAACQ,QAAQ,EAAE;UACtB,IAAI,CAAC4B,OAAM,GAAI1C,oBAAoB,CAAC,IAAI,CAACM,IAAI,CAACO,QAAQ,EAAE,IAAI,CAACP,IAAI,CAACQ,QAAQ,CAAC;UAE3E,IAAI,IAAI,CAACR,IAAI,CAACS,MAAM,EAAE;YACpB,IAAI,CAAC4B,KAAI,GAAI1C,gBAAgB,CAAC,IAAI,CAACK,IAAI,CAACO,QAAQ,EAAE,IAAI,CAACP,IAAI,CAACQ,QAAQ,EAAE,IAAI,CAACR,IAAI,CAACS,MAAM,CAAC;YAEvF,IAAI,IAAI,CAACT,IAAI,CAACU,IAAI,EAAE;cAClB,IAAI,CAAC4B,QAAO,GAAI1C,iBAAiB,CAAC,IAAI,CAACI,IAAI,CAACO,QAAQ,EAAE,IAAI,CAACP,IAAI,CAACQ,QAAQ,EAAE,IAAI,CAACR,IAAI,CAACS,MAAM,EAAE,IAAI,CAACT,IAAI,CAACU,IAAI,CAAC;YAC7G;UACF;QACF;MACF;MAEA,IAAI,CAAC2C,aAAY,GAAI,KAAK;IAC5B,CAAC;IAED,MAAMR,kBAAkBA,CAAA,EAAG;MACzB,MAAMa,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;MAChD,IAAI,CAACF,KAAK,EAAE;MACZ,IAAI;QACF,MAAMG,OAAM,GAAIC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACN,KAAK,CAACO,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACrD,IAAI,CAACpC,SAAQ,GAAIgC,OAAO,CAACvD,KAAK;QAC9B,MAAM4D,GAAE,GAAI,MAAMC,KAAK,CAAC,GAAG7E,cAAc,yBAAyB,IAAI,CAACuC,SAAS,EAAE,EAAE;UAClFuC,OAAO,EAAE;YAAEC,aAAa,EAAE,UAAUX,KAAK;UAAG;QAC9C,CAAC,CAAC;QACF,MAAM3D,IAAG,GAAI,MAAMmE,GAAG,CAACI,IAAI,CAAC,CAAC;QAC7B,IAAIJ,GAAG,CAACK,EAAE,EAAE;UACV,IAAI,CAAC3C,MAAK,GAAI7B,IAAI,CAACuB,QAAQ;UAC3B,IAAI,CAACkD,YAAY,CAAC,CAAC;QACrB,OAAO;UACL,IAAI,CAAC1C,OAAM,GAAI/B,IAAI,CAAC+B,OAAM,IAAK,wBAAwB;UACvD,IAAI,CAACC,WAAU,GAAI,cAAc;QACnC;MACF,EAAE,OAAO0C,GAAG,EAAE;QACZtB,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEuB,GAAG,CAAC;QAC7C,IAAI,CAAC3C,OAAM,GAAI,0BAA0B;QACzC,IAAI,CAACC,WAAU,GAAI,cAAc;MACnC;IACF,CAAC;IAED,MAAMyC,YAAYA,CAAA,EAAG;MACnB,IAAI;QACF,MAAMN,GAAE,GAAI,MAAMC,KAAK,CAAC,GAAG7E,cAAc,wBAAwB,IAAI,CAAC+B,SAAS,EAAE,EAAE;UACjF+C,OAAO,EAAE;YAAEC,aAAa,EAAE,UAAUV,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;UAAG;QAC3E,CAAC,CAAC;QACF,MAAM7D,IAAG,GAAI,MAAMmE,GAAG,CAACI,IAAI,CAAC,CAAC;QAC7B,IAAIJ,GAAG,CAACK,EAAE,EAAE;UACV;UACA,IAAI,CAACvE,IAAI,CAACa,aAAY,GAAId,IAAI,CAACc,aAAY,GAAId,IAAI,CAACc,aAAa,CAACoD,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE;;UAEpF;UACA,IAAI,CAACjE,IAAI,CAACyB,MAAK,GAAI1B,IAAI,CAAC0B,MAAK,IAAK,EAAE;;UAEpC;UACA,IAAI,CAACzB,IAAI,CAAC0B,MAAK,GAAI3B,IAAI,CAAC2B,MAAK,IAAK,EAAE;;UAEpC;UACA,IAAI,CAAC1B,IAAI,CAACc,UAAS,GAAIf,IAAI,CAACe,UAAS,IAAK,EAAE;;UAE5C;UACA4D,MAAM,CAACC,IAAI,CAAC,IAAI,CAAC3E,IAAI,CAAC,CAAC4E,OAAO,CAACC,GAAE,IAAK;YACpC,IAAI,CAAC,CAAC,eAAe,EAAE,QAAQ,EAAE,QAAQ,EAAE,YAAY,CAAC,CAACC,QAAQ,CAACD,GAAG,CAAC,EAAE;cACtE,IAAI,CAAC7E,IAAI,CAAC6E,GAAG,IAAI9E,IAAI,CAAC8E,GAAG,KAAK,IAAI,CAAC7E,IAAI,CAAC6E,GAAG,CAAC;YAC9C;UACF,CAAC,CAAC;;UAEF;UACA,IAAI,CAAC7E,IAAI,CAACoB,MAAK,GAAIrB,IAAI,CAACkB,EAAC,GAAI,GAAG3B,cAAc,oBAAoBS,IAAI,CAACkB,EAAE,EAAC,GAAI,IAAI;UAClF,IAAI,CAACjB,IAAI,CAACuB,MAAK,GAAIxB,IAAI,CAACiB,EAAC,GAAI,GAAG1B,cAAc,oBAAoBS,IAAI,CAACiB,EAAE,EAAC,GAAI,IAAI;UAClF,IAAI,CAAChB,IAAI,CAACwB,SAAQ,GAAIzB,IAAI,CAACmB,KAAI,GAAI,GAAG5B,cAAc,oBAAoBS,IAAI,CAACmB,KAAK,EAAC,GAAI,IAAI;;UAE3F;UACA,MAAM,IAAI,CAACuC,qBAAqB,CAAC,CAAC;;UAElC;UACA,MAAM,IAAI,CAACsB,uBAAuB,CAAC,CAAC;QACtC,OAAO;UACL,IAAI,CAACjD,OAAM,GAAI/B,IAAI,CAAC+B,OAAM,IAAK,yBAAyB;UACxD,IAAI,CAACC,WAAU,GAAI,cAAc;QACnC;MACF,EAAE,OAAO0C,GAAG,EAAE;QACZtB,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEuB,GAAG,CAAC;QAC7C,IAAI,CAAC3C,OAAM,GAAI,wBAAwB;QACvC,IAAI,CAACC,WAAU,GAAI,cAAc;MACnC;IACF,CAAC;IAED,MAAMgD,uBAAuBA,CAAA,EAAG;MAC9B,IAAI;QACF;QACA,MAAMb,GAAE,GAAI,MAAMC,KAAK,CAAC,GAAG7E,cAAc,oBAAoB,IAAI,CAAC+B,SAAS,EAAE,CAAC;QAC9E,MAAMtB,IAAG,GAAI,MAAMmE,GAAG,CAACI,IAAI,CAAC,CAAC;QAC7B,IAAIJ,GAAG,CAACK,EAAE,EAAE;UACV;UACA,IAAI,CAAC5C,oBAAmB,GAAI5B,IAAI,CAACiF,iBAAiB;;UAElD;UACA,MAAM,IAAI,CAACC,cAAc,CAAC,CAAC;;UAE3B;UACA,IAAI,CAACjF,IAAI,CAACmB,aAAY,GAAIpB,IAAI,CAACmF,WAAW;QAC5C,OAAO;UACL/B,OAAO,CAACD,KAAK,CAAC,uCAAuC,EAAEnD,IAAI,CAAC+B,OAAO,CAAC;QACtE;MACF,EAAE,OAAOoB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;MAC9D;IACF,CAAC;IAED,MAAMJ,iBAAiBA,CAAA,EAAG;MACxB,IAAI;QACF,MAAMoB,GAAE,GAAI,MAAMC,KAAK,CAAC,GAAG7E,cAAc,iBAAiB,CAAC;QAC3D,MAAMS,IAAG,GAAI,MAAMmE,GAAG,CAACI,IAAI,CAAC,CAAC;QAC7B,IAAI,CAACtC,aAAY,GAAIjC,IAAI;MAC3B,EAAE,OAAOmD,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACxD;IACF,CAAC;IAED,MAAM+B,cAAcA,CAAA,EAAG;MACrB,IAAI,CAAC,IAAI,CAACtD,oBAAoB,EAAE;MAEhC,IAAI;QACF,MAAMuC,GAAE,GAAI,MAAMC,KAAK,CAAC,GAAG7E,cAAc,eAAe,IAAI,CAACqC,oBAAoB,EAAE,CAAC;QACpF,MAAM5B,IAAG,GAAI,MAAMmE,GAAG,CAACI,IAAI,CAAC,CAAC;QAC7B,IAAI,CAACrC,UAAS,GAAIlC,IAAI;;QAEtB;QACA;MACF,EAAE,OAAOmD,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACpD;IACF,CAAC;IAED;IACA,MAAMiC,oBAAoBA,CAAA,EAAG;MAC3B,MAAM,IAAI,CAACF,cAAc,CAAC,CAAC;MAC3B;MACA,IAAI,CAACjF,IAAI,CAACmB,aAAY,GAAI,EAAE;IAC9B,CAAC;IAEDiE,gBAAgBA,CAACC,KAAK,EAAEC,KAAK,EAAE;MAC7B,IAAI,CAACtF,IAAI,CAACqF,KAAK,IAAIC,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAC1C,CAAC;IAED,MAAMC,YAAYA,CAAA,EAAG;MACnB,MAAMC,QAAO,GAAI,IAAIC,QAAQ,CAAC,CAAC;MAC/B,KAAK,MAAMd,GAAE,IAAK,CAChB,YAAY,EAAE,WAAW,EAAE,QAAQ,EAAE,cAAc,EAAE,cAAc,EAAE,WAAW,EAChF,UAAU,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,EAAE,SAAS,EAAE,KAAK,EAAE,QAAQ,EACpE,eAAe,EAAE,YAAY,EAAE,eAAc,CAC9C,EAAE;QACDa,QAAQ,CAACE,MAAM,CAACf,GAAG,EAAE,IAAI,CAAC7E,IAAI,CAAC6E,GAAG,CAAC,CAAC;MACtC;MAEA,IAAI,IAAI,CAAC7E,IAAI,CAACkB,KAAK,EAAEwE,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC5F,IAAI,CAACkB,KAAK,CAAC;MAC9D,IAAI,IAAI,CAAClB,IAAI,CAACiB,EAAE,EAAEyE,QAAQ,CAACE,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC5F,IAAI,CAACiB,EAAE,CAAC;MACrD,IAAI,IAAI,CAACjB,IAAI,CAACgB,EAAE,EAAE0E,QAAQ,CAACE,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC5F,IAAI,CAACgB,EAAE,CAAC;;MAErD;MACA0E,QAAQ,CAACE,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC;MAEjC,IAAI;QACF,MAAM1B,GAAE,GAAI,MAAMC,KAAK,CAAC,GAAG7E,cAAc,0BAA0B,IAAI,CAAC+B,SAAS,EAAE,EAAE;UACnFwE,MAAM,EAAE,KAAK;UACbzB,OAAO,EAAE;YACPC,aAAa,EAAE,UAAUV,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;UAC7D,CAAC;UACDkC,IAAI,EAAEJ;QACR,CAAC,CAAC;QACF,MAAM3F,IAAG,GAAI,MAAMmE,GAAG,CAACI,IAAI,CAAC,CAAC;QAC7B,IAAIJ,GAAG,CAACK,EAAE,EAAE;UACV,IAAI,CAACzC,OAAM,GAAI,+BAA+B;UAC9C,IAAI,CAACC,WAAU,GAAI,eAAe;UAClC,MAAM,IAAI,CAACyC,YAAY,CAAC,CAAC,EAAE;QAC7B,OAAO;UACL,IAAI,CAAC1C,OAAM,GAAI/B,IAAI,CAAC+B,OAAM,IAAK,2BAA2B;UAC1D,IAAI,CAACC,WAAU,GAAI,cAAc;QACnC;MACF,EAAE,OAAOmB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;QAC/C,IAAI,CAACpB,OAAM,GAAI,kCAAkC;QACjD,IAAI,CAACC,WAAU,GAAI,cAAc;MACnC;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}