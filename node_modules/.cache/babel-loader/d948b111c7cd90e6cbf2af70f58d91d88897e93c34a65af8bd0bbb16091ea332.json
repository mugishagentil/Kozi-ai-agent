{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\nimport { globalVariable } from \"@/global\";\nimport IndexComponent from \"./IndexComponent.vue\";\nimport { getProvinces, getDistrictsByProvince, getSectorsByDistrict, getCellsBySector, getVillagesByCell } from 'rwanda-geo-structure';\nexport default {\n  name: \"ProfileComponent\",\n  components: {\n    IndexComponent\n  },\n  data() {\n    return {\n      form: {\n        first_name: \"\",\n        last_name: \"\",\n        gender: \"\",\n        fathers_name: \"\",\n        mothers_name: \"\",\n        telephone: \"\",\n        email: \"\",\n        province: \"\",\n        district: \"\",\n        sector: \"\",\n        cell: \"\",\n        village: \"\",\n        bio: \"\",\n        salary: \"\",\n        date_of_birth: \"\",\n        disability: \"\",\n        created_at: \"\",\n        cv: null,\n        id: null,\n        image: null,\n        categories_id: \"\",\n        id_url: null,\n        userIdurl: null,\n        users_id: null,\n        cv_url: null,\n        image_url: null\n      },\n      selectedCategoryType: \"\",\n      userId: \"\",\n      userEmail: \"\",\n      message: null,\n      messageType: null,\n      categoryTypes: [],\n      categories: [],\n      // Rwanda geographic data\n      provinces: [],\n      districts: [],\n      sectors: [],\n      cells: [],\n      villages: [],\n      personalFields: [{\n        label: \"First Name\",\n        model: \"first_name\",\n        type: \"text\"\n      }, {\n        label: \"Last Name\",\n        model: \"last_name\",\n        type: \"text\"\n      }, {\n        label: \"Father's Name\",\n        model: \"fathers_name\",\n        type: \"text\"\n      }, {\n        label: \"Mother's Name\",\n        model: \"mothers_name\",\n        type: \"text\"\n      }, {\n        label: \"Telephone\",\n        model: \"telephone\",\n        type: \"text\"\n      }, {\n        label: \"Email\",\n        model: \"email\",\n        type: \"text\"\n      }, {\n        label: \"Date of Birth\",\n        model: \"date_of_birth\",\n        type: \"date\"\n      }]\n    };\n  },\n  mounted() {\n    this.loadProvinces();\n    this.getUserIdFromEmail();\n    this.loadCategoryTypes();\n    this.userIdurl = this.$route.params.id;\n  },\n  methods: {\n    // Rwanda geographic methods\n    loadProvinces() {\n      try {\n        this.provinces = getProvinces();\n      } catch (error) {\n        console.error(\"Error loading provinces:\", error);\n        this.message = \"Failed to load provinces.\";\n        this.messageType = \"alert-warning\";\n      }\n    },\n    loadDistricts() {\n      try {\n        if (this.form.province) {\n          this.districts = getDistrictsByProvince(this.form.province);\n          // Clear dependent fields if province changes\n          if (this.districts.length > 0 && !this.districts.includes(this.form.district)) {\n            this.sectors = [];\n            this.cells = [];\n            this.villages = [];\n            this.form.district = \"\";\n            this.form.sector = \"\";\n            this.form.cell = \"\";\n            this.form.village = \"\";\n          }\n        }\n      } catch (error) {\n        console.error(\"Error loading districts:\", error);\n        this.message = \"Failed to load districts.\";\n        this.messageType = \"alert-warning\";\n      }\n    },\n    loadSectors() {\n      try {\n        if (this.form.province && this.form.district) {\n          this.sectors = getSectorsByDistrict(this.form.province, this.form.district);\n          // Clear dependent fields if district changes\n          if (this.sectors.length > 0 && !this.sectors.includes(this.form.sector)) {\n            this.cells = [];\n            this.villages = [];\n            this.form.sector = \"\";\n            this.form.cell = \"\";\n            this.form.village = \"\";\n          }\n        }\n      } catch (error) {\n        console.error(\"Error loading sectors:\", error);\n        this.message = \"Failed to load sectors.\";\n        this.messageType = \"alert-warning\";\n      }\n    },\n    loadCells() {\n      try {\n        if (this.form.province && this.form.district && this.form.sector) {\n          this.cells = getCellsBySector(this.form.province, this.form.district, this.form.sector);\n          // Clear dependent fields if sector changes\n          if (this.cells.length > 0 && !this.cells.includes(this.form.cell)) {\n            this.villages = [];\n            this.form.cell = \"\";\n            this.form.village = \"\";\n          }\n        }\n      } catch (error) {\n        console.error(\"Error loading cells:\", error);\n        this.message = \"Failed to load cells.\";\n        this.messageType = \"alert-warning\";\n      }\n    },\n    loadVillages() {\n      try {\n        if (this.form.province && this.form.district && this.form.sector && this.form.cell) {\n          this.villages = getVillagesByCell(this.form.province, this.form.district, this.form.sector, this.form.cell);\n          // Clear village if cell changes\n          if (this.villages.length > 0 && !this.villages.includes(this.form.village)) {\n            this.form.village = \"\";\n          }\n        }\n      } catch (error) {\n        console.error(\"Error loading villages:\", error);\n        this.message = \"Failed to load villages.\";\n        this.messageType = \"alert-warning\";\n      }\n    },\n    // Method to populate cascading dropdowns when loading existing data\n    async populateGeographicHierarchy() {\n      try {\n        if (this.form.province) {\n          this.loadDistricts();\n          if (this.form.district) {\n            // Wait a bit for districts to load then load sectors\n            setTimeout(() => {\n              this.loadSectors();\n              if (this.form.sector) {\n                setTimeout(() => {\n                  this.loadCells();\n                  if (this.form.cell) {\n                    setTimeout(() => {\n                      this.loadVillages();\n                    }, 100);\n                  }\n                }, 100);\n              }\n            }, 100);\n          }\n        }\n      } catch (error) {\n        console.error(\"Error populating geographic hierarchy:\", error);\n      }\n    },\n    async getUserIdFromEmail() {\n      const token = localStorage.getItem(\"agentToken\");\n      if (!token) return;\n      try {\n        const payload = JSON.parse(atob(token.split(\".\")[1]));\n        this.userEmail = payload.email;\n        const res = await fetch(`${globalVariable}/get_user_id_by_email/${this.userEmail}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        const data = await res.json();\n        if (res.ok) {\n          this.userId = data.users_id;\n          this.fetchProfile();\n        } else {\n          this.message = data.message || \"Unable to get user ID.\";\n          this.messageType = \"alert-danger\";\n        }\n      } catch (err) {\n        console.error(\"Error getting users_id:\", err);\n        this.message = \"Failed to fetch user ID.\";\n        this.messageType = \"alert-danger\";\n      }\n    },\n    async fetchProfile() {\n      try {\n        const res = await fetch(`${globalVariable}/seeker/view_profile/${this.userIdurl}`, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"agentToken\")}`\n          }\n        });\n        const data = await res.json();\n        if (res.ok) {\n          // Fix date_of_birth format for input[type=date]\n          this.form.date_of_birth = data.date_of_birth ? data.date_of_birth.split(\"T\")[0] : \"\";\n\n          // salary matches your option values, just assign it directly\n          this.form.salary = data.salary || \"\";\n\n          // Map other fields except date_of_birth, salary\n          Object.keys(this.form).forEach(key => {\n            if (key !== \"date_of_birth\" && key !== \"salary\") {\n              this.form[key] = data[key] || this.form[key];\n            }\n          });\n\n          // Fix case of ID field to map correctly to id_url\n          this.form.id_url = data.ID ? `${globalVariable}/uploads/profile/${data.ID}` : null;\n          this.form.cv_url = data.cv ? `${globalVariable}/uploads/profile/${data.cv}` : null;\n          this.form.image_url = data.image ? `${globalVariable}/uploads/profile/${data.image}` : null;\n\n          // Populate geographic hierarchy after form data is loaded\n          await this.populateGeographicHierarchy();\n\n          // Load current category info using the new method\n          await this.loadCurrentCategoryInfo();\n        } else {\n          this.message = data.message || \"Failed to fetch profile\";\n          this.messageType = \"alert-danger\";\n        }\n      } catch (err) {\n        console.error(\"Error fetching profile:\", err);\n        this.message = \"Error loading profile.\";\n        this.messageType = \"alert-danger\";\n      }\n    },\n    // NEW: Improved method to load current category information\n    async loadCurrentCategoryInfo() {\n      try {\n        // Use the new endpoint to get current category info\n        const res = await fetch(`${globalVariable}/categoryandtype/${this.userIdurl}`);\n        const data = await res.json();\n        if (res.ok) {\n          // Set the current category_type first using category_types_id\n          this.selectedCategoryType = data.category_types_id;\n\n          // Load categories for this category type\n          await this.loadCategories();\n\n          // Then set the current category_id after categories are loaded\n          this.form.categories_id = data.category_id;\n        } else {\n          console.error(\"Failed to load current category info:\", data.message);\n        }\n      } catch (error) {\n        console.error(\"Error loading current category info:\", error);\n      }\n    },\n    async loadCategoryTypes() {\n      try {\n        const res = await fetch(`${globalVariable}/category-types`);\n        const data = await res.json();\n        this.categoryTypes = data;\n      } catch (error) {\n        console.error(\"Failed to load category types:\", error);\n      }\n    },\n    async loadCategories() {\n      if (!this.selectedCategoryType) return;\n      try {\n        const res = await fetch(`${globalVariable}/categories/${this.selectedCategoryType}`);\n        const data = await res.json();\n        this.categories = data;\n\n        // Don't reset categories_id when loading categories for existing data\n        // Only reset when user manually changes category type\n      } catch (error) {\n        console.error(\"Failed to load categories:\", error);\n      }\n    },\n    // Handle category type change (when user manually changes it)\n    async onCategoryTypeChange() {\n      await this.loadCategories();\n      // Reset category selection when user changes category type\n      this.form.categories_id = \"\";\n    },\n    // REMOVED: The old determineCategoryType method since we're using loadCurrentCategoryInfo now\n\n    handleFileChange(field, event) {\n      const file = event.target.files[0];\n      if (file) {\n        // Check file size (10MB limit)\n        if (file.size > 10 * 1024 * 1024) {\n          this.message = `File ${file.name} is too large. Maximum size is 10MB.`;\n          this.messageType = \"alert-danger\";\n          return;\n        }\n        this.form[field] = file;\n\n        // Create preview URLs for images\n        if (field === 'image' && file.type.startsWith('image/')) {\n          this.form.image_url = URL.createObjectURL(file);\n        }\n      }\n    },\n    async handleSubmit() {\n      const formData = new FormData();\n      for (const key of [\"first_name\", \"last_name\", \"gender\", \"fathers_name\", \"mothers_name\", \"telephone\", \"province\", \"district\", \"sector\", \"cell\", \"village\", \"bio\", \"salary\", \"date_of_birth\", \"disability\", \"categories_id\"]) {\n        formData.append(key, this.form[key]);\n      }\n      if (this.form.image) formData.append(\"image\", this.form.image);\n      if (this.form.id) formData.append(\"id\", this.form.id);\n      if (this.form.cv) formData.append(\"cv\", this.form.cv);\n\n      // Always set is_editable = 0 on update\n      formData.append(\"is_editable\", 0);\n      try {\n        const res = await fetch(`${globalVariable}/seeker/update_profile/${this.userIdurl}`, {\n          method: \"PUT\",\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"agentToken\")}`\n          },\n          body: formData\n        });\n        const data = await res.json();\n        if (res.ok) {\n          this.message = \"Profile updated successfully.\";\n          this.messageType = \"alert-success\";\n          await this.fetchProfile(); // refresh profile info after update\n        } else {\n          this.message = data.message || \"Failed to update profile.\";\n          this.messageType = \"alert-danger\";\n        }\n      } catch (error) {\n        console.error(\"Error updating profile:\", error);\n        this.message = \"An error occurred during update.\";\n        this.messageType = \"alert-danger\";\n      }\n    }\n  }\n};","map":{"version":3,"names":["globalVariable","IndexComponent","getProvinces","getDistrictsByProvince","getSectorsByDistrict","getCellsBySector","getVillagesByCell","name","components","data","form","first_name","last_name","gender","fathers_name","mothers_name","telephone","email","province","district","sector","cell","village","bio","salary","date_of_birth","disability","created_at","cv","id","image","categories_id","id_url","userIdurl","users_id","cv_url","image_url","selectedCategoryType","userId","userEmail","message","messageType","categoryTypes","categories","provinces","districts","sectors","cells","villages","personalFields","label","model","type","mounted","loadProvinces","getUserIdFromEmail","loadCategoryTypes","$route","params","methods","error","console","loadDistricts","length","includes","loadSectors","loadCells","loadVillages","populateGeographicHierarchy","setTimeout","token","localStorage","getItem","payload","JSON","parse","atob","split","res","fetch","headers","Authorization","json","ok","fetchProfile","err","Object","keys","forEach","key","ID","loadCurrentCategoryInfo","category_types_id","loadCategories","category_id","onCategoryTypeChange","handleFileChange","field","event","file","target","files","size","startsWith","URL","createObjectURL","handleSubmit","formData","FormData","append","method","body"],"sources":["/Users/gentil/Desktop/Kozi-ai-agent/src/views/agent/EditSeekers.vue"],"sourcesContent":["<template>\n  <IndexComponent />\n  <div\n    class=\"page-wrapper\"\n    id=\"main-wrapper\"\n    data-layout=\"vertical\"\n    data-navbarbg=\"skin6\"\n    data-sidebartype=\"full\"\n    data-sidebar-description=\"fixed\"\n    data-header-description=\"fixed\"\n  >\n    <div class=\"body-wrapper\">\n      <h5 class=\"card-title fw-semibold mb-4\">Update seeker</h5>\n      <form @submit.prevent=\"handleSubmit\" class=\"mx-4\">\n        \n        <div class=\"form-group row\">\n          <div class=\"col-md-6\" v-for=\"(field, index) in personalFields\" :key=\"index\">\n            <label :for=\"field.model\" class=\"form-label\">{{ field.label }}</label>\n            <input :type=\"field.type\" v-model=\"form[field.model]\" class=\"form-control\" :id=\"field.model\" required />\n          </div>\n\n          <div class=\"col-md-6\">\n            <label class=\"form-label\">Gender</label>\n            <select v-model=\"form.gender\" class=\"form-control\" required style=\"height: 48px; padding-top: 8px; padding-bottom: 8px;\">\n              <option disabled value=\"\">Select Gender</option>\n              <option value=\"Male\">Male</option>\n              <option value=\"Female\">Female</option>\n              <option value=\"Other\">Other</option>\n            </select>\n          </div>\n\n          <div class=\"col-md-6\">\n            <label class=\"form-label\">Disability</label>\n            <select v-model=\"form.disability\" class=\"form-control\" required style=\"height: 48px; padding-top: 8px; padding-bottom: 8px;\">\n              <option disabled value=\"\">Select Disability</option>\n              <option value=\"None\">None</option>\n              <option value=\"Visual Impairment\">Visual Impairment</option>\n              <option value=\"Hearing Impairment\">Hearing Impairment</option>\n              <option value=\"Physical Disability\">Physical Disability</option>\n              <option value=\"Intellectual Disability\">Intellectual Disability</option>\n              <option value=\"Mental Health Condition\">Mental Health Condition</option>\n              <option value=\"Learning Disability\">Learning Disability</option>\n              <option value=\"Speech and Language Disorder\">Speech and Language Disorder</option>\n              <option value=\"Other\">Other</option>\n            </select>\n          </div>\n\n          <div class=\"col-md-6\">\n            <label class=\"form-label\">Expected Salary</label>\n            <select v-model=\"form.salary\" class=\"form-control\" style=\"height: 48px; padding-top: 8px; padding-bottom: 8px;\" required>\n              <option disabled value=\"\">Select Salary</option>\n              <option>35,000 Frw - 50,000 Frw</option>\n              <option>51,000 Frw - 80,000 Frw</option>\n              <option>81,000 Frw - 100,000 Frw</option>\n              <option>101,000 Frw - 150,000 Frw</option>\n              <option>150,001+ Frw</option>\n            </select>\n          </div>\n\n          <!-- Rwanda Geographic Structure Dropdowns -->\n          <div class=\"col-md-6\">\n            <label class=\"form-label\">Province</label>\n            <select \n              v-model=\"form.province\" \n              @change=\"loadDistricts\" \n              class=\"form-control\" \n              required style=\"height: 48px; padding-top: 8px; padding-bottom: 8px;\"\n            >\n              <option disabled value=\"\">Select Province</option>\n              <option v-for=\"province in provinces\" :key=\"province\" :value=\"province\">\n                {{ province }}\n              </option>\n            </select>\n          </div>\n\n          <div class=\"col-md-6\">\n            <label class=\"form-label\">District</label>\n            <select \n              v-model=\"form.district\" \n              @change=\"loadSectors\" \n              class=\"form-control\" \n              required style=\"height: 48px; padding-top: 8px; padding-bottom: 8px;\"\n              :disabled=\"!form.province\"\n            >\n              <option disabled value=\"\">Select District</option>\n              <option v-for=\"district in districts\" :key=\"district\" :value=\"district\">\n                {{ district }}\n              </option>\n            </select>\n          </div>\n\n          <div class=\"col-md-6\">\n            <label class=\"form-label\">Sector</label>\n            <select \n              v-model=\"form.sector\" \n              @change=\"loadCells\" \n              class=\"form-control\" \n              required style=\"height: 48px; padding-top: 8px; padding-bottom: 8px;\"\n              :disabled=\"!form.district\"\n            >\n              <option disabled value=\"\">Select Sector</option>\n              <option v-for=\"sector in sectors\" :key=\"sector\" :value=\"sector\">\n                {{ sector }}\n              </option>\n            </select>\n          </div>\n\n          <div class=\"col-md-6\">\n            <label class=\"form-label\">Cell</label>\n            <select \n              v-model=\"form.cell\" \n              @change=\"loadVillages\" \n              class=\"form-control\" \n              required style=\"height: 48px; padding-top: 8px; padding-bottom: 8px;\"\n              :disabled=\"!form.sector\"\n            >\n              <option disabled value=\"\">Select Cell</option>\n              <option v-for=\"cell in cells\" :key=\"cell\" :value=\"cell\">\n                {{ cell }}\n              </option>\n            </select>\n          </div>\n\n          <div class=\"col-md-6\">\n            <label class=\"form-label\">Village</label>\n            <select \n              v-model=\"form.village\" \n              class=\"form-control\" \n              required style=\"height: 48px; padding-top: 8px; padding-bottom: 8px;\"\n              :disabled=\"!form.cell\"\n            >\n              <option disabled value=\"\">Select Village</option>\n              <option v-for=\"village in villages\" :key=\"village\" :value=\"village\">\n                {{ village }}\n              </option>\n            </select>\n          </div>\n\n          <!-- Category selection -->\n          <div class=\"col-md-6\">\n            <label class=\"form-label\">Category Type</label>\n            <select v-model=\"selectedCategoryType\" @change=\"onCategoryTypeChange\" class=\"form-control\" required style=\"height: 48px; padding-top: 8px; padding-bottom: 8px;\">\n              <option disabled value=\"\">Select Category Type</option>\n              <option v-for=\"type in categoryTypes\" :key=\"type.id\" :value=\"type.id\">{{ type.name }}</option>\n            </select>\n          </div>\n\n          <div class=\"col-md-6\">\n            <label class=\"form-label\">Category</label>\n            <select v-model=\"form.categories_id\" style=\"height: 48px; padding-top: 8px; padding-bottom: 8px;\" class=\"form-control\" required>\n              <option disabled value=\"\">Select Category</option>\n              <option v-for=\"cat in categories\" :key=\"cat.id\" :value=\"cat.id\">{{ cat.name }}</option>\n            </select>\n          </div>\n\n          <!-- File Uploads -->\n          <div class=\"col-md-6\">\n            <label class=\"form-label\">Upload ID Card</label>\n            <input \n              type=\"file\" \n              @change=\"handleFileChange('id', $event)\" \n              class=\"form-control\"\n              accept=\".pdf,.jpg,.jpeg,.png\"\n            />\n            <div v-if=\"form.id_url\" class=\"mt-2\">\n              <a :href=\"form.id_url\" target=\"_blank\" class=\"btn btn-outline-primary btn-sm\">View Current ID</a>\n            </div>\n          </div>\n\n          <div class=\"col-md-6\">\n            <label class=\"form-label\">Upload Profile Image</label>\n            <input \n              type=\"file\" \n              @change=\"handleFileChange('image', $event)\" \n              class=\"form-control\"\n              accept=\"image/*\"\n            />\n            <div v-if=\"form.image_url\" class=\"mt-2\">\n              <img :src=\"form.image_url\" alt=\"Profile\" class=\"img-thumbnail\" style=\"max-height: 150px;\" />\n            </div>\n          </div>\n\n          <div class=\"col-md-6\">\n            <label class=\"form-label\">Upload CV</label>\n            <input \n              type=\"file\" \n              @change=\"handleFileChange('cv', $event)\" \n              class=\"form-control\"\n              accept=\".pdf,.doc,.docx\"\n            />\n            <div v-if=\"form.cv_url\" class=\"mt-2\">\n              <a :href=\"form.cv_url\" target=\"_blank\" class=\"btn btn-outline-secondary btn-sm\">View Current CV</a>\n            </div>\n          </div>\n\n          <div class=\"col-md-12\">\n            <label class=\"form-label\">Bio</label>\n            <textarea v-model=\"form.bio\" class=\"form-control\" rows=\"10\" required></textarea>\n          </div>\n        </div>\n\n        <button type=\"submit\" class=\"btn btn-primary mb-3\">Update</button>\n\n        <div v-if=\"message\" :class=\"['alert', messageType]\">{{ message }}</div>\n      </form>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { globalVariable } from \"@/global\";\nimport IndexComponent from \"./IndexComponent.vue\";\nimport {\n  getProvinces,\n  getDistrictsByProvince,\n  getSectorsByDistrict,\n  getCellsBySector,\n  getVillagesByCell\n} from 'rwanda-geo-structure';\n\nexport default {\n  name: \"ProfileComponent\",\n  components: { IndexComponent },\n  data() {\n    return {\n      form: {\n        first_name: \"\",\n        last_name: \"\",\n        gender: \"\",\n        fathers_name: \"\",\n        mothers_name: \"\",\n        telephone: \"\",\n        email: \"\",\n        province: \"\",\n        district: \"\",\n        sector: \"\",\n        cell: \"\",\n        village: \"\",\n        bio: \"\",\n        salary: \"\",\n        date_of_birth: \"\",\n        disability: \"\",\n        created_at: \"\",\n        cv: null,\n        id: null,\n        image: null,\n        categories_id: \"\",\n        id_url: null,\n        userIdurl: null,\n        users_id: null,\n        cv_url: null,\n        image_url: null,\n      },\n      selectedCategoryType: \"\",\n      userId: \"\",\n      userEmail: \"\",\n      message: null,\n      messageType: null,\n      categoryTypes: [],\n      categories: [],\n      \n      // Rwanda geographic data\n      provinces: [],\n      districts: [],\n      sectors: [],\n      cells: [],\n      villages: [],\n      \n      personalFields: [\n        { label: \"First Name\", model: \"first_name\", type: \"text\" },\n        { label: \"Last Name\", model: \"last_name\", type: \"text\" },\n        { label: \"Father's Name\", model: \"fathers_name\", type: \"text\" },\n        { label: \"Mother's Name\", model: \"mothers_name\", type: \"text\" },\n        { label: \"Telephone\", model: \"telephone\", type: \"text\" },\n        { label: \"Email\", model: \"email\", type: \"text\" },\n        { label: \"Date of Birth\", model: \"date_of_birth\", type: \"date\" },\n      ],\n    };\n  },\n  mounted() {\n    this.loadProvinces();\n    this.getUserIdFromEmail();\n    this.loadCategoryTypes();\n    this.userIdurl = this.$route.params.id;\n  },\n  methods: {\n    // Rwanda geographic methods\n    loadProvinces() {\n      try {\n        this.provinces = getProvinces();\n      } catch (error) {\n        console.error(\"Error loading provinces:\", error);\n        this.message = \"Failed to load provinces.\";\n        this.messageType = \"alert-warning\";\n      }\n    },\n\n    loadDistricts() {\n      try {\n        if (this.form.province) {\n          this.districts = getDistrictsByProvince(this.form.province);\n          // Clear dependent fields if province changes\n          if (this.districts.length > 0 && !this.districts.includes(this.form.district)) {\n            this.sectors = [];\n            this.cells = [];\n            this.villages = [];\n            this.form.district = \"\";\n            this.form.sector = \"\";\n            this.form.cell = \"\";\n            this.form.village = \"\";\n          }\n        }\n      } catch (error) {\n        console.error(\"Error loading districts:\", error);\n        this.message = \"Failed to load districts.\";\n        this.messageType = \"alert-warning\";\n      }\n    },\n\n    loadSectors() {\n      try {\n        if (this.form.province && this.form.district) {\n          this.sectors = getSectorsByDistrict(this.form.province, this.form.district);\n          // Clear dependent fields if district changes\n          if (this.sectors.length > 0 && !this.sectors.includes(this.form.sector)) {\n            this.cells = [];\n            this.villages = [];\n            this.form.sector = \"\";\n            this.form.cell = \"\";\n            this.form.village = \"\";\n          }\n        }\n      } catch (error) {\n        console.error(\"Error loading sectors:\", error);\n        this.message = \"Failed to load sectors.\";\n        this.messageType = \"alert-warning\";\n      }\n    },\n\n    loadCells() {\n      try {\n        if (this.form.province && this.form.district && this.form.sector) {\n          this.cells = getCellsBySector(this.form.province, this.form.district, this.form.sector);\n          // Clear dependent fields if sector changes\n          if (this.cells.length > 0 && !this.cells.includes(this.form.cell)) {\n            this.villages = [];\n            this.form.cell = \"\";\n            this.form.village = \"\";\n          }\n        }\n      } catch (error) {\n        console.error(\"Error loading cells:\", error);\n        this.message = \"Failed to load cells.\";\n        this.messageType = \"alert-warning\";\n      }\n    },\n\n    loadVillages() {\n      try {\n        if (this.form.province && this.form.district && this.form.sector && this.form.cell) {\n          this.villages = getVillagesByCell(this.form.province, this.form.district, this.form.sector, this.form.cell);\n          // Clear village if cell changes\n          if (this.villages.length > 0 && !this.villages.includes(this.form.village)) {\n            this.form.village = \"\";\n          }\n        }\n      } catch (error) {\n        console.error(\"Error loading villages:\", error);\n        this.message = \"Failed to load villages.\";\n        this.messageType = \"alert-warning\";\n      }\n    },\n\n    // Method to populate cascading dropdowns when loading existing data\n    async populateGeographicHierarchy() {\n      try {\n        if (this.form.province) {\n          this.loadDistricts();\n          \n          if (this.form.district) {\n            // Wait a bit for districts to load then load sectors\n            setTimeout(() => {\n              this.loadSectors();\n              \n              if (this.form.sector) {\n                setTimeout(() => {\n                  this.loadCells();\n                  \n                  if (this.form.cell) {\n                    setTimeout(() => {\n                      this.loadVillages();\n                    }, 100);\n                  }\n                }, 100);\n              }\n            }, 100);\n          }\n        }\n      } catch (error) {\n        console.error(\"Error populating geographic hierarchy:\", error);\n      }\n    },\n\n    async getUserIdFromEmail() {\n      const token = localStorage.getItem(\"agentToken\");\n      if (!token) return;\n      try {\n        const payload = JSON.parse(atob(token.split(\".\")[1]));\n        this.userEmail = payload.email;\n        const res = await fetch(`${globalVariable}/get_user_id_by_email/${this.userEmail}`, {\n          headers: { Authorization: `Bearer ${token}` },\n        });\n        const data = await res.json();\n        if (res.ok) {\n          this.userId = data.users_id;\n          this.fetchProfile();\n        } else {\n          this.message = data.message || \"Unable to get user ID.\";\n          this.messageType = \"alert-danger\";\n        }\n      } catch (err) {\n        console.error(\"Error getting users_id:\", err);\n        this.message = \"Failed to fetch user ID.\";\n        this.messageType = \"alert-danger\";\n      }\n    },\n\n    async fetchProfile() {\n      try {\n        const res = await fetch(`${globalVariable}/seeker/view_profile/${this.userIdurl}`, {\n          headers: { Authorization: `Bearer ${localStorage.getItem(\"agentToken\")}` },\n        });\n        const data = await res.json();\n        if (res.ok) {\n          // Fix date_of_birth format for input[type=date]\n          this.form.date_of_birth = data.date_of_birth ? data.date_of_birth.split(\"T\")[0] : \"\";\n\n          // salary matches your option values, just assign it directly\n          this.form.salary = data.salary || \"\";\n\n          // Map other fields except date_of_birth, salary\n          Object.keys(this.form).forEach(key => {\n            if (key !== \"date_of_birth\" && key !== \"salary\") {\n              this.form[key] = data[key] || this.form[key];\n            }\n          });\n\n          // Fix case of ID field to map correctly to id_url\n          this.form.id_url = data.ID ? `${globalVariable}/uploads/profile/${data.ID}` : null;\n          this.form.cv_url = data.cv ? `${globalVariable}/uploads/profile/${data.cv}` : null;\n          this.form.image_url = data.image ? `${globalVariable}/uploads/profile/${data.image}` : null;\n\n          // Populate geographic hierarchy after form data is loaded\n          await this.populateGeographicHierarchy();\n\n          // Load current category info using the new method\n          await this.loadCurrentCategoryInfo();\n        } else {\n          this.message = data.message || \"Failed to fetch profile\";\n          this.messageType = \"alert-danger\";\n        }\n      } catch (err) {\n        console.error(\"Error fetching profile:\", err);\n        this.message = \"Error loading profile.\";\n        this.messageType = \"alert-danger\";\n      }\n    },\n\n    // NEW: Improved method to load current category information\n    async loadCurrentCategoryInfo() {\n      try {\n        // Use the new endpoint to get current category info\n        const res = await fetch(`${globalVariable}/categoryandtype/${this.userIdurl}`);\n        const data = await res.json();\n        if (res.ok) {\n          // Set the current category_type first using category_types_id\n          this.selectedCategoryType = data.category_types_id;\n          \n          // Load categories for this category type\n          await this.loadCategories();\n          \n          // Then set the current category_id after categories are loaded\n          this.form.categories_id = data.category_id;\n        } else {\n          console.error(\"Failed to load current category info:\", data.message);\n        }\n      } catch (error) {\n        console.error(\"Error loading current category info:\", error);\n      }\n    },\n\n    async loadCategoryTypes() {\n      try {\n        const res = await fetch(`${globalVariable}/category-types`);\n        const data = await res.json();\n        this.categoryTypes = data;\n      } catch (error) {\n        console.error(\"Failed to load category types:\", error);\n      }\n    },\n\n    async loadCategories() {\n      if (!this.selectedCategoryType) return;\n      \n      try {\n        const res = await fetch(`${globalVariable}/categories/${this.selectedCategoryType}`);\n        const data = await res.json();\n        this.categories = data;\n        \n        // Don't reset categories_id when loading categories for existing data\n        // Only reset when user manually changes category type\n      } catch (error) {\n        console.error(\"Failed to load categories:\", error);\n      }\n    },\n\n    // Handle category type change (when user manually changes it)\n    async onCategoryTypeChange() {\n      await this.loadCategories();\n      // Reset category selection when user changes category type\n      this.form.categories_id = \"\";\n    },\n\n    // REMOVED: The old determineCategoryType method since we're using loadCurrentCategoryInfo now\n\n    handleFileChange(field, event) {\n      const file = event.target.files[0];\n      if (file) {\n        // Check file size (10MB limit)\n        if (file.size > 10 * 1024 * 1024) {\n          this.message = `File ${file.name} is too large. Maximum size is 10MB.`;\n          this.messageType = \"alert-danger\";\n          return;\n        }\n        \n        this.form[field] = file;\n        \n        // Create preview URLs for images\n        if (field === 'image' && file.type.startsWith('image/')) {\n          this.form.image_url = URL.createObjectURL(file);\n        }\n      }\n    },\n\n    async handleSubmit() {\n      const formData = new FormData();\n      for (const key of [\n        \"first_name\", \"last_name\", \"gender\", \"fathers_name\", \"mothers_name\", \"telephone\",\n        \"province\", \"district\", \"sector\", \"cell\", \"village\", \"bio\", \"salary\",\n        \"date_of_birth\", \"disability\", \"categories_id\"\n      ]) {\n        formData.append(key, this.form[key]);\n      }\n\n      if (this.form.image) formData.append(\"image\", this.form.image);\n      if (this.form.id) formData.append(\"id\", this.form.id);\n      if (this.form.cv) formData.append(\"cv\", this.form.cv);\n\n      // Always set is_editable = 0 on update\n      formData.append(\"is_editable\", 0);\n\n      try {\n        const res = await fetch(`${globalVariable}/seeker/update_profile/${this.userIdurl}`, {\n          method: \"PUT\",\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"agentToken\")}`,\n          },\n          body: formData,\n        });\n        const data = await res.json();\n        if (res.ok) {\n          this.message = \"Profile updated successfully.\";\n          this.messageType = \"alert-success\";\n          await this.fetchProfile(); // refresh profile info after update\n        } else {\n          this.message = data.message || \"Failed to update profile.\";\n          this.messageType = \"alert-danger\";\n        }\n      } catch (error) {\n        console.error(\"Error updating profile:\", error);\n        this.message = \"An error occurred during update.\";\n        this.messageType = \"alert-danger\";\n      }\n    },\n  },\n};\n</script>\n\n    <style scoped>\n    .modal-overlay {\n       position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background: rgba(0, 0, 0, 0.5);\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        z-index: 1000;\n      }\n      \n      /* Modal content styling */\n      .modal-content {\n        background-color: white;\n        padding: 20px;\n        border-radius: 8px;\n        text-align: center;\n        width: 300px;\n      }\n    \n      .container-fluid {\n        max-width: 800px;\n        margin: auto;\n        padding: 20px;\n        background-color: #ffffff;\n        border-radius: 8px;\n        box-shadow: 0 8px 30px rgba(0, 0, 0, 0.2);\n      }\n      \n      h5 {\n        color: #333;\n        margin-bottom: 20px;\n      }\n      .custom-select {\n        width: 100%;\n        padding: 15px;\n        height: 50px;\n        border: 1px solid #ccc;\n        border-radius: 5px;\n        box-sizing: border-box;\n        transition: border-color 0.3s, box-shadow 0.3s;\n        font-size: 16px;\n  \n      }\n      .form-control {\n        width: 100%;\n        padding: 15px;\n        height: 50px;\n        border: 1px solid #ccc;\n        border-radius: 5px;\n        box-sizing: border-box;\n        transition: border-color 0.3s, box-shadow 0.3s;\n        font-size: 16px;\n      }\n      \n      .form-control:focus {\n        border-color: #E960A6;\n        box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);\n        outline: none;\n      }\n      \n      .form-label {\n        font-weight: bold;\n        margin-bottom: 5px;\n        display: block;\n      }\n      \n      .btn-primary {\n        background-color: #E960A6;\n        color: white;\n      \n      }\n      .btn-primary:hover {\n        background-color: #E960A6;\n        color: teal;\n      }\n      .form-group {\n        margin-bottom: 15px;\n      }\n      \n      </style>\n      \n\n\n      "],"mappings":";;;AAkNA,SAASA,cAAa,QAAS,UAAU;AACzC,OAAOC,cAAa,MAAO,sBAAsB;AACjD,SACEC,YAAY,EACZC,sBAAsB,EACtBC,oBAAoB,EACpBC,gBAAgB,EAChBC,iBAAgB,QACX,sBAAsB;AAE7B,eAAe;EACbC,IAAI,EAAE,kBAAkB;EACxBC,UAAU,EAAE;IAAEP;EAAe,CAAC;EAC9BQ,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,IAAI,EAAE;QACJC,UAAU,EAAE,EAAE;QACdC,SAAS,EAAE,EAAE;QACbC,MAAM,EAAE,EAAE;QACVC,YAAY,EAAE,EAAE;QAChBC,YAAY,EAAE,EAAE;QAChBC,SAAS,EAAE,EAAE;QACbC,KAAK,EAAE,EAAE;QACTC,QAAQ,EAAE,EAAE;QACZC,QAAQ,EAAE,EAAE;QACZC,MAAM,EAAE,EAAE;QACVC,IAAI,EAAE,EAAE;QACRC,OAAO,EAAE,EAAE;QACXC,GAAG,EAAE,EAAE;QACPC,MAAM,EAAE,EAAE;QACVC,aAAa,EAAE,EAAE;QACjBC,UAAU,EAAE,EAAE;QACdC,UAAU,EAAE,EAAE;QACdC,EAAE,EAAE,IAAI;QACRC,EAAE,EAAE,IAAI;QACRC,KAAK,EAAE,IAAI;QACXC,aAAa,EAAE,EAAE;QACjBC,MAAM,EAAE,IAAI;QACZC,SAAS,EAAE,IAAI;QACfC,QAAQ,EAAE,IAAI;QACdC,MAAM,EAAE,IAAI;QACZC,SAAS,EAAE;MACb,CAAC;MACDC,oBAAoB,EAAE,EAAE;MACxBC,MAAM,EAAE,EAAE;MACVC,SAAS,EAAE,EAAE;MACbC,OAAO,EAAE,IAAI;MACbC,WAAW,EAAE,IAAI;MACjBC,aAAa,EAAE,EAAE;MACjBC,UAAU,EAAE,EAAE;MAEd;MACAC,SAAS,EAAE,EAAE;MACbC,SAAS,EAAE,EAAE;MACbC,OAAO,EAAE,EAAE;MACXC,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE,EAAE;MAEZC,cAAc,EAAE,CACd;QAAEC,KAAK,EAAE,YAAY;QAAEC,KAAK,EAAE,YAAY;QAAEC,IAAI,EAAE;MAAO,CAAC,EAC1D;QAAEF,KAAK,EAAE,WAAW;QAAEC,KAAK,EAAE,WAAW;QAAEC,IAAI,EAAE;MAAO,CAAC,EACxD;QAAEF,KAAK,EAAE,eAAe;QAAEC,KAAK,EAAE,cAAc;QAAEC,IAAI,EAAE;MAAO,CAAC,EAC/D;QAAEF,KAAK,EAAE,eAAe;QAAEC,KAAK,EAAE,cAAc;QAAEC,IAAI,EAAE;MAAO,CAAC,EAC/D;QAAEF,KAAK,EAAE,WAAW;QAAEC,KAAK,EAAE,WAAW;QAAEC,IAAI,EAAE;MAAO,CAAC,EACxD;QAAEF,KAAK,EAAE,OAAO;QAAEC,KAAK,EAAE,OAAO;QAAEC,IAAI,EAAE;MAAO,CAAC,EAChD;QAAEF,KAAK,EAAE,eAAe;QAAEC,KAAK,EAAE,eAAe;QAAEC,IAAI,EAAE;MAAO,CAAC;IAEpE,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,aAAa,CAAC,CAAC;IACpB,IAAI,CAACC,kBAAkB,CAAC,CAAC;IACzB,IAAI,CAACC,iBAAiB,CAAC,CAAC;IACxB,IAAI,CAACvB,SAAQ,GAAI,IAAI,CAACwB,MAAM,CAACC,MAAM,CAAC7B,EAAE;EACxC,CAAC;EACD8B,OAAO,EAAE;IACP;IACAL,aAAaA,CAAA,EAAG;MACd,IAAI;QACF,IAAI,CAACV,SAAQ,GAAI1C,YAAY,CAAC,CAAC;MACjC,EAAE,OAAO0D,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;QAChD,IAAI,CAACpB,OAAM,GAAI,2BAA2B;QAC1C,IAAI,CAACC,WAAU,GAAI,eAAe;MACpC;IACF,CAAC;IAEDqB,aAAaA,CAAA,EAAG;MACd,IAAI;QACF,IAAI,IAAI,CAACpD,IAAI,CAACQ,QAAQ,EAAE;UACtB,IAAI,CAAC2B,SAAQ,GAAI1C,sBAAsB,CAAC,IAAI,CAACO,IAAI,CAACQ,QAAQ,CAAC;UAC3D;UACA,IAAI,IAAI,CAAC2B,SAAS,CAACkB,MAAK,GAAI,KAAK,CAAC,IAAI,CAAClB,SAAS,CAACmB,QAAQ,CAAC,IAAI,CAACtD,IAAI,CAACS,QAAQ,CAAC,EAAE;YAC7E,IAAI,CAAC2B,OAAM,GAAI,EAAE;YACjB,IAAI,CAACC,KAAI,GAAI,EAAE;YACf,IAAI,CAACC,QAAO,GAAI,EAAE;YAClB,IAAI,CAACtC,IAAI,CAACS,QAAO,GAAI,EAAE;YACvB,IAAI,CAACT,IAAI,CAACU,MAAK,GAAI,EAAE;YACrB,IAAI,CAACV,IAAI,CAACW,IAAG,GAAI,EAAE;YACnB,IAAI,CAACX,IAAI,CAACY,OAAM,GAAI,EAAE;UACxB;QACF;MACF,EAAE,OAAOsC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;QAChD,IAAI,CAACpB,OAAM,GAAI,2BAA2B;QAC1C,IAAI,CAACC,WAAU,GAAI,eAAe;MACpC;IACF,CAAC;IAEDwB,WAAWA,CAAA,EAAG;MACZ,IAAI;QACF,IAAI,IAAI,CAACvD,IAAI,CAACQ,QAAO,IAAK,IAAI,CAACR,IAAI,CAACS,QAAQ,EAAE;UAC5C,IAAI,CAAC2B,OAAM,GAAI1C,oBAAoB,CAAC,IAAI,CAACM,IAAI,CAACQ,QAAQ,EAAE,IAAI,CAACR,IAAI,CAACS,QAAQ,CAAC;UAC3E;UACA,IAAI,IAAI,CAAC2B,OAAO,CAACiB,MAAK,GAAI,KAAK,CAAC,IAAI,CAACjB,OAAO,CAACkB,QAAQ,CAAC,IAAI,CAACtD,IAAI,CAACU,MAAM,CAAC,EAAE;YACvE,IAAI,CAAC2B,KAAI,GAAI,EAAE;YACf,IAAI,CAACC,QAAO,GAAI,EAAE;YAClB,IAAI,CAACtC,IAAI,CAACU,MAAK,GAAI,EAAE;YACrB,IAAI,CAACV,IAAI,CAACW,IAAG,GAAI,EAAE;YACnB,IAAI,CAACX,IAAI,CAACY,OAAM,GAAI,EAAE;UACxB;QACF;MACF,EAAE,OAAOsC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;QAC9C,IAAI,CAACpB,OAAM,GAAI,yBAAyB;QACxC,IAAI,CAACC,WAAU,GAAI,eAAe;MACpC;IACF,CAAC;IAEDyB,SAASA,CAAA,EAAG;MACV,IAAI;QACF,IAAI,IAAI,CAACxD,IAAI,CAACQ,QAAO,IAAK,IAAI,CAACR,IAAI,CAACS,QAAO,IAAK,IAAI,CAACT,IAAI,CAACU,MAAM,EAAE;UAChE,IAAI,CAAC2B,KAAI,GAAI1C,gBAAgB,CAAC,IAAI,CAACK,IAAI,CAACQ,QAAQ,EAAE,IAAI,CAACR,IAAI,CAACS,QAAQ,EAAE,IAAI,CAACT,IAAI,CAACU,MAAM,CAAC;UACvF;UACA,IAAI,IAAI,CAAC2B,KAAK,CAACgB,MAAK,GAAI,KAAK,CAAC,IAAI,CAAChB,KAAK,CAACiB,QAAQ,CAAC,IAAI,CAACtD,IAAI,CAACW,IAAI,CAAC,EAAE;YACjE,IAAI,CAAC2B,QAAO,GAAI,EAAE;YAClB,IAAI,CAACtC,IAAI,CAACW,IAAG,GAAI,EAAE;YACnB,IAAI,CAACX,IAAI,CAACY,OAAM,GAAI,EAAE;UACxB;QACF;MACF,EAAE,OAAOsC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;QAC5C,IAAI,CAACpB,OAAM,GAAI,uBAAuB;QACtC,IAAI,CAACC,WAAU,GAAI,eAAe;MACpC;IACF,CAAC;IAED0B,YAAYA,CAAA,EAAG;MACb,IAAI;QACF,IAAI,IAAI,CAACzD,IAAI,CAACQ,QAAO,IAAK,IAAI,CAACR,IAAI,CAACS,QAAO,IAAK,IAAI,CAACT,IAAI,CAACU,MAAK,IAAK,IAAI,CAACV,IAAI,CAACW,IAAI,EAAE;UAClF,IAAI,CAAC2B,QAAO,GAAI1C,iBAAiB,CAAC,IAAI,CAACI,IAAI,CAACQ,QAAQ,EAAE,IAAI,CAACR,IAAI,CAACS,QAAQ,EAAE,IAAI,CAACT,IAAI,CAACU,MAAM,EAAE,IAAI,CAACV,IAAI,CAACW,IAAI,CAAC;UAC3G;UACA,IAAI,IAAI,CAAC2B,QAAQ,CAACe,MAAK,GAAI,KAAK,CAAC,IAAI,CAACf,QAAQ,CAACgB,QAAQ,CAAC,IAAI,CAACtD,IAAI,CAACY,OAAO,CAAC,EAAE;YAC1E,IAAI,CAACZ,IAAI,CAACY,OAAM,GAAI,EAAE;UACxB;QACF;MACF,EAAE,OAAOsC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;QAC/C,IAAI,CAACpB,OAAM,GAAI,0BAA0B;QACzC,IAAI,CAACC,WAAU,GAAI,eAAe;MACpC;IACF,CAAC;IAED;IACA,MAAM2B,2BAA2BA,CAAA,EAAG;MAClC,IAAI;QACF,IAAI,IAAI,CAAC1D,IAAI,CAACQ,QAAQ,EAAE;UACtB,IAAI,CAAC4C,aAAa,CAAC,CAAC;UAEpB,IAAI,IAAI,CAACpD,IAAI,CAACS,QAAQ,EAAE;YACtB;YACAkD,UAAU,CAAC,MAAM;cACf,IAAI,CAACJ,WAAW,CAAC,CAAC;cAElB,IAAI,IAAI,CAACvD,IAAI,CAACU,MAAM,EAAE;gBACpBiD,UAAU,CAAC,MAAM;kBACf,IAAI,CAACH,SAAS,CAAC,CAAC;kBAEhB,IAAI,IAAI,CAACxD,IAAI,CAACW,IAAI,EAAE;oBAClBgD,UAAU,CAAC,MAAM;sBACf,IAAI,CAACF,YAAY,CAAC,CAAC;oBACrB,CAAC,EAAE,GAAG,CAAC;kBACT;gBACF,CAAC,EAAE,GAAG,CAAC;cACT;YACF,CAAC,EAAE,GAAG,CAAC;UACT;QACF;MACF,EAAE,OAAOP,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;MAChE;IACF,CAAC;IAED,MAAML,kBAAkBA,CAAA,EAAG;MACzB,MAAMe,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;MAChD,IAAI,CAACF,KAAK,EAAE;MACZ,IAAI;QACF,MAAMG,OAAM,GAAIC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACN,KAAK,CAACO,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACrD,IAAI,CAACtC,SAAQ,GAAIkC,OAAO,CAACxD,KAAK;QAC9B,MAAM6D,GAAE,GAAI,MAAMC,KAAK,CAAC,GAAG/E,cAAc,yBAAyB,IAAI,CAACuC,SAAS,EAAE,EAAE;UAClFyC,OAAO,EAAE;YAAEC,aAAa,EAAE,UAAUX,KAAK;UAAG;QAC9C,CAAC,CAAC;QACF,MAAM7D,IAAG,GAAI,MAAMqE,GAAG,CAACI,IAAI,CAAC,CAAC;QAC7B,IAAIJ,GAAG,CAACK,EAAE,EAAE;UACV,IAAI,CAAC7C,MAAK,GAAI7B,IAAI,CAACyB,QAAQ;UAC3B,IAAI,CAACkD,YAAY,CAAC,CAAC;QACrB,OAAO;UACL,IAAI,CAAC5C,OAAM,GAAI/B,IAAI,CAAC+B,OAAM,IAAK,wBAAwB;UACvD,IAAI,CAACC,WAAU,GAAI,cAAc;QACnC;MACF,EAAE,OAAO4C,GAAG,EAAE;QACZxB,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEyB,GAAG,CAAC;QAC7C,IAAI,CAAC7C,OAAM,GAAI,0BAA0B;QACzC,IAAI,CAACC,WAAU,GAAI,cAAc;MACnC;IACF,CAAC;IAED,MAAM2C,YAAYA,CAAA,EAAG;MACnB,IAAI;QACF,MAAMN,GAAE,GAAI,MAAMC,KAAK,CAAC,GAAG/E,cAAc,wBAAwB,IAAI,CAACiC,SAAS,EAAE,EAAE;UACjF+C,OAAO,EAAE;YAAEC,aAAa,EAAE,UAAUV,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;UAAG;QAC3E,CAAC,CAAC;QACF,MAAM/D,IAAG,GAAI,MAAMqE,GAAG,CAACI,IAAI,CAAC,CAAC;QAC7B,IAAIJ,GAAG,CAACK,EAAE,EAAE;UACV;UACA,IAAI,CAACzE,IAAI,CAACe,aAAY,GAAIhB,IAAI,CAACgB,aAAY,GAAIhB,IAAI,CAACgB,aAAa,CAACoD,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE;;UAEpF;UACA,IAAI,CAACnE,IAAI,CAACc,MAAK,GAAIf,IAAI,CAACe,MAAK,IAAK,EAAE;;UAEpC;UACA8D,MAAM,CAACC,IAAI,CAAC,IAAI,CAAC7E,IAAI,CAAC,CAAC8E,OAAO,CAACC,GAAE,IAAK;YACpC,IAAIA,GAAE,KAAM,eAAc,IAAKA,GAAE,KAAM,QAAQ,EAAE;cAC/C,IAAI,CAAC/E,IAAI,CAAC+E,GAAG,IAAIhF,IAAI,CAACgF,GAAG,KAAK,IAAI,CAAC/E,IAAI,CAAC+E,GAAG,CAAC;YAC9C;UACF,CAAC,CAAC;;UAEF;UACA,IAAI,CAAC/E,IAAI,CAACsB,MAAK,GAAIvB,IAAI,CAACiF,EAAC,GAAI,GAAG1F,cAAc,oBAAoBS,IAAI,CAACiF,EAAE,EAAC,GAAI,IAAI;UAClF,IAAI,CAAChF,IAAI,CAACyB,MAAK,GAAI1B,IAAI,CAACmB,EAAC,GAAI,GAAG5B,cAAc,oBAAoBS,IAAI,CAACmB,EAAE,EAAC,GAAI,IAAI;UAClF,IAAI,CAAClB,IAAI,CAAC0B,SAAQ,GAAI3B,IAAI,CAACqB,KAAI,GAAI,GAAG9B,cAAc,oBAAoBS,IAAI,CAACqB,KAAK,EAAC,GAAI,IAAI;;UAE3F;UACA,MAAM,IAAI,CAACsC,2BAA2B,CAAC,CAAC;;UAExC;UACA,MAAM,IAAI,CAACuB,uBAAuB,CAAC,CAAC;QACtC,OAAO;UACL,IAAI,CAACnD,OAAM,GAAI/B,IAAI,CAAC+B,OAAM,IAAK,yBAAyB;UACxD,IAAI,CAACC,WAAU,GAAI,cAAc;QACnC;MACF,EAAE,OAAO4C,GAAG,EAAE;QACZxB,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEyB,GAAG,CAAC;QAC7C,IAAI,CAAC7C,OAAM,GAAI,wBAAwB;QACvC,IAAI,CAACC,WAAU,GAAI,cAAc;MACnC;IACF,CAAC;IAED;IACA,MAAMkD,uBAAuBA,CAAA,EAAG;MAC9B,IAAI;QACF;QACA,MAAMb,GAAE,GAAI,MAAMC,KAAK,CAAC,GAAG/E,cAAc,oBAAoB,IAAI,CAACiC,SAAS,EAAE,CAAC;QAC9E,MAAMxB,IAAG,GAAI,MAAMqE,GAAG,CAACI,IAAI,CAAC,CAAC;QAC7B,IAAIJ,GAAG,CAACK,EAAE,EAAE;UACV;UACA,IAAI,CAAC9C,oBAAmB,GAAI5B,IAAI,CAACmF,iBAAiB;;UAElD;UACA,MAAM,IAAI,CAACC,cAAc,CAAC,CAAC;;UAE3B;UACA,IAAI,CAACnF,IAAI,CAACqB,aAAY,GAAItB,IAAI,CAACqF,WAAW;QAC5C,OAAO;UACLjC,OAAO,CAACD,KAAK,CAAC,uCAAuC,EAAEnD,IAAI,CAAC+B,OAAO,CAAC;QACtE;MACF,EAAE,OAAOoB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;MAC9D;IACF,CAAC;IAED,MAAMJ,iBAAiBA,CAAA,EAAG;MACxB,IAAI;QACF,MAAMsB,GAAE,GAAI,MAAMC,KAAK,CAAC,GAAG/E,cAAc,iBAAiB,CAAC;QAC3D,MAAMS,IAAG,GAAI,MAAMqE,GAAG,CAACI,IAAI,CAAC,CAAC;QAC7B,IAAI,CAACxC,aAAY,GAAIjC,IAAI;MAC3B,EAAE,OAAOmD,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACxD;IACF,CAAC;IAED,MAAMiC,cAAcA,CAAA,EAAG;MACrB,IAAI,CAAC,IAAI,CAACxD,oBAAoB,EAAE;MAEhC,IAAI;QACF,MAAMyC,GAAE,GAAI,MAAMC,KAAK,CAAC,GAAG/E,cAAc,eAAe,IAAI,CAACqC,oBAAoB,EAAE,CAAC;QACpF,MAAM5B,IAAG,GAAI,MAAMqE,GAAG,CAACI,IAAI,CAAC,CAAC;QAC7B,IAAI,CAACvC,UAAS,GAAIlC,IAAI;;QAEtB;QACA;MACF,EAAE,OAAOmD,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACpD;IACF,CAAC;IAED;IACA,MAAMmC,oBAAoBA,CAAA,EAAG;MAC3B,MAAM,IAAI,CAACF,cAAc,CAAC,CAAC;MAC3B;MACA,IAAI,CAACnF,IAAI,CAACqB,aAAY,GAAI,EAAE;IAC9B,CAAC;IAED;;IAEAiE,gBAAgBA,CAACC,KAAK,EAAEC,KAAK,EAAE;MAC7B,MAAMC,IAAG,GAAID,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;MAClC,IAAIF,IAAI,EAAE;QACR;QACA,IAAIA,IAAI,CAACG,IAAG,GAAI,EAAC,GAAI,IAAG,GAAI,IAAI,EAAE;UAChC,IAAI,CAAC9D,OAAM,GAAI,QAAQ2D,IAAI,CAAC5F,IAAI,sCAAsC;UACtE,IAAI,CAACkC,WAAU,GAAI,cAAc;UACjC;QACF;QAEA,IAAI,CAAC/B,IAAI,CAACuF,KAAK,IAAIE,IAAI;;QAEvB;QACA,IAAIF,KAAI,KAAM,OAAM,IAAKE,IAAI,CAAC/C,IAAI,CAACmD,UAAU,CAAC,QAAQ,CAAC,EAAE;UACvD,IAAI,CAAC7F,IAAI,CAAC0B,SAAQ,GAAIoE,GAAG,CAACC,eAAe,CAACN,IAAI,CAAC;QACjD;MACF;IACF,CAAC;IAED,MAAMO,YAAYA,CAAA,EAAG;MACnB,MAAMC,QAAO,GAAI,IAAIC,QAAQ,CAAC,CAAC;MAC/B,KAAK,MAAMnB,GAAE,IAAK,CAChB,YAAY,EAAE,WAAW,EAAE,QAAQ,EAAE,cAAc,EAAE,cAAc,EAAE,WAAW,EAChF,UAAU,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,EAAE,SAAS,EAAE,KAAK,EAAE,QAAQ,EACpE,eAAe,EAAE,YAAY,EAAE,eAAc,CAC9C,EAAE;QACDkB,QAAQ,CAACE,MAAM,CAACpB,GAAG,EAAE,IAAI,CAAC/E,IAAI,CAAC+E,GAAG,CAAC,CAAC;MACtC;MAEA,IAAI,IAAI,CAAC/E,IAAI,CAACoB,KAAK,EAAE6E,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAE,IAAI,CAACnG,IAAI,CAACoB,KAAK,CAAC;MAC9D,IAAI,IAAI,CAACpB,IAAI,CAACmB,EAAE,EAAE8E,QAAQ,CAACE,MAAM,CAAC,IAAI,EAAE,IAAI,CAACnG,IAAI,CAACmB,EAAE,CAAC;MACrD,IAAI,IAAI,CAACnB,IAAI,CAACkB,EAAE,EAAE+E,QAAQ,CAACE,MAAM,CAAC,IAAI,EAAE,IAAI,CAACnG,IAAI,CAACkB,EAAE,CAAC;;MAErD;MACA+E,QAAQ,CAACE,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC;MAEjC,IAAI;QACF,MAAM/B,GAAE,GAAI,MAAMC,KAAK,CAAC,GAAG/E,cAAc,0BAA0B,IAAI,CAACiC,SAAS,EAAE,EAAE;UACnF6E,MAAM,EAAE,KAAK;UACb9B,OAAO,EAAE;YACPC,aAAa,EAAE,UAAUV,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;UAC7D,CAAC;UACDuC,IAAI,EAAEJ;QACR,CAAC,CAAC;QACF,MAAMlG,IAAG,GAAI,MAAMqE,GAAG,CAACI,IAAI,CAAC,CAAC;QAC7B,IAAIJ,GAAG,CAACK,EAAE,EAAE;UACV,IAAI,CAAC3C,OAAM,GAAI,+BAA+B;UAC9C,IAAI,CAACC,WAAU,GAAI,eAAe;UAClC,MAAM,IAAI,CAAC2C,YAAY,CAAC,CAAC,EAAE;QAC7B,OAAO;UACL,IAAI,CAAC5C,OAAM,GAAI/B,IAAI,CAAC+B,OAAM,IAAK,2BAA2B;UAC1D,IAAI,CAACC,WAAU,GAAI,cAAc;QACnC;MACF,EAAE,OAAOmB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;QAC/C,IAAI,CAACpB,OAAM,GAAI,kCAAkC;QACjD,IAAI,CAACC,WAAU,GAAI,cAAc;MACnC;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}